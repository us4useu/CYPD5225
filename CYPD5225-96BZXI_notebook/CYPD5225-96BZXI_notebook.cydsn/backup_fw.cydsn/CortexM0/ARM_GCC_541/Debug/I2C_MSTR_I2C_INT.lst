ARM GAS  e:\temp\ccq07yyZ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"I2C_MSTR_I2C_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.section	.gnu.lto_.profile.6240ad3d,"",%progbits
  19 0000 789C6361 		.ascii	"x\234ca`d`c`\000\222_\030\3571\002\000\006$\001\341"
  19      60646063 
  19      6000925F 
  19      18EF3102 
  19      00062401 
  20              		.text
  21              		.section	.gnu.lto_.icf.6240ad3d,"",%progbits
  22 0000 789C6361 		.ascii	"x\234ca`d\000\001\016\006\004`dX\376j\311:F\006\000"
  22      60640001 
  22      0E060460 
  22      6458FE6A 
  22      C93A4606 
  23 0015 0E6602F3 		.ascii	"\016f\002\363"
  24              		.text
  25              		.section	.gnu.lto_.jmpfuncs.6240ad3d,"",%progbits
  26 0000 789C6361 		.ascii	"x\234ca`d\000\001N\006\004\200\210\324\0130\000\000"
  26      60640001 
  26      4E060480 
  26      88D40B30 
  26      0000
  27 0012 030F009F 		.ascii	"\003\017\000\237"
  28              		.text
  29              		.section	.gnu.lto_.inline.6240ad3d,"",%progbits
  30 0000 789C6361 		.ascii	"x\234ca`d\000\001%\006\004\000\212<`\264ad`\332\304"
  30      60640001 
  30      25060400 
  30      8A3C60B4 
  30      616460DA 
  31 0015 DC748E95 		.ascii	"\334t\216\225\201m\201<\023X\230\013H0\363\203\230\000"
  31      816D813C 
  31      1358980B 
  31      4830F383 
  31      9800
  32 0027 67FC0437 		.ascii	"g\374\0047"
  33              		.text
  34              		.section	.gnu.lto_.pureconst.6240ad3d,"",%progbits
  35 0000 789C6361 		.ascii	"x\234ca`d`f`\000\222R\000\000r\000$"
  35      60646066 
  35      60009252 
ARM GAS  e:\temp\ccq07yyZ.s 			page 2


  35      00007200 
  35      24
  36              		.text
  37              		.section	.gnu.lto_I2C_MSTR_I2C_ISR.6240ad3d,"",%progbits
  38 0000 789C9D3A 		.ascii	"x\234\235:wXUG\366w\346\276N\2657\002X@\021{\357\232"
  38      77585547 
  38      F677E6BE 
  38      4EB53702 
  38      5840117B 
  39 0016 4DBECDBA 		.ascii	"M\276\315\272\331\224\215\331\222]\277\230\254\222u"
  39      D9948DD9 
  39      925DBF98 
  39      AC9275
  40 0025 B3DFA7BF 		.ascii	"\263\337\247\277\030\335\374\362\333|\361IS\220X\343"
  40      18DDFCF2 
  40      DB7CF149 
  40      539058E3 
  41 0035 4BB027D6 		.ascii	"K\260'\326\210A\020\243\"\250X@\243\210\032\025\215"
  41      884110A3 
  41      22A85840 
  41      A3881A15 
  41      8D
  42 0046 152CC428 		.ascii	"\025,\304(*\217 *\001\371\31593w\336\345\372 y\362\307"
  42      2A8F202A 
  42      01F9CD39 
  42      3377DEE5 
  42      FA2079F2 
  43 005b 61CA9933 		.ascii	"a\312\2313\247\317\231\271\317\244\020\005\376\206\364"
  43      A7CF99B9 
  43      CFA41005 
  43      FE86F4
  44 006a 5094DFB0 		.ascii	"P\224\337\260\377/\251\212B\236U\010]P\244(\263l\224"
  44      FF2FA98A 
  44      429E5508 
  44      5D50A428 
  44      B36C94
  45 007d AA870629 		.ascii	"\252\207\006)N\207\351\3336\212\323_%&>l\242\3469]\331"
  45      4E87E9DB 
  45      368AD35F 
  45      25263E6C 
  45      A2E6395D 
  46 0092 B005A0BF 		.ascii	"\260\005\240\277\231X\370\260\205Zq8\010\207\255\324"
  46      9958F8B0 
  46      855A7138 
  46      0887ADD4 
  47 00a2 863D3BF6 		.ascii	"\206=;\366l\304\316\221\354\324\201\303~8\354 ~|\330"
  47      6CC4CE91 
  47      ECD481C3 
  47      7E38EC20 
  47      7E7CD8
  48 00b5 8FFAEBD6 		.ascii	"\217\372\353\326\372\323@\354\005`/\200\004r\244@\022"
  48      FAD340EC 
  48      05602F80 
  48      0472A440 
  48      12
  49 00c6 C41B4134 		.ascii	"\304\033A4\030\347G\342|0m\206\275\226\330kF[\344\206"
  49      18E747E2 
ARM GAS  e:\temp\ccq07yyZ.s 			page 3


  49      7C306D86 
  49      BD96D86B 
  49      465BE486 
  50 00da B25EF3D3 		.ascii	"\262^\363\323\275Y\2579i\301\227\264 \243y\243%m\205"
  50      BD59AF39 
  50      69C197B4 
  50      20A379A3 
  50      256D85
  51 00ed D81D10BB 		.ascii	"\330\035\020\273\025m\215\2756\330kM:p\2446\264-\016"
  51      156D8DBD 
  51      36D86B4D 
  51      3A70A436 
  51      B42D0E
  52 0100 B7C3E1B6 		.ascii	"\267\303\341\266\332p;\332^\267\266\2756\334\201\206"
  52      DA703BDA 
  52      5EB7B6BD 
  52      36DC8186 
  53 0110 E0F0401C 		.ascii	"\340\360@\034\016\241\317`\257\033\366\236\241\241\330"
  53      0EA1CF60 
  53      AF1BF69E 
  53      A1A1D8
  54 011f EB82BD50 		.ascii	"\353\202\275P\332\021{a\330\013\243\341\330\3031\377"
  54      DA117B61 
  54      D80BA3E1 
  54      D8C331FF 
  55 012f 70D29193 		.ascii	"p\322\221\223\353H:C\203t\342\377\367\331:\323N)\207"
  55      EB483A43 
  55      8374E2FF 
  55      F7D93AD3 
  55      4E2987
  56 0142 1486D835 		.ascii	"\024\206\3305\336\312\020\273\320\010\\\326\025\227"
  56      DECA10BB 
  56      D0085CD6 
  56      1597
  57 0150 45D0485D 		.ascii	"E\320H]/\222t\345D\272\222\201\274\321\215F\341|\017"
  57      2F9274E5 
  57      44BA9281 
  57      BCD18D46 
  57      E17C0F
  58 0163 9C8FA2D1 		.ascii	"\234\217\242\321\330\353\216\275\356$\232#Ek\330=h_"
  58      D8EB8EBD 
  58      EE249A23 
  58      456BD83D 
  58      685F
  59 0175 9CEF8FF3 		.ascii	"\234\357\217\363}\311\030\344\244'\355Ut\004\030\350"
  59      7DC918E4 
  59      A427ED55 
  59      740418E8 
  60 0185 B75F65C3 		.ascii	"\267_e\303\275h\357\212V\254\327g\365\020\326\353M\372"
  60      BD68EF8A 
  60      56ACD767 
  60      F510D6EB 
  60      4DFA
  61 0197 F0B57D38 		.ascii	"\360\265}8\366>[\236B{\352\361\373i\324\373\323\001"
  61      F63E5B9E 
  61      427BEAF1 
  61      FB69D4FB 
ARM GAS  e:\temp\ccq07yyZ.s 			page 4


  61      D301
  62 01a9 3A450DD0 		.ascii	":E\015\320\206\007\322A`,\307h0\234\377 :\030\221\206"
  62      8607D241 
  62      602CC768 
  62      309CFF20 
  62      3A189186 
  63 01bd 21D2603A 		.ascii	"!\322`:\024\3159\004\3159\204\014\345K\206j\346\034"
  63      14CD3904 
  63      CD39840C 
  63      E54B866A 
  63      E61C
  64 01cf 4647E0FC 		.ascii	"FG\340\374p\234\037NF\360\341\021\332\374H:\272\030"
  64      709C1F4E 
  64      46F0E111 
  64      DAFC483A 
  64      BA18
  65 01e1 688FDA05 		.ascii	"h\217\332\005\264Gi\303\243\011\201\206\323F\224\231"
  65      B44769C3 
  65      A3098186 
  65      D3469499 
  66 01f1 5435992D 		.ascii	"T5\231-V\233\335\341\347\037\020\030\024\334\254y\213"
  66      569BDDE1 
  66      E71F1018 
  66      14DCAC79 
  66      8B
  67 0202 96AD5AB7 		.ascii	"\226\255Z\267i\333\256}\207\220gB\303\302;v\352\334"
  67      69DBAE7D 
  67      87906742 
  67      C3C23B76 
  67      EADC
  68 0214 2522B26B 		.ascii	"%\"\262k\267\250\356\321=\372\366\354\325\273O\236\322"
  68      B7A8EED1 
  68      3DFAF6EC 
  68      D5BB4F9E 
  68      D2
  69 0225 AFFF8081 		.ascii	"\257\377\200\201\203\006\017\031:l\370\210\221\243F"
  69      83060F19 
  69      3A6CF888 
  69      91A346
  70 0234 93996A9E 		.ascii	"\223\231j\236\"\376:+$\317D\352\331_\020\366\357\323"
  70      22FE3A2B 
  70      24CF44EA 
  70      D95F10F6 
  70      EFD3
  71 0246 3A4AF6CF 		.ascii	":J\366\317.\313\246Q\033\234\354\257\344\306+\316\215"
  71      2ECBA651 
  71      1B9CECAF 
  71      E4C62BCE 
  71      8D
  72 0257 792481C5 		.ascii	"y$\201\305Y=\345K\310\006\022\2450\254\223\361\031\313"
  72      593DE54B 
  72      C80612A5 
  72      30AC93F1 
  72      19CB
  73 0269 D52A9AA0 		.ascii	"\325*\232\240\022bb]\367\261\245\327\002\241KI8\353"
  73      1262625D 
  73      F7B1A5D7 
ARM GAS  e:\temp\ccq07yyZ.s 			page 5


  73      02A14B49 
  73      38EB
  74 027b EE9A7734 		.ascii	"\356\232w4\336\241\366$\200\231\234|!\223F\254q:c\235"
  74      DEA1F624 
  74      80999C7C 
  74      219346AC 
  74      713A639D 
  75 028f 794BDE4B 		.ascii	"yK\336Ku\346\305\207'\250*\331DTF\223|EB\310F\022\202"
  75      75E6C587 
  75      27A82AD9 
  75      44544693 
  75      7C4542C8 
  76 02a6 B41972ED 		.ascii	"\264\031r\355\212]n\233:\024\027\356-\314\236!\326-"
  76      8A5D6E9B 
  76      3A1417EE 
  76      2DCC9E21 
  76      D62D
  77 02b8 8A71268D 		.ascii	"\212q&\215\201U\233\275\256\272\232\371xI\200%\036X"
  77      81559BBD 
  77      AEBA9AF9 
  77      78498025 
  77      1E58
  78 02ca 0E275F93 		.ascii	"\016'_\223\010\222F\"8\307$\235XX\322\240\332\350\226"
  78      08924622 
  78      38C7249D 
  78      5858D2A0 
  78      DAE896
  79 02dd D7F29CF5 		.ascii	"\327\362\234\365\365q\316\274\205fw9\311&D\201\031F"
  79      F571CEBC 
  79      85667739 
  79      C9264481 
  79      1946
  80 02ef 91CDA908 		.ascii	"\221\315\251\010M\010\315\010-\010\255\010m\010\355"
  80      4D08CD08 
  80      2D08AD08 
  80      6D08ED
  81 02fe 4A826A72 		.ascii	"J\202jr\000\360c\300\354\017\255\000hu`\300\022\202"
  81      00F063C0 
  81      EC0FAD00 
  81      687560C0 
  81      1282
  82 0310 D442A11F 		.ascii	"\324B\241\037\006\240#\003\326N\000:C\267\013\200\010"
  82      06A02303 
  82      D64E003A 
  82      43B70B80 
  82      08
  83 0321 581209A0 		.ascii	"X\022\011\240\033t\243\000t\207n4\200\236\200\334\013"
  83      1B74A300 
  83      74876E34 
  83      809E80DC 
  83      0B
  84 0332 406FDCAF 		.ascii	"@o\334\257\017\014\366\0050\000\006\007\002\030\004"
  84      0F0CF605 
  84      30000607 
  84      021804
  85 0341 4B060318 		.ascii	"K\006\003\030\002\335\241\000\206Aw8\200\221\200<\012"
  85      02DDA100 
ARM GAS  e:\temp\ccq07yyZ.s 			page 6


  85      86417738 
  85      8091803C 
  85      0A
  86 0352 C0189878 		.ascii	"\300\030\230x\026\300\3630\361[h\275\000\340w\000\306"
  86      16C0F330 
  86      F15B68BD 
  86      00E07700 
  86      C6
  87 0363 02F83D4C 		.ascii	"\002\370=L\274\010\340\017\000^\002\3602\200W\000\274"
  87      BC08E00F 
  87      005E02F0 
  87      32805700 
  87      BC
  88 0374 0AE08F28 		.ascii	"\012\340\217(\323k\320\034\007\340O\014\330\376\014"
  88      D36BD01C 
  88      07E04F0C 
  88      D8FE0C
  89 0383 ADBF40EB 		.ascii	"\255\277@\353\257\320z\003h\375\035Z\343\001\274\211"
  89      AFD07A03 
  89      68FD1D5A 
  89      E301BC89 
  90 0393 4B2640F3 		.ascii	"K&@\363-\000o\003\342?\2405\021Z\223\240\025\003K\376"
  90      2D006F03 
  90      E23FA035 
  90      115A93A0 
  90      15034BFE 
  91 03a7 09ADC900 		.ascii	"\011\255\311\000\336\005\360o\000S\000L\005\360\036"
  91      DE05F06F 
  91      0053004C 
  91      05F01E
  92 03b6 806900DE 		.ascii	"\200i\000\336\0070\035\300\014\000\377\001\360\001\200"
  92      07301DC0 
  92      0C00FF01 
  92      F00180
  93 03c5 0F01FC17 		.ascii	"\017\001\374\027\204\375\010\300\307\320\235\011`\026"
  93      84FD08C0 
  93      C7D09D09 
  93      6016
  94 03d3 01188B30 		.ascii	"\001\030\2130\036a\002\302D\204\263\021\316A\230\204"
  94      1E6102C2 
  94      4484B311 
  94      CE419884 
  95 03e3 3019E15C 		.ascii	"0\031\341\\\204)\010\347\003\264-\300\366Bl/\002h]\214"
  95      842908E7 
  95      03B42DC0 
  95      F6426C2F 
  95      02685D8C 
  96 03f7 234B10BA 		.ascii	"#K\020\272\020\246\"\\\212p\031\302\025\010W\"\374\022"
  96      10A6225C 
  96      8A7019C2 
  96      15085722 
  96      FC12
  97 0409 57AD41B8 		.ascii	"W\255A\270\026G\326!\334\200#\033\021n\002hJC\270\005"
  97      1647D621 
  97      DC80231B 
  97      116E0268 
  97      4A43B805 
ARM GAS  e:\temp\ccq07yyZ.s 			page 7


  98 041d 4732106E 		.ascii	"G2\020n\305\221,\204\333qd\007BE\251`\316\015)\301M"
  98      C5912C84 
  98      DB716407 
  98      4245A960 
  98      CE0D29C1 
  99 0432 29FC57AF 		.ascii	")\374W\257\222\330\274\335\353\010\272;s\033\026\023"
  99      92D8BCDD 
  99      EB08BA3B 
  99      731B1613 
 100 0442 AE84FDC7 		.ascii	"\256\204\375\307\255\020\221*\363\361-,V\312H\254\313"
 100      AD10912A 
 100      F3F12D2C 
 100      56CA48AC 
 100      CB
 101 0453 BDED1940 		.ascii	"\275\355\031@\211S;\3501\354\030n\331\331\345\027\254"
 101      89533BE8 
 101      31EC186E 
 101      D9D9E517 
 101      AC
 102 0464 33EB9C73 		.ascii	"3\353\234s\234\316`6\226\244\362\330\272Ux\346\240c"
 102      9CCE6036 
 102      96A4F2D8 
 102      BA5578E6 
 102      A063
 103 0476 155931CB 		.ascii	"\025Y1\313\211\343\016\222If\222\014\210=\262\225\254"
 103      89E30E92 
 103      4966920C 
 103      883DB295 
 103      AC
 104 0487 224A2989 		.ascii	"\"J)\211\277\020\027\352\205\252\203\355\233%b\324M"
 104      BF1017EA 
 104      85AA83ED 
 104      9B2562D4 
 104      4D
 105 0498 55E5D020 		.ascii	"U\345\320 \365&\211\313;\033\003\270\012Cf\222\370\341"
 105      F52689CB 
 105      3B1B03B8 
 105      0A436692 
 105      F8E1
 106 04aa 9C094528 		.ascii	"\234\011E(#\373k\222\253\023UN*TO\312\037\031\\\025"
 106      23FB6B92 
 106      AB13554E 
 106      2A544FCA 
 106      1F195C15 
 107 04be 7FF480E8 		.ascii	"\177\364\200\350\246\254\370\334\011ig\326\355\234r"
 107      A6ACF8DC 
 107      096967D6 
 107      ED9C72
 108 04cd 0ACCC5B3 		.ascii	"\012\314\305\263$\025@\276aia\033\262\266\035X+#q\265"
 108      241540BE 
 108      6169611B 
 108      B2B61D58 
 108      2B2371B5 
 109 04e1 164E2E8C 		.ascii	"\026N.\214S\334v\360P\242\015H\230\011!;\030\246\236"
 109      53DC76F0 
 109      50A20D48 
 109      9809213B 
ARM GAS  e:\temp\ccq07yyZ.s 			page 8


 109      18A69E
 110 04f4 FB3086B0 		.ascii	"\3730\206\260\245<\373Q\000GP\310N\311\275Y\231\323"
 110      A53CFB51 
 110      004750C8 
 110      4EC9BD59 
 110      99D3
 111 0506 1518ACAA 		.ascii	"\025\030\254\252\310m\007\310\014s\303\251\3042\225"
 111      C86D07C8 
 111      0C73C3A9 
 111      C43295
 112 0515 73334770 		.ascii	"s3Gps{_z\216\335\303M\266\344f\027\343FPsS\213&\255"
 112      737B5F7A 
 112      8EDDC34D 
 112      B6E46617 
 112      E3465073 
 113 052d 2B337F96 		.ascii	"+3\177\226\220\266\243^Z\233\027s\330\222\230\031a\270"
 113      90B6A35E 
 113      5A9B1773 
 113      D8929819 
 113      61B8
 114 053f 3CFE6A91 		.ascii	"<\376j\221\037\232c\026\214\007\222\\f\216\034\334e"
 114      1F9A6316 
 114      8C07925C 
 114      668E1CDC 
 114      65
 115 0550 B741E64E 		.ascii	"\267A\346N\234\256L\315V\022N\366\030d\356\244\227\331"
 115      9CAE4CCD 
 115      56124EF6 
 115      1864EEA4 
 115      97D9
 116 0562 CA64DE2B 		.ascii	"\312d\336+e\266\012\231k\222\213S_\345\330\235\031v"
 116      65B60A99 
 116      6B928B53 
 116      5FE5D89D 
 116      1976
 117 0574 FAEEAD93 		.ascii	"\372\356\255\223\205\021Vr\261\313\323\216e\372y\304"
 117      85115672 
 117      B1CBD38E 
 117      65FA79C4 
 118 0584 CE9362EF 		.ascii	"\316\223b\35730\324EP\270\271w\271\203\353\330\311\216"
 118      3330D445 
 118      50B8B977 
 118      B983EBD8 
 118      C98E
 119 0596 1B8DA38F 		.ascii	"\033\215\243\217\005\222N\3556\345`\013\256\251\242"
 119      05924EED 
 119      36E5600B 
 119      AEA9A2
 120 05a5 93763EDD 		.ascii	"\223v>\335\300\265\203\274h*(I\245\3364\025L\0162M\035"
 120      C0B583BC 
 120      682A2849 
 120      A5DE3415 
 120      4C0E324D 
 121 05ba 40C6F205 		.ascii	"@\306\362\005c\017\005c\221\234\356\365u\327W\333\201"
 121      630F0563 
 121      919CEEF5 
 121      75D757DB 
ARM GAS  e:\temp\ccq07yyZ.s 			page 9


 121      81
 122 05cb AE89382D 		.ascii	"\256\2118-\244\000cf\277\213\010\203\377\332m\016\311"
 122      A4006366 
 122      BF8B0883 
 122      FFDA6D0E 
 122      C9
 123 05dc 6D0EB36D 		.ascii	"m\016\263m\030q\005\202soA\250.8\277\231]\230\351\340"
 123      18710582 
 123      736F41A8 
 123      2E38BF99 
 123      5D98E9E0 
 124 05f0 C149C8B7 		.ascii	"\301I\310\267\3021\354\240p\206\033\214\231?\216\321"
 124      C231ECA0 
 124      70861B8C 
 124      993F8ED1 
 125 0600 47ED3F5E 		.ascii	"G\355?^*\264\337\255)]\0371\350:\212\341{<\\\3506J\323"
 125      2AB4DFAD 
 125      295D1F31 
 125      E83A8AE1 
 125      7B3C5CE8 
 126 0617 6D25A190 		.ascii	"m%\241\220\023\254\345i\016\330\336V\233UE\030\007\016"
 126      13ACE569 
 126      0ED8DE56 
 126      9B554518 
 126      070E
 127 0629 4DDFEE8B 		.ascii	"M\337\356\213\232\276\273\373 \371Q)y\241A\301\321\234"
 127      9ABEBBFB 
 127      20F95129 
 127      79A141C1 
 127      D19C
 128 063b 5041E99A 		.ascii	"PA\351\232\245B\301\254\3568\366\224\012.\222\333\034"
 128      A542C1AC 
 128      EE38F694 
 128      0A2E92DB 
 128      1C
 129 064c 470547A3 		.ascii	"G\005G\243\202\037y\024,5\352g\320\250\312\265\2215"
 129      821F7914 
 129      2C35EA67 
 129      D0A8CAB5 
 129      9135
 130 065e 3F8CB3A5 		.ascii	"?\214\263\245z\364\2412}\333\321\026\216\302\035\250"
 130      7AF4A132 
 130      7DDBD116 
 130      8EC21DA8 
 131 066e 0C7FA98C 		.ascii	"\014\177\251\214\007\013\0038~O\037\342\362\204\214"
 131      070B0338 
 131      7E4F1FE2 
 131      F2848C
 132 067d CB9306D3 		.ascii	"\313\223\006\323\364\342\204d.\2622\037\370N\263\324"
 132      F4E28464 
 132      2EB2321F 
 132      F84EB3D4 
 133 068d 552A9064 		.ascii	"U*\220d$V\320\000\345\252]u\323@\215\241\322H\216\323"
 133      2456D000 
 133      E5AA5D75 
 133      D3408DA1 
 133      D2488ED3 
ARM GAS  e:\temp\ccq07yyZ.s 			page 10


 134 06a1 C707A59D 		.ascii	"\307\007\245\235\222J;m\260M\3378\325\316h=\225)\316"
 134      924A3B6D 
 134      B04DDF38 
 134      D5CE683D 
 134      9529CE
 135 06b4 48AAC568 		.ascii	"H\252\305h\212\276\012&\311\252\375v\257\204\032\327"
 135      8ABE0A26 
 135      C9AAFD76 
 135      AF841AD7 
 136 06c4 D659A9AD 		.ascii	"\326Y\251\255s\214\220>\306\003YR\372\036f*\211]\257"
 136      738C903E 
 136      C6035952 
 136      FA1E662A 
 136      895DAF
 137 06d7 3513D3DA 		.ascii	"5\023\323\332y\022\342_\273\273\004\252\326\374\372"
 137      7912E25F 
 137      BBBB04AA 
 137      D6FCFA
 138 06e6 0779417C 		.ascii	"\007yA|\234\222\013$$\000\354\037\244\235\215\232\003"
 138      9C920B24 
 138      2400EC1F 
 138      A49D8D9A 
 138      03
 139 06f7 9850CACC 		.ascii	"\230P\312\314+q\"\357\016\360\201\305\213\222\305K\006"
 139      2B7122EF 
 139      0EF081C5 
 139      8B92C54B 
 139      06
 140 0708 830E6484 		.ascii	"\203\016d\204\236\310\254\0035\003V\022\023\304\232"
 140      9EC8AC03 
 140      35035612 
 140      13C49A
 141 0717 85C51AF3 		.ascii	"\205\305\032\363\270@\246%\325\017\374+X\346\327\352"
 141      B840A625 
 141      D50FFC2B 
 141      58E6D7EA 
 142 0727 5C11E183 		.ascii	"\\\021\341\203\232\212\360\313\206]\007s\374\357*\012"
 142      9A8AF0CB 
 142      865D0773 
 142      FCEF2A0A 
 143 0737 57F8F16C 		.ascii	"W\370\361l\032L\256\030\002~\260.\2316\023\356S\225"
 143      1A4CAE18 
 143      027EB02E 
 143      993613EE 
 143      5395
 144 0749 51BED82C 		.ascii	"Q\276\330,\314s+k\225\323\302\263\271Sd\363\035k\323"
 144      CC732B6B 
 144      95D3C2B3 
 144      B95364F3 
 144      1D6BD3
 145 075c BE3179F6 		.ascii	"\2761y\366/\221\373\227\302!vE\304l\346\235\305\"&\266"
 145      2F91FB97 
 145      C2217645 
 145      C46CE69D 
 145      C52226B6 
 146 0770 101F7478 		.ascii	"\020\037txU\352\360\232A\232\014\002\244\236\214\203"
 146      55EAF09A 
ARM GAS  e:\temp\ccq07yyZ.s 			page 11


 146      419A0C02 
 146      A49E8C83 
 147 0780 0CA20B84 		.ascii	"\014\242\013\204\346\312}?\026\010-\214\201\260\365"
 147      E6CA7D3F 
 147      16082D8C 
 147      81B0F5
 148 078f 491E1AF7 		.ascii	"I\036\032\367\331\353\322go\030\"!\213\361\340\000j"
 148      D9EBD267 
 148      6F182221 
 148      8BF1E000 
 148      6A
 149 07a0 4F150B65 		.ascii	"O\025\013e\222\356\017\030\013Y\204\007\303\235k\276"
 149      92EE0F18 
 149      0B598407 
 149      C39D6BBE 
 150 07b0 06C34DA9 		.ascii	"\006\303M\251\245\037y0\344\374T{\224\362`\010&\267"
 150      A51F7930 
 150      E4FC547B 
 150      94F26008 
 150      26B7
 151 07c2 783038C0 		.ascii	"x08\300\373\233m\376\271\004\335\2759X"
 151      FB9B6DFE 
 151      B904DDBD 
 151      3958
 152 07d0 B8A5CC58 		.ascii	"\270\245\314X\367\016\230\271HC|\330\366\266\334\266"
 152      F70E98B9 
 152      48437CD8 
 152      F6B6DCB6 
 153 07e0 DC609CA1 		.ascii	"\334`\234\241\234\320\322\234\252#f\236\261l\344\216"
 153      9CD0D29C 
 153      AA23669E 
 153      B16CE48E 
 154 07f0 66A97422 		.ascii	"f\251t\"\220t\265C+\310X\350\333e{\376\207O\017k\312"
 154      9074B543 
 154      2BC858E8 
 154      DB657BFE 
 154      874F0F6B 
 155 0805 B7EF1A36 		.ascii	"\267\357\0326\034\316\361eP\233YP\337\3236\334#6\034"
 155      1CCEF165 
 155      509B5950 
 155      DFD336DC 
 155      23361C
 156 0818 AE73EED6 		.ascii	"\256s\356\326\212\333\304\235\373\301b\253Pw\243\236"
 156      8ADBC49D 
 156      FBC162AB 
 156      5077A39E 
 157 0828 5C019E7C 		.ascii	"\\\001\236|O\363\344\332S~\234\336H\037\214\355\226"
 157      4FF3E4DA 
 157      537E9CDE 
 157      481F8CED 
 157      96
 158 0839 C6AE3438 		.ascii	"\306\25648\321(Nh\373\225O\223\374y>Zm\"?=\345QW%\267"
 158      D1284E68 
 158      FB954F93 
 158      FC793E5A 
 158      6D223F3D 
 159 0852 B98F3E35 		.ascii	"\271\217>5\012\217\272\007\307#\2378\352\332\010\005"
ARM GAS  e:\temp\ccq07yyZ.s 			page 12


 159      0A8FBA07 
 159      C7239F38 
 159      EADA0805 
 160 0862 B8DC0507 		.ascii	"\270\334\005\007\255\234\2231>\330\276Z\332\376\201"
 160      AD9C9331 
 160      3ED8BE5A 
 160      DAFE81
 161 0871 C114CF32 		.ascii	"\301\024\3172B\236\260\274+t\377\254\316\330m\225\235"
 161      429EB0BC 
 161      2B74FFAC 
 161      CED86D95 
 161      9D
 162 0882 9417C787 		.ascii	"\224\027\307\207\016\372\371\350\352\017\345\276\217"
 162      0EFAF9E8 
 162      EA0FE5BE 
 162      8F
 163 088f B8AB5FCC 		.ascii	"\270\253_\314>]i\341\256\036Aj\204p\355\264\035N\034"
 163      3E5D69E1 
 163      AE1E416A 
 163      8470EDB4 
 163      1D4E1C
 164 08a2 33F9B8C1 		.ascii	"3\371\270\301\317r\203Z\276\301\241\212\214\324@\276"
 164      CF72835A 
 164      BEC1A18A 
 164      8CD440BE 
 165 08b2 411752A7 		.ascii	"A\027R\2479A\3216Q\357<\257?{\232y\251/\233%\2612\302"
 165      3941D136 
 165      51EF3CAF 
 165      3F7B9A79 
 165      A92F9B25 
 166 08c9 CB56CD49 		.ascii	"\313V\315I=\333\3521n\345\244\332\305\350\261\320\327"
 166      3DDBEA31 
 166      6EE5A4DA 
 166      C5E8B1D0 
 166      D7
 167 08da F33A5F6D 		.ascii	"\363:_m\257,'\\_\307?\325RC\352\326\363\221\3422\261"
 167      AF2C275C 
 167      5FC73FD5 
 167      5243EAD6 
 167      F391E232 
 168 08ef 8AE7E1FC 		.ascii	"\212\347\341\374\235\2276\333<\336;\213j\336\033KE\036"
 168      9D9736DB 
 168      3CDE3B8B 
 168      6ADE1B4B 
 168      451E
 169 0901 065A1D20 		.ascii	"\006Z\035 \344u\007\234\031\305q\027\037\024\361\377"
 169      E475079C 
 169      19C57117 
 169      1F14F1FF 
 170 0911 5B1F5415 		.ascii	"[\037T\025G5U\305\323\206>\360\002'$\337|\254\354HK"
 170      473555C5 
 170      D3863EF0 
 170      022724DF 
 170      7CACEC48 
 171 0926 A086F87F 		.ascii	"\240\206\370\177\301s\340\231\331I\333\022\213\251\326"
 171      C173E099 
 171      D949DB12 
ARM GAS  e:\temp\ccq07yyZ.s 			page 13


 171      8BA9D6
 172 0935 B9F5DB28 		.ascii	"\271\365\333(\353\265e\316kj\007\240=\234}!\"?\270\334"
 172      EBB565CE 
 172      6B6A07A0 
 172      3D9C7D21 
 172      223FB8DC 
 173 0949 67E385B7 		.ascii	"g\343\205\267\376\316\007N\023%\247\263\015\234\216"
 173      FECE074E 
 173      1325A7B3 
 173      0D9C8E
 174 0958 65843CDE 		.ascii	"e\204<\336\252e\212\261:o}F\004JM\362\335\243\377\313"
 174      AA658AB1 
 174      3A6F7D46 
 174      044A4DF2 
 174      DDA3FFCB 
 175 096c A77FCFF6 		.ascii	"\247\177\317\366X\226\270\376\214\270\\\026\012\013"
 175      5896B8FE 
 175      8CB85C16 
 175      0A0B
 176 097a 6C7F7874 		.ascii	"l\177xt\213\316\002s\244\005\222\014\233\276\310I\310"
 176      8BCE0273 
 176      A405920C 
 176      9BBEC849 
 176      C8
 177 098b F46866E9 		.ascii	"\364hf\3511\231\032\"\346E\235\007\204\012\177ve^\377"
 177      31991A22 
 177      E6459D07 
 177      840A7F76 
 177      655EFF
 178 099e B42F9FFE 		.ascii	"\264/\237\376\2037G3yw\264\271Ts\264\024\316\011\023"
 178      83374733 
 178      7977B4B9 
 178      5473B414 
 178      CE0913
 179 09b1 A6A8F073 		.ascii	"\246\250\360s\301\315Kl\311\217\227b\367\007\011\177"
 179      C1CD4B6C 
 179      C98F9762 
 179      F707097F 
 180 09c1 4A1457E5 		.ascii	"J\024W\345\352\371\233\211G\232O\2444\363\014\322\274"
 180      EAF99B89 
 180      479A4FA4 
 180      34F30CD2 
 180      BC
 181 09d2 CC492C5E 		.ascii	"\314I,^\233\236-n\302ad>\345q\362E\276\220\346\025o"
 181      9B9E2D6E 
 181      C261643E 
 181      E571F245 
 181      BE90E615 
 182 09e7 EC9ABDB3 		.ascii	"\354\232\275\263\273@\262\273Pl\345\022[\275\212\273"
 182      BB40B2BB 
 182      506CE512 
 182      5BBD8ABB 
 183 09f7 BD02439F 		.ascii	"\275\002C\237'\026\024\256\024\304\377\310\324\301&"
 183      271614AE 
 183      14C4FFC8 
 183      D4C126
 184 0a06 59AEC322 		.ascii	"Y\256\303\"\000\036\223\330 \250\363\\\\\326\372\321"
ARM GAS  e:\temp\ccq07yyZ.s 			page 14


 184      001E93D8 
 184      20A8F35C 
 184      5CD6FAD1 
 185 0a16 020955CC 		.ascii	"\002\011U\314\365\031\006\021\305\246\317\307\335^\377"
 185      F5190611 
 185      C5A6CFC7 
 185      DD5EFF
 186 0a25 A236ED51 		.ascii	"\2426\355Qw\270\242=/\224\035[*\366x\015\216\325\272"
 186      77B8A23D 
 186      2F941D5B 
 186      2AF6780D 
 186      8ED5BA
 187 0a38 84127FAE 		.ascii	"\204\022\177\256\245\022'\327R\336\206=i\252GK\213\244"
 187      A51227D7 
 187      52DE863D 
 187      69AA474B 
 187      8BA4
 188 0a4a 96161BB4 		.ascii	"\226\026\033\2644\216\223\250\370\314\225g\347Z\252"
 188      348E93A8 
 188      F8CC9567 
 188      E75AAA
 189 0a59 AFABAF0F 		.ascii	"\257\253\257\017\"\237\322\206\231\276Q\202K($\364q"
 189      229FD286 
 189      99BE5182 
 189      4B2824F4 
 189      71
 190 0a6a 98D0779F 		.ascii	"\230\320w\237\032\240\011\012\017\2465g\347\331\370"
 190      1AA0090A 
 190      0FA63567 
 190      E7D9F8
 191 0a79 E5D0465C 		.ascii	"\345\320F\\\020+\014eO\213'R~G\360\"\026m!L\332\260"
 191      102B0C65 
 191      4F8B2752 
 191      7E47F022 
 191      166D214C 
 192 0a8f 94D4DD14 		.ascii	"\224\324\335\024\220\303\313\227\255S\241\021Z\236z"
 192      90C3CB97 
 192      AD53A111 
 192      5A9E7A
 193 0a9e 875692DE 		.ascii	"\207V\222\336,'\204a(\206\327\262\031\326\013\205\000"
 193      2C278461 
 193      2886D7B2 
 193      19D60B85 
 193      00
 194 0aaf ECA49C6B 		.ascii	"\354\244\234k\253\342\213P\365uQ\310\375I\237\371Zx"
 194      ABE28B50 
 194      F57551C8 
 194      FD499FF9 
 194      5A78
 195 0ac1 C97C2D92 		.ascii	"\311|-\222T\213\267'!\033\371\234Y\3703\260\006I\025"
 195      548BB727 
 195      211BF99C 
 195      59F833B0 
 195      064915
 196 0ad4 0EE9126A 		.ascii	"\016\351\022j\376\263\017~\262T\372\3112\241\354\345"
 196      FEB30F7E 
 196      B254FAC9 
ARM GAS  e:\temp\ccq07yyZ.s 			page 15


 196      32A1ECE5 
 197 0ae4 42D97F61 		.ascii	"B\331\177a\3341Z\334\323\253\213*\305\360_\031\225\317"
 197      DC315ADC 
 197      D3AB8B2A 
 197      C5F05F19 
 197      95CF
 198 0af6 366E48B7 		.ascii	"6nH\267q\033\346\011O\277^\362\311\356 \217\312\227"
 198      711BE609 
 198      4FBF5EF2 
 198      C9EE208F 
 198      CA97
 199 0b08 4B95AFE0 		.ascii	"K\225\257\340dc+g\337-:-h\274\301\310p\327>\255\231"
 199      64632B67 
 199      DF2D3A2D 
 199      68BCC1C8 
 199      70D73EAD 
 200 0b1d EC0B77EA 		.ascii	"\354\013w\352|n2&\340%xp\013d,\210\204\263\022\315\366"
 200      7C6E3226 
 200      E0257870 
 200      0B642C88 
 200      84B312CD 
 201 0b32 064FB30F 		.ascii	"\006O\263\017\342\2038\225\277\373 \346*)\346jC8\214"
 201      E2833895 
 201      BFFB20E6 
 201      2A29E66A 
 201      43388C
 202 0b45 E784E4E3 		.ascii	"\347\204\344\343@sv\305\371\2026U94\276\313\227r\227"
 202      407376C5 
 202      F9823655 
 202      3934BECB 
 202      977297
 203 0b58 35C8F178 		.ascii	"5\310\361x\334(\361r\221v\"\275\311\356@\360f\225\233"
 203      DC28F172 
 203      917622BD 
 203      C9EE40F0 
 203      66959B
 204 0b6b 71CECC9D 		.ascii	"q\316\314\235\015\277\003\220\265\350p\272\300{\023"
 204      0DBF0390 
 204      B5E870BA 
 204      C07B13
 205 0b7a 9DADB3B2 		.ascii	"\235\255\263\262\240\003\321\0354\026\205w\020E\034"
 205      A003D11D 
 205      34168577 
 205      10451C
 206 0b89 76D58234 		.ascii	"v\325\2024\361\\\253\331\316!\035\031x\263\323\303\240"
 206      F15CABD9 
 206      CE211D19 
 206      78B3D3C3 
 206      A0
 207 0b9a 4A98EB0D 		.ascii	"J\230\353\015=K'\360\301.\"\013\326$?>\276H,\235\320"
 207      3D4B27F0 
 207      C12E220B 
 207      D6243F3E 
 207      BE482C9D 
 208 0baf 54DE5D67 		.ascii	"T\336]g\210\301\2678\276<\226\314\354XZ\257\345\335"
 208      88C1B738 
 208      BE3C96CC 
ARM GAS  e:\temp\ccq07yyZ.s 			page 16


 208      EC585AAF 
 208      E5DD
 209 0bc1 2FC505E2 		.ascii	"/\305\005\342-]\"\210\340'o\254+3\177\235\360\372\267"
 209      2D5D2288 
 209      E0276FAC 
 209      2B337F9D 
 209      F0FAB7
 210 0bd4 7D70F30D 		.ascii	"}p\363\015\322\3157\032\334\374\037>X\346+i\231M\006"
 210      D2CD371A 
 210      DCFC1F3E 
 210      58E62B69 
 210      994D06
 211 0be7 379FC8D8 		.ascii	"7\237\310\330a\264\270\233W\265\347\203\223\232\362"
 211      61B4B89B 
 211      57B5E783 
 211      939AF2
 212 0bf6 E834E9D1 		.ascii	"\3504\351\321U\3558z\014[\301\375\271\310\253?\237\021"
 212      55ED387A 
 212      0C5BC1FD 
 212      B9C8AB3F 
 212      9F11
 213 0c08 FE3C51F8 		.ascii	"\376<Q\370\363f\364\216\030\356\317\371\371B+\377\364"
 213      F366F48E 
 213      18EECFF9 
 213      F9422BFF 
 213      F4
 214 0c19 419EAFA5 		.ascii	"A\236\257\245<\351\006\177\236\314\010=\265\003o\221"
 214      3CE9067F 
 214      9ECC083D 
 214      B5036F91 
 215 0c29 643390C5 		.ascii	"d3\220\305\311\234\305\202\004\021r\357\372@+S\322\332"
 215      C99CC582 
 215      041172EF 
 215      FA402B53 
 215      D2DA
 216 0c3b 6A30DCBF 		.ascii	"j0\334\277}8v\263$\225m\242\276+\222\365\335\273\214"
 216      7D3876B3 
 216      24956DA2 
 216      BE2B92F5 
 216      DDBB8C
 217 0c4e 9470B248 		.ascii	"\224p\262Hq\332\260rx\211V\336\325\026\236;Cx\226\272"
 217      71DAB072 
 217      788956DE 
 217      D5169E3B 
 217      437896BA 
 218 0c62 294E9AF4 		.ascii	")N\232\364u\251\253\002uO\327\322\246\333\241\276[O"
 218      75A9AB02 
 218      754FD7D2 
 218      A6DBA1BE 
 218      5B4F
 219 0c74 798EEF0A 		.ascii	"y\216\357\012\325\212.\354\254\374Nyf\211v\311\231W"
 219      D58A2EEC 
 219      ACFC4E79 
 219      668976C9 
 219      9957
 220 0c86 BED62DCE 		.ascii	"\276\326-\316\260<Q\267d]\331|M\347-;$\345\235\024+"
 220      B03C51B7 
ARM GAS  e:\temp\ccq07yyZ.s 			page 17


 220      645DD97C 
 220      4DE72D3B 
 220      24E59D14 
 221 0c9b E0DAF48B 		.ascii	"\340\332\364\213\025\342d\277\023F\262)^'\255,*;35\233"
 221      15E264BF 
 221      1346B229 
 221      5E27AD2C 
 221      2A3B3335 
 222 0cb0 BBE06111 		.ascii	"\273\340a\021\221\233\345fu\2339\022\002\265\233,\231"
 222      919BE566 
 222      759B3912 
 222      02B59B2C 
 222      99
 223 0cc1 CA2E8892 		.ascii	"\312.\210\222iJS\267\271]\2068\235\312\360=\3277\255"
 223      694A53B7 
 223      B95D8638 
 223      9DCAF03D 
 223      D737AD
 224 0cd4 209AAA0B 		.ascii	" \232\252\013\314(\255\300\317\270r\346\027\257o9\324"
 224      CC28ADC0 
 224      CFB872E6 
 224      17AF6F39 
 224      D4
 225 0ce5 737D6385 		.ascii	"s}c\205\317\305\207\202\340{l\321\221\271\251n*\012"
 225      CFC58782 
 225      E07B6CD1 
 225      91B9A96E 
 225      2A0A
 226 0cf7 9F78AE8E 		.ascii	"\237x\256\216\003\373r\326Z<tr\245:v\033\330\234\306"
 226      03FB72D6 
 226      5A3C7472 
 226      A53A761B 
 226      D89CC6
 227 0d0a 4868954E 		.ascii	"Hh\225NMr\361E\255\240z\277)\"{\014D\246s\374\272\325"
 227      4D72F145 
 227      ADA07ABF 
 227      29227B0C 
 227      44A673FC 
 228 0d20 E7EB442D 		.ascii	"\347\353D-\350tR\262W\313J\033\322\263\305\323\323t"
 228      E87452B2 
 228      57CB4A1B 
 228      D2B3C5D3 
 228      D374
 229 0d32 297E05ED 		.ascii	")~\005\355\016y\311M\243\271\026d\374\314\210S\375\030"
 229      0E79C94D 
 229      A3B91664 
 229      FCCC8853 
 229      FD18
 230 0d44 5B3C9C47 		.ascii	"[<\234G\360\261\377xsX\253w\207\315\223\016\273Op\251"
 230      F0B1FF78 
 230      7358AB77 
 230      87CD930E 
 230      BB4F70A9 
 231 0d58 89F40123 		.ascii	"\211\364\001#\304\3507\035\230\215P\335/\251\036\300"
 231      C4E8371D 
 231      988D50DD 
 231      2FA91EC0 
ARM GAS  e:\temp\ccq07yyZ.s 			page 18


 232 0d68 C0FC8007 		.ascii	"\300\374\200\007f\331\031\221;>\364\201\326AI+\277A"
 232      66D91991 
 232      3B3EF481 
 232      D641492B 
 232      BF41
 233 0d7a 607A2361 		.ascii	"`z#a\363N\242@\2228\204\354|\310\331\371a\211`\347\277"
 233      F34EA240 
 233      923884EC 
 233      7CC8D9F9 
 233      618960E7 
 234 0d8f 3E5CB70F 		.ascii	">\\\267\017S\355\272\375-mx\253\377\210\023z\220\266"
 234      53EDBAFD 
 234      2D6D78AB 
 234      FF88137A 
 234      90B6
 235 0da1 2985F25B 		.ascii	")\205\362[\375\002\0239\322djk\342\235\\nS\210,\177"
 235      FD021339 
 235      D2646A6B 
 235      E29D5C6E 
 235      53882C7F 
 236 0db5 243CEED2 		.ascii	"$<\356\322\377\361\315>f\213\352]\363\363\205#\307\013"
 236      FFF1CD3E 
 236      668BEA5D 
 236      F3F38523 
 236      C70B
 237 0dc7 4776BAD3 		.ascii	"Gv\272\323\353t\025\3741\351\203E\006fgr\022?\334\335"
 237      EB7415FC 
 237      31E98345 
 237      06666772 
 237      123FDCDD 
 238 0ddb 9C62D57C 		.ascii	"\234b\325|\320D\216\033\270m\224\334\011dj&2\345\340"
 238      D0448E1B 
 238      B86D94DC 
 238      09646A26 
 238      32E5E0
 239 0dee 146791A6 		.ascii	"\024g\221\246\026\2344\304@,\021+b\217e\024\004\212"
 239      169C34C4 
 239      402C112B 
 239      628F6514 
 239      048A
 240 0e00 EAB8FE67 		.ascii	"\352\270\376gV\\|\367ky8\205<\304\022\254}\263\317\366"
 240      565C7CF7 
 240      6B793885 
 240      3CC412AC 
 240      7DB3CFF6 
 241 0e14 6858FC56 		.ascii	"hX\374V\022?\370\266\021\265<\373F\000\204Qw\310!=d"
 241      123FF8B6 
 241      11B53CFB 
 241      46008451 
 241      77C8213D 
 242 0e29 3971F9B2 		.ascii	"9q\371\262VN\304\003\027\271\337Ug\213\344\233\"R\344"
 242      564EC403 
 242      17B9DF55 
 242      678BE49B 
 242      2252E4
 243 0e3c F10B99B9 		.ascii	"\361\013\231\271\272p>-\367=c\020%\201\000\021\317\273"
 243      BA703E2D 
ARM GAS  e:\temp\ccq07yyZ.s 			page 19


 243      F73D6310 
 243      25810011 
 243      CFBB
 244 0e4e AA565524 		.ascii	"\252VU$\020]\366\352\313\302\227@\243\247\262:\200\337"
 244      105DF6EA 
 244      CBC29740 
 244      A3A7B23A 
 244      80DF
 245 0e60 EBEAEE8B 		.ascii	"\353\352\356\213cj\316\223O\223\215\207C\261\364\345"
 245      636ACE93 
 245      4F938D87 
 245      43B1F4E5 
 246 0e70 B386732A 		.ascii	"\263\206s*\311+\231F\036\"\316I2\337\313\203*\235j\374"
 246      C92B9946 
 246      1E22CE49 
 246      32DFCB83 
 246      2A9D6AFC 
 247 0e84 0031C178 		.ascii	"\0001\301x/\345\264?\277\206\037,\033\314\347\223}\331"
 247      2FE5B43F 
 247      BF861F2C 
 247      1BCCE793 
 247      7DD9
 248 0e96 E8BCDCE8 		.ascii	"\350\274\334\350\202\341\350\237K\004\251K\207\277J"
 248      82E1E89F 
 248      4B04A94B 
 248      87BF4A
 249 0ea5 53351780 		.ascii	"S5\027\200\372\362\242p\201R\355*\231\342\213\206.\311"
 249      FAF2A270 
 249      8152ED2A 
 249      99E28B86 
 249      2EC9
 250 0eb7 1D2F0BD1 		.ascii	"\035/\013\321\316\307\355\241\236=S4\321z+\005*?\205"
 250      CEC7EDA1 
 250      9E3D5334 
 250      D17A2B05 
 250      2A3F85
 251 0eca F35DDAA3 		.ascii	"\363]\332\243T\326\315k\031v\361\332-\034ag\366\336"
 251      54D6CD6B 
 251      1976F1DA 
 251      2D1C6167 
 251      F6DE
 252 0edc C7BA5AF3 		.ascii	"\307\272Z\363\212t\204\022~V\356\270\233\266C\234\225"
 252      8A748412 
 252      7E56EEB8 
 252      9BB6439C 
 252      95
 253 0eed 790A29E5 		.ascii	"y\012)\345\274W-(\260\010\222\215\276\322\\\205C\252"
 253      BC572D28 
 253      B008928D 
 253      BED25C85 
 253      43AA
 254 0eff 549CE27D 		.ascii	"T\234\342}\270\236\331m\253\260X\350y\376\223R\263\302"
 254      B89ED96D 
 254      ABB058E8 
 254      79FE9352 
 254      B3C2
 255 0f11 D3EEBDF0 		.ascii	"\323\356\275\360\274&\013\317\353\006\277X\340\213\362"
ARM GAS  e:\temp\ccq07yyZ.s 			page 20


 255      BC260BCF 
 255      EB06BF58 
 255      E08BF2
 256 0f20 6E48E595 		.ascii	"nH\345\225\031*\317\205\0048\002r\372\250_D\032T\217"
 256      192ACF85 
 256      04380272 
 256      FAA85F44 
 256      1A548F
 257 0f33 040BC785 		.ascii	"\004\013\307\205DT\216?\310\332\263V<\341,&\260\206"
 257      44548E3F 
 257      C8DAB356 
 257      3CE12C26 
 257      B086
 258 0f45 5B779450 		.ascii	"[w\224P\320\267\013\353\362\265\373\231\310c\231q9\213"
 258      D0B70BEB 
 258      F2B5FB99 
 258      C8639971 
 258      398B
 259 0f57 AD5A3D8A 		.ascii	"\255Z=\212?\230\010 7\245\342~\304\310_\314\311d\036"
 259      3F980820 
 259      37A5E27E 
 259      C4C85FCC 
 259      C9641E
 260 0f6a AB1671B4 		.ascii	"\253\026q\264\304\027AoIAo\033\374\322E\200\324/\027"
 260      C417416F 
 260      49416F1B 
 260      FCD24580 
 260      D42F17
 261 0f7d A58D102E 		.ascii	"\245\215\020.\227\204\357 \233.\202\366\035\243T\004"
 261      9784EF20 
 261      9B2E82F6 
 261      1DA35404 
 262 0f8d 10FEA674 		.ascii	"\020\376\246t\271FX&\2214U6\3345\344\231\331\004V"
 262      B9465826 
 262      91345536 
 262      DC35E499 
 262      D90456
 263 0fa0 60F58179 		.ascii	"`\365\201yf\023\325\306u\317\034\375\264\207\303\214"
 263      6613D5C6 
 263      75CF1CFD 
 263      B487C38C 
 264 0fb0 4BC55A95 		.ascii	"K\305Z\225\324\250\003\337\323?\023\366\027+Y\271T\256"
 264      D4A803DF 
 264      D33F13F6 
 264      172B59B9 
 264      54AE
 265 0fc2 E5C654D2 		.ascii	"\345\306T\322T\"\25400\270\224\300\012\364\350\006\211"
 265      5422AC30 
 265      30B894C0 
 265      0AF4E806 
 265      89
 266 0fd3 70A93E11 		.ascii	"p\251>\021\016P\264_6\224\025\213\343w\231/vsK\365V"
 266      0E50B45F 
 266      3694158B 
 266      E377992F 
 266      76734BF5 
 267 0fe8 3E6D39F0 		.ascii	">m9\360\223$Q\205\026Z\306\217\220\025\027\014G\010"
ARM GAS  e:\temp\ccq07yyZ.s 			page 21


 267      93245185 
 267      165AC68F 
 267      9015170C 
 267      4708
 268 0ffa E376A0E1 		.ascii	"\343v\240\341\355\324"
 268      EDD4
 269 1000 C625ABDF 		.ascii	"\306%\253\337\036\315Y\267y\256\2616V\012w`\324\254"
 269      1ECD59B7 
 269      79AEB136 
 269      560A7760 
 269      D4AC
 270 1012 5DB13A8E 		.ascii	"]\261:\216.\314\271\001\325q?(\230\373\343\320\200\353"
 270      2ECCB901 
 270      D5713F28 
 270      98FBE3D0 
 270      80EB
 271 1024 DF43A93C 		.ascii	"\337C\251<\010\276P\361\323\374\356\3378\231\025\244"
 271      08BE50F1 
 271      D3FCEEDF 
 271      389915A4 
 272 1034 A967A0FB 		.ascii	"\251g\240\373\006=\257$\260\342\327?#U\243\224+\371"
 272      063DAF24 
 272      B0E2D73F 
 272      2355A394 
 272      2BF9
 273 1046 B7A613D5 		.ascii	"\267\246\023\325Z^\332Xz\242X<\000\036\026\251\356r"
 273      5A5EDA58 
 273      7AA2583C 
 273      001E16A9 
 273      EE72
 274 1058 CEEAAF75 		.ascii	"\316\352\257u$\036H\022\017\251\370u\012\246\266\007"
 274      241E4812 
 274      0FA9F875 
 274      0AA6B607 
 275 1068 BF98DA1E 		.ascii	"\277\230\332\036\351\360]\231\265\211\"\372\277\364"
 275      E9F05D99 
 275      B58922FA 
 275      BFF4
 276 1076 FA21D0E1 		.ascii	"\372!\320\341\375\005\267F\276\340\376lP\300\032\"H"
 276      FD05B746 
 276      BEE0FE6C 
 276      50C01A22 
 276      48
 277 1087 C98F3F56 		.ascii	"\311\217?V\302\356,\324\360\244\273\206\350\336t\007"
 277      C2EE2CD4 
 277      F0A4BB86 
 277      E8DE7407 
 278 1097 2B3566EE 		.ascii	"+5f\356w\217\327\213\367\324\015\276|\226\254\223\334"
 278      778FD78B 
 278      F7D40DBE 
 278      7C96AC93 
 278      DC
 279 10a8 3C3670B3 		.ascii	"<6p\263\221\000)\317\213\362\275\035\223\265\011\335"
 279      910029CF 
 279      8BF2BD1D 
 279      93B509DD 
 280 10b8 77C921CA 		.ascii	"w\311!\312I\225\325\357C56J{q\244M\276|\227\254\227"
ARM GAS  e:\temp\ccq07yyZ.s 			page 22


 280      4995D5EF 
 280      4335364A 
 280      7B71A44D 
 280      BE7C97AC 
 281 10cd 55A1536D 		.ascii	"U\241SmX\317\2451&\374\201\332SU\233\263T\215n\254\012"
 281      58CFA531 
 281      26FC81DA 
 281      53559BB3 
 281      548D6EAC 
 282 10e2 BE92C67D 		.ascii	"\276\222\306}%\243>\321\327\2175\254(\324>\020\250x"
 282      25A33ED1 
 282      D78F35AC 
 282      28D43E10 
 282      A878
 283 10f4 3AA6DF48 		.ascii	":\246\337H\335d\342\337RJ\024\346%X\232\371\263\211"
 283      DD64E2DF 
 283      524A14E6 
 283      25589AF9 
 283      B389
 284 1106 B4EDEB76 		.ascii	"\264\355\353v\021^'\333I\242\03228\367\312\027*\\\213"
 284      115E27DB 
 284      49A21A32 
 284      38F7CA17 
 284      2A5C8B
 285 1119 2A4ED489 		.ascii	"*N\324\211\257b\0162[\015\031\002\326\033&\324V\223"
 285      AF620E32 
 285      5B0D1902 
 285      D61B26D4 
 285      5693
 286 112b 5CF0681A 		.ascii	"\\\360h\032\227x-P?\235\360M\251\360\341\353\342\322"
 286      97782D50 
 286      3F9DF04D 
 286      A9F0E1EB 
 286      E2D2
 287 113d EC5EB976 		.ascii	"\354^\271v\246\356eH\225/\362jC\263\255#\202\206\374"
 287      A6EE6548 
 287      952FF26A 
 287      43B3AD23 
 287      8286FC
 288 1150 F1939984 		.ascii	"\361\223\231\204\223d\225[Q\325\220tW\260\341\334\204"
 288      9364955B 
 288      51D59074 
 288      57B0E1DC 
 288      84
 289 1161 2334136A 		.ascii	"#4\023jZn\364\232>\027\225\031\000\022\0070\274\273"
 289      5A6EF49A 
 289      3E179519 
 289      00120730 
 289      BCBB
 290 1173 F1374AC4 		.ascii	"\3617J\304g\370\266$E\015\031\246@\362\035\016\362\215"
 290      67F8B624 
 290      450D19A6 
 290      40F21D0E 
 290      F28D
 291 1185 141FFA5D 		.ascii	"\024\037\372]\231\305g\305\326\333}\361\316O\244\332"
 291      99C567C5 
 291      D6DB7DF1 
ARM GAS  e:\temp\ccq07yyZ.s 			page 23


 291      CE4FA4DA 
 292 1195 E719C4DC 		.ascii	"\347\031\304\334A\004)\371#\000+\011&\363\205\230q\323"
 292      410429F9 
 292      23002B09 
 292      26F38598 
 292      71D3
 293 11a7 342C5DA8 		.ascii	"4,]\250\214RV\004\341\357\360\036\375t\030e|\362\235"
 293      8C525604 
 293      E1EFF01E 
 293      FD741865 
 293      7CF29D
 294 11ba D7524F19 		.ascii	"\327RO\031'd\201:S\376Bo4\376\220\342\026\324\342\325"
 294      2764813A 
 294      53FE426F 
 294      34FE90E2 
 294      16D4E2D5 
 295 11ce 365CC5B5 		.ascii	"6\\\305\265F`\234\371]\367\027b\246\304L{{z\314\244"
 295      46609CF9 
 295      5DF71762 
 295      A6C44C7B 
 295      7B7ACCA4 
 296 11e2 09E3A6CE 		.ascii	"\011\343\246\316\23061f\374\253\343\246>7`\374\330~"
 296      98363166 
 296      FCABE3A6 
 296      3E3760FC 
 296      D87E
 297 11f4 CF4D7869 		.ascii	"\317Mxi\334\353\257M\200\306\330\227_\3575Q\361\213"
 297      DCEBAF4D 
 297      80C6D897 
 297      5FEF3551 
 297      F18B
 298 1206 9932E9F5 		.ascii	"\2312\351\365ioOy\377\235\230i\366I\377z\347\235\347"
 298      696F4F79 
 298      FF9D9869 
 298      F649FF7A 
 298      E79DE7
 299 1219 A6CE9832 		.ascii	"\246\316\2302\375\377\001Y\010$\242"
 299      FDFF0159 
 299      0824A2
 300              		.text
 301              		.section	.gnu.lto_.symbol_nodes.6240ad3d,"",%progbits
 302 0000 789C1DCC 		.ascii	"x\234\035\314\313\015@@\030E\341\363\317\203\031\024"
 302      CB0D4040 
 302      1845E1F3 
 302      CF831914 
 303 0010 4117BA33 		.ascii	"A\027\2723%H\264\240\012EH\254\324`\245\005\343\336"
 303      2548B4A0 
 303      0A4548AC 
 303      D460A505 
 303      E3DE
 304 0022 CD979CC5 		.ascii	"\315\227\234\305\015\030\205:\307\002\353\311\317Q&"
 304      0D18853A 
 304      C702EBC9 
 304      CF5126
 305 0031 88C6587B 		.ascii	"\210\306X{t&\274\023\301\213\030D\023E\333\210\324\212"
 305      7426BC13 
 305      C18B1844 
ARM GAS  e:\temp\ccq07yyZ.s 			page 24


 305      1345DB88 
 305      D48A
 306 0043 9C449745 		.ascii	"\234D\227E\337\375\330\260\230\336\241\224\032<\003"
 306      DFFDD8B0 
 306      98DEA194 
 306      1A3C03
 307 0052 FB7BCD01 		.ascii	"\373{\315\001\266\3476\370\000\011\225\016]"
 307      B6E736F8 
 307      0009950E 
 307      5D
 308              		.text
 309              		.section	.gnu.lto_.refs.6240ad3d,"",%progbits
 310 0000 789C0D8D 		.ascii	"x\234\015\215=K\202\001\024\205\237s\357\353\233\346"
 310      3D4B8201 
 310      14859F73 
 310      EFEB9BE6 
 311 0010 106ED1D2 		.ascii	"\020n\321\322\020\011n\016\221\322\342o\313\376\202"
 311      10096E0E 
 311      91D2E26F 
 311      CBFE82
 312 001f F4417B11 		.ascii	"\364A{\021\015\272D\243EP\021\010\205\021\350\017\260"
 312      0DBA44A3 
 312      45501108 
 312      8511E80F 
 312      B0
 313 0030 25DC75B1 		.ascii	"%\334u\2613<\234\373\3009\334\0021\007N@A\324\310\035"
 313      333C9CFB 
 313      C039DC02 
 313      31074E40 
 313      41D4C81D 
 314 0044 6583DC55 		.ascii	"e\203\334U\356\021\373\344\201\362P\321$ZD\233<R\036"
 314      EE11FBE4 
 314      81F250D1 
 314      245A449B 
 314      3C521E
 315 0057 2B3A4497 		.ascii	"+:D\227\354)\237!^\274|5oP\274\333'\346\023*?P\316`"
 315      EC299F21 
 315      5EBC7C35 
 315      6F50BCDB 
 315      27E6132A 
 316 006f 6BE1FC35 		.ascii	"k\341\3745\177\250\\\332W\276\327fc?\025e_T\316Du U"
 316      7FA85CDA 
 316      57BED766 
 316      633F1565 
 316      5F54CE44 
 317 0086 CF9D1752 		.ascii	"\317\235\027R\355R\344\225\224\327\366\033Q\334\232"
 317      ED52E495 
 317      94D7F61B 
 317      51DC9A
 318 0095 3BDFF762 		.ascii	";\337\367b{\350\034\231\007\367\037\235c\367\237D\375"
 318      7BE81C99 
 318      07F71F9D 
 318      63F79F44 
 318      FD
 319 00a6 43FEEDDD 		.ascii	"C\376\355\335\227wS)\276\355s\361\0175\033#Q"
 319      97775329 
 319      BEED73F1 
ARM GAS  e:\temp\ccq07yyZ.s 			page 25


 319      0F351B23 
 319      51
 320              		.text
 321              		.section	.gnu.lto_.decls.6240ad3d,"",%progbits
 322 0000 789CAD54 		.ascii	"x\234\255TYLTW\030\276\377=\003\016\303f\254\0131$\245"
 322      594C5457 
 322      18BEFF3D 
 322      030EC366 
 322      AC0B3124 
 323 0015 26026913 		.ascii	"&\002i\023Z\3244}\361E\022\225\207\032\003\324\276\230"
 323      5AD4347D 
 323      F1451295 
 323      871A03D4 
 323      BE98
 324 0027 1865AED6 		.ascii	"\030e\256\326T\301\314\014i\355\323\221\245B\307\270"
 324      54C1CC0C 
 324      69EDD391 
 324      A542C7B8 
 325 0037 50A94234 		.ascii	"P\251B4\321\352\214\243\"Pq\303\005\306\005\306\005"
 325      D1EA8CA3 
 325      225071C3 
 325      05C605C6 
 325      05
 326 0048 51407664 		.ascii	"Q@vd\221\305\210\250hI\025\265N\377s\316\235\2713\035"
 326      91C588A8 
 326      684915B5 
 326      4EFF73CE 
 326      9DB9331D 
 327 005c 4D79E8CD 		.ascii	"My\350\315|\367\236\345\377\277\377\373\316\375\357"
 327      7CF79EE5 
 327      FFBFFFFB 
 327      CEFDEF
 328 006b E82490D8 		.ascii	"\350$\220\3305\246\227\244\0278|\213c7^2>WH\332\305"
 328      35A697A4 
 328      17387C8B 
 328      63375E32 
 328      3E5748DA 
 329 0080 E62710E5 		.ascii	"\346'\020\345\210P\304YD\015\302\205\270\203hD4#Z\021"
 329      8850C459 
 329      440DC285 
 329      B8836844 
 329      34235A11 
 330 0094 ED884E44 		.ascii	"\355\210ND7\242G\362\277\030\307t\225{\232:\256G\304"
 330      37A247F2 
 330      BF18C774 
 330      957B9A3A 
 330      AE47C4
 331 00a7 22E21095 		.ascii	"\"\342\020\225\210hD\013\242\027q\032Q\212\030@<@T#"
 331      8868440B 
 331      A217711A 
 331      518A1840 
 331      3C405423 
 332 00bb 06117588 		.ascii	"\006\021u\210!D\003b\370\177\326\370\267\014\356\375"
 332      21440362 
 332      F87FD6F8 
 332      B70CEEFD 
 333 00cb 658E902E 		.ascii	"e\216\220.\350\000\031\324\003\222\000\304\0358$\001"
ARM GAS  e:\temp\ccq07yyZ.s 			page 26


 333      E80019D4 
 333      039200C4 
 333      1D382401 
 334 00db 3EC581CC 		.ascii	">\305\201\314\357\222w\311\373\220\330]\022\361|M#\343"
 334      EF9277C9 
 334      FB90D85D 
 334      12F17C4D 
 334      23E3
 335 00ed 3FCFD3ED 		.ascii	"?\317\323\355\2718\211\306\016j\022x\025\210,\261/\253"
 335      B93889C6 
 335      0E6A1278 
 335      15882CB1 
 335      2FAB
 336 00ff 61922097 		.ascii	"a\222 \227\265\004\037>!\327G\023\370{\002\217\351w"
 336      B5041F3E 
 336      21D74713 
 336      F87B028F 
 336      E977
 337 0111 07ED05E1 		.ascii	"\007\355\005\341\0049q\334;\341X\234PJ\361\332I\251"
 337      043971DC 
 337      3BE1589C 
 337      504AF1DA 
 337      49A9
 338 0123 FC997632 		.ascii	"\374\231v2\265\356\227\316\310q\031\246\031@\306i\323"
 338      B5EE97CE 
 338      C87119A6 
 338      1940C669 
 338      D3
 339 0134 58FDFE50 		.ascii	"X\375\376P\234N7\300T\234>\256.v\207G\375\306\362h\016"
 339      9C4E37C0 
 339      549C3EAE 
 339      2E768747 
 339      FDC6F268 
 340 0149 8D9161C5 		.ascii	"\215\221a\305L8\016\321p\014\360\245B)D\341}\215N0\215"
 340      4C380ED1 
 340      700CF0A5 
 340      422944E1 
 340      7D8D4E30 
 341 015e 3A2E5719 		.ascii	":.W\031\346\034\240\007*h\337\304\333\220b\352\314\306"
 341      E61CA007 
 341      2A68DFC4 
 341      DB9062EA 
 341      CCC6
 342 0170 2C994581 		.ascii	",\231E\201\003\010\034\205\004\246\016\207\354q\004"
 342      03081C85 
 342      04A60E87 
 342      EC7104
 343 017f BA50F609 		.ascii	"\272P\366\011\230\203\231\216\361wO\201,\341B\017\323"
 343      9883998E 
 343      F1774F81 
 343      2CE1420F 
 343      D3
 344 0190 DA330459 		.ascii	"\3323\004Y\372(\355\333\345Z\326\177\222\346\006q\212"
 344      FA28EDDB 
 344      E55AD67F 
 344      92E60671 
 344      8A
ARM GAS  e:\temp\ccq07yyZ.s 			page 27


 345 01a1 328DA28C 		.ascii	"2\215\242\214S\340\240\234\247o\253=g\013&V\340\371"
 345      53E0A09C 
 345      A76FAB3D 
 345      670B2656 
 345      E0F9
 346 01b3 8DB915FB 		.ascii	"\215\271\025\373\210\360\243\303\351\363\333%\003\021"
 346      88F0A3C3 
 346      E9F3DB25 
 346      0311
 347 01c1 C24F0C4E 		.ascii	"\302O\014N\013\213r\216L\011\373\205\322l\2723\207N"
 347      0B8B728E 
 347      4C09FB85 
 347      D26CBA33 
 347      874E
 348 01d3 5BCA994F 		.ascii	"[\312\231O\242\241?\270\241J\010Sk`\354\223\241\274"
 348      A2A13FB8 
 348      A14A0853 
 348      6B60EC93 
 348      A1BC
 349 01e5 CA5062E7 		.ascii	"\312Pb\347\264\362\265\252GE\021\020\026\377\201T8\003"
 349      B4F2B5AA 
 349      47451110 
 349      16FF8154 
 349      3803
 350 01f7 F13ED976 		.ascii	"\361>\331vv^}mVcI'\2451p\0327Ni\3621NT\310\247\207^"
 350      765E7D6D 
 350      56634927 
 350      A531701A 
 350      374E69F2 
 351 0212 EAE61EA2 		.ascii	"\352\346\036\242\007\262i_W\303\302*\364Z\240\347\321"
 351      07B2695F 
 351      57C3C22A 
 351      F45AA0E7 
 351      D1
 352 0223 1522DA47 		.ascii	"\025\"\332GZ\005\363\014ga.\346u\237\177c\327\223\267"
 352      5A05F30C 
 352      67612EE6 
 352      759F7F63 
 352      D793B7
 353 0236 C27079DE 		.ascii	"\302py\336\340Q=:\2146\200\033\330|\264j\"\\\314\331"
 353      E0513D3A 
 353      8C36801B 
 353      D87CB46A 
 353      225CCCD9 
 354 024a 76F1AE81 		.ascii	"v\361\256\201w\241\304\312\273@n\0368\376H\007\361\006"
 354      77A1C4CA 
 354      BB406E1E 
 354      38FE4807 
 354      F106
 355 025c A1AFD5BA 		.ascii	"\241\257\325\272v+\245\000\227\300\000\0274y\321\006"
 355      762BA500 
 355      97C00017 
 355      3479D106 
 356 026c BCE7339F 		.ascii	"\274\3473\237c\277\323\340(\011\346G\303\027h\361\""
 356      63BFD3E0 
 356      2809E647 
 356      C31768F1 
ARM GAS  e:\temp\ccq07yyZ.s 			page 28


 356      22
 357 027d 5A445216 		.ascii	"ZDR\026\005\347QW\025\352\302\002\343\271\177\266\006"
 357      05E75157 
 357      15EAC202 
 357      E3B97FB6 
 357      06
 358 028e 1BF2597F 		.ascii	"\033\362Y\177L*\376\330\310\260;\004M\037\316\301\027"
 358      4C2AFED8 
 358      C8B03B04 
 358      4D1FCEC1 
 358      17
 359 029f BCF5E3F2 		.ascii	"\274\365\343\3622\232\233\243\207j\324pN5-\362%6\307"
 359      329A9BA3 
 359      876AD470 
 359      4E352DF2 
 359      2536C7
 360 02b2 7B0DB7DC 		.ascii	"{\015\267\334\360\320^0\205\354\022\315l{\375f\214\275"
 360      F0D05E30 
 360      85EC12CD 
 360      6C7BFD66 
 360      8CBD
 361 02c4 E358B4EC 		.ascii	"\343X\264\354&>\236c\205g\307\301\272J\003\261\011\317"
 361      263E9E63 
 361      8567C7C1 
 361      BA4A03B1 
 361      09CF
 362 02d6 4F4FB9DA 		.ascii	"OO\271\332\303\301\020\317\035\241HC\274\344ma\250E"
 362      C3C110CF 
 362      1DA14843 
 362      BCE46D61 
 362      A845
 363 02e8 8DB1AAC6 		.ascii	"\215\261\252\306+\270x\031\027\325\227wk\355\236\255"
 363      2BB87819 
 363      17D59777 
 363      6BED9EAD 
 364 02f8 AC7DAFA1 		.ascii	"\254}\257\241\262\253\332\351\304\032\304\273\033\276"
 364      B2ABDAE9 
 364      C41AC4BB 
 364      1BBE
 365 0306 BAF7892C 		.ascii	"\272\367\211,lO\206\0243\332~\255\255\016\365\030w-"
 365      6C4F8614 
 365      33DA7EAD 
 365      AD0EF518 
 365      772D
 366 0318 B8584173 		.ascii	"\270XAs\363\364P\207\364N\325\270\366e9\271u\027\267"
 366      F3F45087 
 366      F44ED5B8 
 366      F66539B9 
 366      7517B7
 367 032b 6E75395D 		.ascii	"nu9]\221\244TX\277\177\375\350qf=\216Yw\273#}\314\307"
 367      91A45458 
 367      BF7FFDE8 
 367      71663D8E 
 367      5977BB23 
 368 0342 09F3377B 		.ascii	"\011\3637{\207^\204\220\253\302|S\361ho\260\307<o[I"
 368      875E8490 
 368      ABC27C53 
ARM GAS  e:\temp\ccq07yyZ.s 			page 29


 368      F1686FB0 
 368      C73C6F5B 
 369 0357 EBD9DBA8 		.ascii	"\353\331\333\2503N\325y\023\027oh\346\255\353\204\371"
 369      334ED579 
 369      13176F68 
 369      E6ADEB84 
 369      F9
 370 0368 7A54774B 		.ascii	"zTwK3\037\247\232/\350/\352\014\022\346'C\312\336_\331"
 370      331FA79A 
 370      2FE82FEA 
 370      0C12E627 
 370      43CADE5F 
 371 037d B34B7AAF 		.ascii	"\263Kz\257\371\205\227D\2537 \375\365\200V\277\316\315"
 371      F9859744 
 371      AB3720FD 
 371      F58056BF 
 371      CECD
 372 038f DFE1E6EB 		.ascii	"\337\341\346\353l\023\256\010rS\230\337^\\8\014\202"
 372      6C13AE08 
 372      725398DF 
 372      5E5C380C 
 372      82
 373 03a0 C4D9AD78 		.ascii	"\304\331\255x\010\356\006\020\334\345\004\215\202\240"
 373      08EE0610 
 373      DCE5048D 
 373      82A0
 374 03ae B9AA5247 		.ascii	"\271\252RG\372\005A\315\317\266\303\021*A\217\227\240"
 374      FA0541CD 
 374      CFB6C311 
 374      2A418F97 
 374      A0
 375 03bf 2980A089 		.ascii	")\200\240\211\0234s\202\335\333\363\361\004&\004\301"
 375      13347382 
 375      DDDBF3F1 
 375      042604C1 
 376 03cf DE22FBEB 		.ascii	"\336\"\373\353\010\337\377\017\326\267Z^\013\377\262"
 376      08DFFF0F 
 376      D6B75A5E 
 376      0BFFB2
 377 03de F9A79D7D 		.ascii	"\371\247\235}\252F/>mg'\257\204{p/\240\322=^\251\225"
 377      AA462F3E 
 377      6D6727AF 
 377      847B702F 
 377      A0D23D5E 
 378 03f4 57DA5960 		.ascii	"W\332Y`}H\310\016\302+\271rw\333\203U\251\257\275R\333"
 378      7D48C80E 
 378      C22BB972 
 378      77DB8355 
 378      A9AFBD52 
 379 0409 0208DA38 		.ascii	"\002\010\3328A;'h\316\336\375X&\307\004A^\341\210\315"
 379      413B2768 
 379      CEDEFD58 
 379      26C70441 
 379      5EE188CD 
 380 041d E3F59597 		.ascii	"\343\365\225\227\240#\200\240\203\023tr\202\032[\317"
 380      A02380A0 
 380      83137472 
ARM GAS  e:\temp\ccq07yyZ.s 			page 30


 380      821A5BCF 
 381 042d 4828B922 		.ascii	"H(\271\"\010v\0249l\221\252\205q\257\205\256\000\202"
 381      08761439 
 381      6C91AA85 
 381      71AF85AE 
 381      0082
 382 043f 2E4ED0CD 		.ascii	".N\320\315\011r\362*\307\011i\027\004/G\332G\325\206"
 382      0972F22A 
 382      C7096917 
 382      042F47DA 
 382      47D586
 383 0452 77B63C87 		.ascii	"w\266<\207=\364\312\026\035?\260\373\377\372\320\357"
 383      3DF4CA16 
 383      1D3FB0FB 
 383      FFFAD0EF 
 384 0462 73861ECE 		.ascii	"s\206\036\316P\362\260\254\315\357\204\331\337\241V"
 384      50F2B0AC 
 384      CDEF84D9 
 384      DFA156
 385 0471 AC579C30 		.ascii	"\254W\2340{b\360\371\036\272/\210<\341\345\344\026\353"
 385      7B62F0F9 
 385      1EBA2F88 
 385      3CE1E5E4 
 385      16EB
 386 0483 D9BDC4FB 		.ascii	"\331\275\304\373\347\326fM+)\334\202\177\276\017\260"
 386      E7D6664D 
 386      2B29DC82 
 386      7FBE0FB0 
 387 0493 609FD6C2 		.ascii	"`\237\326\302x\010\342\357-\260u\373\337\337\272\177"
 387      7808E2EF 
 387      2DB075FB 
 387      DFDFBA7F 
 388 04a3 BDBAB12D 		.ascii	"\275\272\261-\314W\321\003\277w>\240*\032\340\212\352"
 388      CC57D103 
 388      BF773EA0 
 388      2A1AE08A 
 388      EA
 389 04b4 9FE75DF0 		.ascii	"\237\347]\360\223_\347\027<\250\006\017\362\3407\317"
 389      935FE717 
 389      3CA8060F 
 389      F2E037CF 
 390 04c4 9A3BF4BE 		.ascii	"\232;\364\276\301\015~\301Cj\360\020\017.yTPB|\203["
 390      C10D7EC1 
 390      436AF010 
 390      0F2E7954 
 390      50427C83 
 391 04d9 FC0E6658 		.ascii	"\374\016fX\015f\317\251\311\363\222V}\235\232\226\262"
 391      0D66CFA9 
 391      C9F39256 
 391      7D9D9A96 
 391      B2
 392 04ea 8A0D9253 		.ascii	"\212\015\222SS\364K\226}\023\223\224\230(}\272D\311"
 392      53F44B96 
 392      7D139394 
 392      98287DBA 
 392      44C9
 393 04fc 504CAB2D 		.ascii	"PL\253-\212qUjf\226)]Y\271<53i\301J\377\204ei\011\351"
ARM GAS  e:\temp\ccq07yyZ.s 			page 31


 393      8A71556A 
 393      6696295D 
 393      59B93C35 
 393      3369C14A 
 394 0516 5294EFDA 		.ascii	"R\224\357\332\342\037\026m\310L\377>E1+\226Iq,_\221"
 394      E21F166D 
 394      C84CFF3E 
 394      45312B96 
 394      49712C5F 
 395 052b 96F09D34 		.ascii	"\226\360\2354\333\273\226\236e\266dnL\316\260\230\226"
 395      DBBB969E 
 395      65B6646E 
 395      4CCEB098 
 395      96
 396 053c AECE306E 		.ascii	"\256\3160nPLa\351\233\327\233M\253\215F\223b6\177\362"
 396      504C61E9 
 396      9BD79B4D 
 396      AB8D4693 
 396      62367FF2 
 397 0550 7ECACFD3 		.ascii	"~\312\317\3237[6oR\314\310\024\373_EE\301\010\357\334"
 397      375B366F 
 397      52CCC814 
 397      FB5F4545 
 397      C108EFDC 
 398 0564 6CC1E0A0 		.ascii	"l\301\340\240\254\365\031\226\257>\362.n4[L\251\270"
 398      ACF51996 
 398      AF3EF22E 
 398      6E345B4C 
 398      A9B8
 399 0576 91650E66 		.ascii	"\221e\016f;\211_\316\364\333\372\326\264(km\352\372"
 399      3B895FCE 
 399      F4DBFAD6 
 399      B4286B6D 
 399      EAFA
 400 0588 9F14BE3B 		.ascii	"\237\024\276;\177\236\377n\212Q\335\235\025\270\234"
 400      7F9EFF6E 
 400      8A51DD9D 
 400      15B89C
 401 0597 9C61547E 		.ascii	"\234aT~\234\021\270\276\334b\232\035X\202G\247m\334"
 401      9C11B8BE 
 401      DC629A1D 
 401      588247A7 
 401      6DDC
 402 05a9 34EB035B 		.ascii	"4\353\003[3\002\327\221h\272\337jR&\236e\346\206 \223"
 402      3302D791 
 402      68BADF6A 
 402      52269E65 
 402      E6862093 
 403 05bd B26EFEBC 		.ascii	"\262n\376\274\177\000\210\362co"
 403      7F0088F2 
 403      636F
 404              		.text
 405              		.section	.gnu.lto_.symtab.6240ad3d,"",%progbits
 406 0000 4932435F 		.ascii	"I2C_MSTR_I2C_ISR\000"
 406      4D535452 
 406      5F493243 
 406      5F495352 
ARM GAS  e:\temp\ccq07yyZ.s 			page 32


 406      00
 407 0011 00       		.ascii	"\000"
 408 0012 00       		.ascii	"\000"
 409 0013 00       		.ascii	"\000"
 410 0014 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 410      00000000 
 411 001c AD000000 		.ascii	"\255\000\000\000"
 412 0020 4932435F 		.ascii	"I2C_MSTR_customIntrHandler\000"
 412      4D535452 
 412      5F637573 
 412      746F6D49 
 412      6E747248 
 413 003b 00       		.ascii	"\000"
 414 003c 02       		.ascii	"\002"
 415 003d 00       		.ascii	"\000"
 416 003e 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 416      00000000 
 417 0046 B7000000 		.ascii	"\267\000\000\000"
 418 004a 4932435F 		.ascii	"I2C_MSTR_state\000"
 418      4D535452 
 418      5F737461 
 418      746500
 419 0059 00       		.ascii	"\000"
 420 005a 02       		.ascii	"\002"
 421 005b 00       		.ascii	"\000"
 422 005c 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 422      00000000 
 423 0064 BF000000 		.ascii	"\277\000\000\000"
 424 0068 4932435F 		.ascii	"I2C_MSTR_mstrStatus\000"
 424      4D535452 
 424      5F6D7374 
 424      72537461 
 424      74757300 
 425 007c 00       		.ascii	"\000"
 426 007d 02       		.ascii	"\002"
 427 007e 00       		.ascii	"\000"
 428 007f 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 428      00000000 
 429 0087 C7000000 		.ascii	"\307\000\000\000"
 430 008b 4932435F 		.ascii	"I2C_MSTR_mstrWrBufSize\000"
 430      4D535452 
 430      5F6D7374 
 430      72577242 
 430      75665369 
 431 00a2 00       		.ascii	"\000"
 432 00a3 02       		.ascii	"\002"
 433 00a4 00       		.ascii	"\000"
 434 00a5 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 434      00000000 
 435 00ad CF000000 		.ascii	"\317\000\000\000"
 436 00b1 4932435F 		.ascii	"I2C_MSTR_mstrRdBufSize\000"
 436      4D535452 
 436      5F6D7374 
 436      72526442 
 436      75665369 
 437 00c8 00       		.ascii	"\000"
 438 00c9 02       		.ascii	"\002"
ARM GAS  e:\temp\ccq07yyZ.s 			page 33


 439 00ca 00       		.ascii	"\000"
 440 00cb 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 440      00000000 
 441 00d3 D1000000 		.ascii	"\321\000\000\000"
 442 00d7 4932435F 		.ascii	"I2C_MSTR_mstrRdBufIndex\000"
 442      4D535452 
 442      5F6D7374 
 442      72526442 
 442      7566496E 
 443 00ef 00       		.ascii	"\000"
 444 00f0 02       		.ascii	"\002"
 445 00f1 00       		.ascii	"\000"
 446 00f2 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 446      00000000 
 447 00fa D3000000 		.ascii	"\323\000\000\000"
 448 00fe 4932435F 		.ascii	"I2C_MSTR_mstrRdBufPtr\000"
 448      4D535452 
 448      5F6D7374 
 448      72526442 
 448      75665074 
 449 0114 00       		.ascii	"\000"
 450 0115 02       		.ascii	"\002"
 451 0116 00       		.ascii	"\000"
 452 0117 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 452      00000000 
 453 011f D6000000 		.ascii	"\326\000\000\000"
 454 0123 4932435F 		.ascii	"I2C_MSTR_mstrWrBufIndexTmp\000"
 454      4D535452 
 454      5F6D7374 
 454      72577242 
 454      7566496E 
 455 013e 00       		.ascii	"\000"
 456 013f 02       		.ascii	"\002"
 457 0140 00       		.ascii	"\000"
 458 0141 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 458      00000000 
 459 0149 D8000000 		.ascii	"\330\000\000\000"
 460 014d 4932435F 		.ascii	"I2C_MSTR_mstrWrBufIndex\000"
 460      4D535452 
 460      5F6D7374 
 460      72577242 
 460      7566496E 
 461 0165 00       		.ascii	"\000"
 462 0166 02       		.ascii	"\002"
 463 0167 00       		.ascii	"\000"
 464 0168 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 464      00000000 
 465 0170 DA000000 		.ascii	"\332\000\000\000"
 466 0174 4932435F 		.ascii	"I2C_MSTR_mstrWrBufPtr\000"
 466      4D535452 
 466      5F6D7374 
 466      72577242 
 466      75665074 
 467 018a 00       		.ascii	"\000"
 468 018b 02       		.ascii	"\002"
 469 018c 00       		.ascii	"\000"
 470 018d 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
ARM GAS  e:\temp\ccq07yyZ.s 			page 34


 470      00000000 
 471 0195 DC000000 		.ascii	"\334\000\000\000"
 472 0199 4932435F 		.ascii	"I2C_MSTR_mstrControl\000"
 472      4D535452 
 472      5F6D7374 
 472      72436F6E 
 472      74726F6C 
 473 01ae 00       		.ascii	"\000"
 474 01af 02       		.ascii	"\002"
 475 01b0 00       		.ascii	"\000"
 476 01b1 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 476      00000000 
 477 01b9 DE000000 		.ascii	"\336\000\000\000"
 478 01bd 4932435F 		.ascii	"I2C_MSTR_I2CFwBlockReset\000"
 478      4D535452 
 478      5F493243 
 478      4677426C 
 478      6F636B52 
 479 01d6 00       		.ascii	"\000"
 480 01d7 02       		.ascii	"\002"
 481 01d8 00       		.ascii	"\000"
 482 01d9 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 482      00000000 
 483 01e1 AF000000 		.ascii	"\257\000\000\000"
 484              		.text
 485              		.section	.gnu.lto_.opts,"",%progbits
 486 0000 272D666D 		.ascii	"'-fmath-errno' '-fsigned-zeros' '-ftrapping-math' '"
 486      6174682D 
 486      6572726E 
 486      6F272027 
 486      2D667369 
 487 0033 2D666E6F 		.ascii	"-fno-trapv' '-fno-openmp' '-fno-openacc' '-mcpu=cor"
 487      2D747261 
 487      70762720 
 487      272D666E 
 487      6F2D6F70 
 488 0066 7465782D 		.ascii	"tex-m0' '-mthumb' '-g' '-Os' '-Werror' '-ffunction-"
 488      6D302720 
 488      272D6D74 
 488      68756D62 
 488      2720272D 
 489 0099 73656374 		.ascii	"sections' '-ffat-lto-objects' '-finline-functions' "
 489      696F6E73 
 489      2720272D 
 489      66666174 
 489      2D6C746F 
 490 00cc 272D666C 		.ascii	"'-flto' '-fno-strict-aliasing'\000"
 490      746F2720 
 490      272D666E 
 490      6F2D7374 
 490      72696374 
 491              		.text
 492              		.cfi_sections	.debug_frame
 493              		.section	.text.I2C_MSTR_I2C_ISR,"ax",%progbits
 494              		.align	1
 495              		.global	I2C_MSTR_I2C_ISR
 496              		.code	16
ARM GAS  e:\temp\ccq07yyZ.s 			page 35


 497              		.thumb_func
 498              		.type	I2C_MSTR_I2C_ISR, %function
 499              	I2C_MSTR_I2C_ISR:
 500              	.LFB0:
 501              		.file 1 "Generated_Source\\PSoC4\\I2C_MSTR_I2C_INT.c"
   1:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** * \file I2C_MSTR_I2C_INT.c
   3:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** * \version 4.0
   4:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** *
   5:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** * \brief
   6:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** *  This file provides the source code to the Interrupt Service Routine for
   7:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** *  the SCB Component in I2C mode.
   8:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** *
   9:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** * Note:
  10:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** *
  11:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** ********************************************************************************
  12:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** * \copyright
  13:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** * Copyright 2013-2017, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  19:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** #include "I2C_MSTR_PVT.h"
  20:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** #include "I2C_MSTR_I2C_PVT.h"
  21:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** #include "cyapicallbacks.h"
  22:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  23:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  24:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** /*******************************************************************************
  25:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** * Function Name: I2C_MSTR_I2C_ISR
  26:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** ****************************************************************************//**
  27:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** *
  28:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** *  Handles the Interrupt Service Routine for the SCB I2C mode.
  29:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** *
  30:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** *******************************************************************************/
  31:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** CY_ISR(I2C_MSTR_I2C_ISR)
  32:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** {
 502              		.loc 1 32 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              	.LVL0:
 507 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 508              		.cfi_def_cfa_offset 24
 509              		.cfi_offset 3, -24
 510              		.cfi_offset 4, -20
 511              		.cfi_offset 5, -16
 512              		.cfi_offset 6, -12
 513              		.cfi_offset 7, -8
 514              		.cfi_offset 14, -4
  33:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     uint32 diffCount;
  34:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     uint32 endTransfer;
  35:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  36:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** #ifdef I2C_MSTR_I2C_ISR_ENTRY_CALLBACK
  37:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     I2C_MSTR_I2C_ISR_EntryCallback();
  38:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** #endif /* I2C_MSTR_I2C_ISR_ENTRY_CALLBACK */
  39:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
ARM GAS  e:\temp\ccq07yyZ.s 			page 36


  40:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** #if (I2C_MSTR_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
  41:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     uint32 response;
  42:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  43:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     response = I2C_MSTR_I2C_ACK_ADDR;
  44:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** #endif /* (I2C_MSTR_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
  45:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  46:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     endTransfer = 0u; /* Continue active transfer */
  47:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  48:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     /* Calls customer routine if registered */
  49:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     if(NULL != I2C_MSTR_customIntrHandler)
 515              		.loc 1 49 0
 516 0002 9E4B     		ldr	r3, .L78
 517 0004 1B68     		ldr	r3, [r3]
 518 0006 002B     		cmp	r3, #0
 519 0008 00D0     		beq	.L2
  50:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     {
  51:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         I2C_MSTR_customIntrHandler();
 520              		.loc 1 51 0
 521 000a 9847     		blx	r3
 522              	.LVL1:
 523              	.L2:
  52:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     }
  53:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  54:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     if(I2C_MSTR_CHECK_INTR_I2C_EC_MASKED(I2C_MSTR_INTR_I2C_EC_WAKE_UP))
 524              		.loc 1 54 0
 525 000c 9C4B     		ldr	r3, .L78+4
 526 000e 1B68     		ldr	r3, [r3]
 527 0010 DB07     		lsls	r3, r3, #31
 528 0012 02D5     		bpl	.L3
  55:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     {
  56:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         /* Mask-off after wakeup */
  57:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         I2C_MSTR_SetI2CExtClkInterruptMode(I2C_MSTR_NO_INTR_SOURCES);
 529              		.loc 1 57 0
 530 0014 0022     		movs	r2, #0
 531 0016 9B4B     		ldr	r3, .L78+8
 532 0018 1A60     		str	r2, [r3]
 533              	.L3:
  58:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     }
  59:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  60:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     /* Master and Slave error tracking:
  61:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     * Add the master state check to track only the master errors when the master is active or
  62:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     * track slave errors when the slave is active or idle.
  63:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     * A special MMS case: in the address phase with misplaced Start: the master sets the LOST_ARB a
  64:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     * slave BUS_ERR. The valid event is LOST_ARB comes from the master.
  65:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     */
  66:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     if(I2C_MSTR_CHECK_I2C_FSM_MASTER)
 534              		.loc 1 66 0
 535 001a 9B4B     		ldr	r3, .L78+12
 536 001c 1A78     		ldrb	r2, [r3]
 537 001e 9206     		lsls	r2, r2, #26
 538 0020 01D4     		bmi	.L4
 539              	.LVL2:
 540              	.L9:
  46:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 541              		.loc 1 46 0
 542 0022 0021     		movs	r1, #0
 543 0024 23E0     		b	.L5
ARM GAS  e:\temp\ccq07yyZ.s 			page 37


 544              	.LVL3:
 545              	.L4:
  67:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     {
  68:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #if(I2C_MSTR_I2C_MASTER)
  69:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         {
  70:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             /* INTR_MASTER_I2C_BUS_ERROR:
  71:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * A misplaced Start or Stop condition occurred on the bus: complete the transaction.
  72:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * The interrupt is cleared in I2C_FSM_EXIT_IDLE.
  73:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             */
  74:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             if(I2C_MSTR_CHECK_INTR_MASTER_MASKED(I2C_MSTR_INTR_MASTER_I2C_BUS_ERROR))
 546              		.loc 1 74 0
 547 0026 994A     		ldr	r2, .L78+16
  46:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 548              		.loc 1 46 0
 549 0028 0021     		movs	r1, #0
 550              		.loc 1 74 0
 551 002a 1068     		ldr	r0, [r2]
 552 002c C005     		lsls	r0, r0, #23
 553 002e 06D5     		bpl	.L6
  75:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
  76:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_mstrStatus |= (uint16) (I2C_MSTR_I2C_MSTAT_ERR_XFER |
 554              		.loc 1 76 0
 555 0030 C024     		movs	r4, #192
 556 0032 9748     		ldr	r0, .L78+20
 557 0034 A400     		lsls	r4, r4, #2
 558 0036 0188     		ldrh	r1, [r0]
 559 0038 2143     		orrs	r1, r4
 560 003a 0180     		strh	r1, [r0]
 561              	.LVL4:
  77:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                          I2C_MSTR_I2C_MSTAT_ERR_BUS_ERROR);
  78:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  79:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 endTransfer = I2C_MSTR_I2C_CMPLT_ANY_TRANSFER;
 562              		.loc 1 79 0
 563 003c 0121     		movs	r1, #1
 564              	.LVL5:
 565              	.L6:
  80:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
  81:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  82:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             /* INTR_MASTER_I2C_ARB_LOST:
  83:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * The MultiMaster lost arbitrage during transaction.
  84:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * A Misplaced Start or Stop condition is treated as lost arbitration when the master dr
  85:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * The interrupt source is cleared in I2C_FSM_EXIT_IDLE.
  86:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             */
  87:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             if(I2C_MSTR_CHECK_INTR_MASTER_MASKED(I2C_MSTR_INTR_MASTER_I2C_ARB_LOST))
 566              		.loc 1 87 0
 567 003e 1268     		ldr	r2, [r2]
 568 0040 D207     		lsls	r2, r2, #31
 569 0042 06D5     		bpl	.L7
  88:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
  89:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_mstrStatus |= (uint16) (I2C_MSTR_I2C_MSTAT_ERR_XFER |
 570              		.loc 1 89 0
 571 0044 9020     		movs	r0, #144
 572 0046 9249     		ldr	r1, .L78+20
 573              	.LVL6:
 574 0048 8000     		lsls	r0, r0, #2
 575 004a 0A88     		ldrh	r2, [r1]
 576 004c 0243     		orrs	r2, r0
ARM GAS  e:\temp\ccq07yyZ.s 			page 38


 577 004e 0A80     		strh	r2, [r1]
 578              	.LVL7:
 579 0050 01E0     		b	.L8
 580              	.LVL8:
 581              	.L7:
  90:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                          I2C_MSTR_I2C_MSTAT_ERR_ARB_LOST);
  91:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  92:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 endTransfer = I2C_MSTR_I2C_CMPLT_ANY_TRANSFER;
  93:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
  94:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
  95:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             #if(I2C_MSTR_I2C_MULTI_MASTER_SLAVE)
  96:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
  97:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* I2C_MASTER_CMD_M_START_ON_IDLE:
  98:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 * MultiMaster-Slave does not generate start, because Slave was addressed.
  99:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 * Pass control to slave.
 100:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 */
 101:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 if(I2C_MSTR_CHECK_I2C_MASTER_CMD(I2C_MSTR_I2C_MASTER_CMD_M_START_ON_IDLE))
 102:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 103:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_mstrStatus |= (uint16) (I2C_MSTR_I2C_MSTAT_ERR_XFER |
 104:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                              I2C_MSTR_I2C_MSTAT_ERR_ABORT_XFER);
 105:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 106:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     endTransfer = I2C_MSTR_I2C_CMPLT_ANY_TRANSFER;
 107:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 108:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
 109:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             #endif
 110:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 111:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             /* The error handling common part:
 112:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * Sets a completion flag of the master transaction and passes control to:
 113:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             *  - I2C_FSM_EXIT_IDLE - to complete transaction in case of: ARB_LOST or BUS_ERR.
 114:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             *  - I2C_FSM_IDLE      - to take chance for the slave to process incoming transaction.
 115:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             */
 116:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             if(0u != endTransfer)
 582              		.loc 1 116 0
 583 0052 0029     		cmp	r1, #0
 584 0054 E5D0     		beq	.L9
 585              	.LVL9:
 586              	.L8:
 117:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
 118:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* Set completion flags for master */
 119:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_mstrStatus |= (uint16) I2C_MSTR_GET_I2C_MSTAT_CMPLT;
 587              		.loc 1 119 0
 588 0056 0121     		movs	r1, #1
 589 0058 0220     		movs	r0, #2
 590 005a 1A78     		ldrb	r2, [r3]
 591 005c 8C4C     		ldr	r4, .L78+20
 592 005e 0A40     		ands	r2, r1
 593 0060 821A     		subs	r2, r0, r2
 594 0062 2088     		ldrh	r0, [r4]
 595 0064 0243     		orrs	r2, r0
 596 0066 92B2     		uxth	r2, r2
 597 0068 2280     		strh	r2, [r4]
 120:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 121:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 #if(I2C_MSTR_I2C_MULTI_MASTER_SLAVE)
 122:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 123:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     if(I2C_MSTR_CHECK_I2C_FSM_ADDR)
 124:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 125:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Start generation is set after another master starts accessing Slave.
ARM GAS  e:\temp\ccq07yyZ.s 			page 39


 126:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * Clean-up master and turn to slave. Set state to IDLE.
 127:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         */
 128:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         if(I2C_MSTR_CHECK_I2C_MASTER_CMD(I2C_MSTR_I2C_MASTER_CMD_M_START_ON_IDLE))
 129:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 130:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_I2C_MASTER_CLEAR_START;
 131:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 132:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             endTransfer = I2C_MSTR_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave
 133:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 134:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Valid arbitration lost on the address phase happens only when: master LO
 135:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * slave BUS_ERR is cleared. Only in that case set the state to IDLE without
 136:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         */
 137:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         else if((!I2C_MSTR_CHECK_INTR_SLAVE_MASKED(I2C_MSTR_INTR_SLAVE_I2C_BUS_ERRO
 138:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                && I2C_MSTR_CHECK_INTR_MASTER_MASKED(I2C_MSTR_INTR_MASTER_I2C_ARB_LO
 139:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 140:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             endTransfer = I2C_MSTR_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave
 141:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 142:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         else
 143:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 144:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             endTransfer = 0u; /* Causes I2C_FSM_EXIT_IDLE to be set below */
 145:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 146:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 147:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         if(0u != endTransfer) /* Clean-up master to proceed with slave */
 148:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 149:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_CLEAR_TX_FIFO; /* Shifter keeps address, clear it */
 150:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 151:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_DISABLE_MASTER_AUTO_DATA_ACK; /* In case of reading disable au
 152:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 153:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Clean-up master interrupt sources */
 154:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_ClearMasterInterruptSource(I2C_MSTR_INTR_MASTER_ALL);
 155:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 156:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Disable data processing interrupts: they have to be cleared before *
 157:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_SetRxInterruptMode(I2C_MSTR_NO_INTR_SOURCES);
 158:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_SetTxInterruptMode(I2C_MSTR_NO_INTR_SOURCES);
 159:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 160:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_state = I2C_MSTR_I2C_FSM_IDLE;
 161:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 162:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         else
 163:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 164:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Set I2C_FSM_EXIT_IDLE for BUS_ERR and ARB_LOST (that is really bus e
 165:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_state = I2C_MSTR_I2C_FSM_EXIT_IDLE;
 166:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 167:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 168:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     else
 169:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 170:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Set I2C_FSM_EXIT_IDLE if any other state than address */
 171:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_state = I2C_MSTR_I2C_FSM_EXIT_IDLE;
 172:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 173:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 174:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 #else
 175:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 176:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* In case of LOST*/
 177:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_state = I2C_MSTR_I2C_FSM_EXIT_IDLE;
 598              		.loc 1 177 0
 599 006a 0022     		movs	r2, #0
 600 006c 1A70     		strb	r2, [r3]
 601              	.L5:
 602              	.LVL10:
ARM GAS  e:\temp\ccq07yyZ.s 			page 40


 178:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 179:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 #endif
 180:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
 181:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         }
 182:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #endif
 183:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     }
 184:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     else /* (I2C_MSTR_CHECK_I2C_FSM_SLAVE) */
 185:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     {
 186:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #if(I2C_MSTR_I2C_SLAVE)
 187:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         {
 188:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             /* INTR_SLAVE_I2C_BUS_ERROR or I2C_MSTR_INTR_SLAVE_I2C_ARB_LOST:
 189:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * A Misplaced Start or Stop condition occurred on the bus: set a flag
 190:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * to notify an error condition.
 191:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             */
 192:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             if(I2C_MSTR_CHECK_INTR_SLAVE_MASKED(I2C_MSTR_INTR_SLAVE_I2C_BUS_ERROR |
 193:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                         I2C_MSTR_INTR_SLAVE_I2C_ARB_LOST))
 194:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
 195:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 if(I2C_MSTR_CHECK_I2C_FSM_RD)
 196:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 197:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* TX direction: master reads from slave */
 198:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_slStatus &= (uint8) ~I2C_MSTR_I2C_SSTAT_RD_BUSY;
 199:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_slStatus |= (uint8) (I2C_MSTR_I2C_SSTAT_RD_ERR |
 200:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                           I2C_MSTR_I2C_SSTAT_RD_CMPLT);
 201:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 202:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 else
 203:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 204:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* RX direction: master writes into slave */
 205:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_slStatus &= (uint8) ~I2C_MSTR_I2C_SSTAT_WR_BUSY;
 206:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_slStatus |= (uint8) (I2C_MSTR_I2C_SSTAT_WR_ERR |
 207:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                           I2C_MSTR_I2C_SSTAT_WR_CMPLT);
 208:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 209:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 210:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_state = I2C_MSTR_I2C_FSM_EXIT_IDLE;
 211:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
 212:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         }
 213:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #endif
 214:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     }
 215:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 216:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     /* States description:
 217:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     * Any Master operation starts from: the ADDR_RD/WR state as the master generates traffic on the
 218:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     * Any Slave operation starts from: the IDLE state as the slave always waits for actions from th
 219:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     */
 220:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 221:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     /* FSM Master */
 222:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     if(I2C_MSTR_CHECK_I2C_FSM_MASTER)
 603              		.loc 1 222 0
 604 006e 1878     		ldrb	r0, [r3]
 605 0070 1022     		movs	r2, #16
 606 0072 8006     		lsls	r0, r0, #26
 607 0074 00D4     		bmi	.LCB120
 608 0076 F1E0     		b	.L11	@long jump
 609              	.LCB120:
 223:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     {
 224:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #if(I2C_MSTR_I2C_MASTER)
 225:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         {
 226:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             /* INTR_MASTER_I2C_STOP:
 227:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * A Stop condition was generated by the master: the end of the transaction.
ARM GAS  e:\temp\ccq07yyZ.s 			page 41


 228:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * Set completion flags to notify the API.
 229:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             */
 230:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             if(I2C_MSTR_CHECK_INTR_MASTER_MASKED(I2C_MSTR_INTR_MASTER_I2C_STOP))
 610              		.loc 1 230 0
 611 0078 844C     		ldr	r4, .L78+16
 612 007a 2068     		ldr	r0, [r4]
 613 007c 1042     		tst	r0, r2
 614 007e 0CD0     		beq	.L12
 231:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
 232:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_ClearMasterInterruptSource(I2C_MSTR_INTR_MASTER_I2C_STOP);
 615              		.loc 1 232 0
 616 0080 8449     		ldr	r1, .L78+24
 617              	.LVL11:
 233:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 234:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_mstrStatus |= (uint16) I2C_MSTR_GET_I2C_MSTAT_CMPLT;
 618              		.loc 1 234 0
 619 0082 834C     		ldr	r4, .L78+20
 232:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 620              		.loc 1 232 0
 621 0084 0A60     		str	r2, [r1]
 622              		.loc 1 234 0
 623 0086 0121     		movs	r1, #1
 624 0088 1878     		ldrb	r0, [r3]
 625 008a 0140     		ands	r1, r0
 626 008c 0220     		movs	r0, #2
 627 008e 411A     		subs	r1, r0, r1
 628 0090 2088     		ldrh	r0, [r4]
 629 0092 0143     		orrs	r1, r0
 630 0094 89B2     		uxth	r1, r1
 631 0096 2180     		strh	r1, [r4]
 632 0098 DEE0     		b	.L74
 633              	.LVL12:
 634              	.L12:
 235:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_state       = I2C_MSTR_I2C_FSM_IDLE;
 236:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
 237:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             else
 238:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
 239:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 if(I2C_MSTR_CHECK_I2C_FSM_ADDR) /* Address stage */
 635              		.loc 1 239 0
 636 009a 1878     		ldrb	r0, [r3]
 637 009c 0007     		lsls	r0, r0, #28
 638 009e 1BD5     		bpl	.L15
 240:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 241:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* INTR_MASTER_I2C_NACK:
 242:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     * The master sent an address but it was NACKed by the slave. Complete transacti
 243:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     */
 244:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     if(I2C_MSTR_CHECK_INTR_MASTER_MASKED(I2C_MSTR_INTR_MASTER_I2C_NACK))
 639              		.loc 1 244 0
 640 00a0 0220     		movs	r0, #2
 641 00a2 2568     		ldr	r5, [r4]
 642 00a4 0542     		tst	r5, r0
 643 00a6 09D0     		beq	.L16
 245:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 246:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_ClearMasterInterruptSource(I2C_MSTR_INTR_MASTER_I2C_NACK);
 644              		.loc 1 246 0
 645 00a8 7A4A     		ldr	r2, .L78+24
 247:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
ARM GAS  e:\temp\ccq07yyZ.s 			page 42


 248:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_mstrStatus |= (uint16) (I2C_MSTR_I2C_MSTAT_ERR_XFER |
 646              		.loc 1 248 0
 647 00aa 7949     		ldr	r1, .L78+20
 648              	.LVL13:
 246:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 649              		.loc 1 246 0
 650 00ac 1060     		str	r0, [r2]
 651              		.loc 1 248 0
 652 00ae 8820     		movs	r0, #136
 653 00b0 0A88     		ldrh	r2, [r1]
 654 00b2 8000     		lsls	r0, r0, #2
 655 00b4 0243     		orrs	r2, r0
 656 00b6 0A80     		strh	r2, [r1]
 657              	.LVL14:
 249:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                                  I2C_MSTR_I2C_MSTAT_ERR_ADDR_NAK);
 250:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 251:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         endTransfer = I2C_MSTR_I2C_CMPLT_ANY_TRANSFER;
 658              		.loc 1 251 0
 659 00b8 0121     		movs	r1, #1
 660 00ba 0DE0     		b	.L15
 661              	.LVL15:
 662              	.L16:
 252:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 253:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* INTR_TX_UNDERFLOW. The master sent an address:
 254:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     *  - TX direction: the clock is stretched after the ACK phase, because the TX F
 255:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     *    EMPTY. The TX EMPTY cleans all the TX interrupt sources.
 256:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     *  - RX direction: the 1st byte is received, but there is no ACK permission,
 257:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     *    the clock is stretched after 1 byte is received.
 258:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     */
 259:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     else
 260:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 261:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         if(I2C_MSTR_CHECK_I2C_FSM_RD) /* Reading */
 663              		.loc 1 261 0
 664 00bc 1878     		ldrb	r0, [r3]
 665 00be C007     		lsls	r0, r0, #31
 666 00c0 02D5     		bpl	.L17
 262:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 263:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_state = I2C_MSTR_I2C_FSM_MSTR_RD_DATA;
 667              		.loc 1 263 0
 668 00c2 2522     		movs	r2, #37
 669 00c4 1A70     		strb	r2, [r3]
 670 00c6 07E0     		b	.L15
 671              	.L17:
 264:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 265:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         else /* Writing */
 266:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 267:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_state = I2C_MSTR_I2C_FSM_MSTR_WR_DATA;
 672              		.loc 1 267 0
 673 00c8 2420     		movs	r0, #36
 674 00ca 1870     		strb	r0, [r3]
 268:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             if(0u != I2C_MSTR_mstrWrBufSize)
 675              		.loc 1 268 0
 676 00cc 7248     		ldr	r0, .L78+28
 677 00ce 0068     		ldr	r0, [r0]
 678 00d0 0028     		cmp	r0, #0
 679 00d2 01D0     		beq	.L15
 269:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
ARM GAS  e:\temp\ccq07yyZ.s 			page 43


 270:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 /* Enable INTR.TX_EMPTY if there is data to transmit */
 271:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 I2C_MSTR_SetTxInterruptMode(I2C_MSTR_INTR_TX_EMPTY);
 680              		.loc 1 271 0
 681 00d4 7148     		ldr	r0, .L78+32
 682 00d6 0260     		str	r2, [r0]
 683              	.LVL16:
 684              	.L15:
 272:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 273:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 274:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 275:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 276:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 277:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 if(I2C_MSTR_CHECK_I2C_FSM_DATA) /* Data phase */
 685              		.loc 1 277 0
 686 00d8 0425     		movs	r5, #4
 687 00da 1A78     		ldrb	r2, [r3]
 688 00dc 2A42     		tst	r2, r5
 689 00de 00D1     		bne	.LCB209
 690 00e0 9FE0     		b	.L18	@long jump
 691              	.LCB209:
 278:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 279:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     if(I2C_MSTR_CHECK_I2C_FSM_RD) /* Reading */
 692              		.loc 1 279 0
 693 00e2 0120     		movs	r0, #1
 694 00e4 1A78     		ldrb	r2, [r3]
 695 00e6 0242     		tst	r2, r0
 696 00e8 43D0     		beq	.L19
 280:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 281:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* INTR_RX_FULL:
 282:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * RX direction: the master received 8 bytes.
 283:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * Get data from RX FIFO and decide whether to ACK or  NACK the following by
 284:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         */
 285:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         if(I2C_MSTR_CHECK_INTR_RX_MASKED(I2C_MSTR_INTR_RX_FULL))
 697              		.loc 1 285 0
 698 00ea 0826     		movs	r6, #8
 699 00ec 6C4A     		ldr	r2, .L78+36
 700 00ee 1468     		ldr	r4, [r2]
 701 00f0 3442     		tst	r4, r6
 702 00f2 23D0     		beq	.L20
 286:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 287:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Calculate difference */
 288:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             diffCount =  I2C_MSTR_mstrRdBufSize -
 703              		.loc 1 288 0
 704 00f4 6B4A     		ldr	r2, .L78+40
 289:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                         (I2C_MSTR_mstrRdBufIndex + I2C_MSTR_GET_RX_FIFO_ENTRIES);
 705              		.loc 1 289 0
 706 00f6 6C4C     		ldr	r4, .L78+44
 288:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                         (I2C_MSTR_mstrRdBufIndex + I2C_MSTR_GET_RX_FIFO_ENTRIES);
 707              		.loc 1 288 0
 708 00f8 1568     		ldr	r5, [r2]
 709              		.loc 1 289 0
 710 00fa 6C4A     		ldr	r2, .L78+48
 711 00fc 1268     		ldr	r2, [r2]
 712 00fe 2768     		ldr	r7, [r4]
 288:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                         (I2C_MSTR_mstrRdBufIndex + I2C_MSTR_GET_RX_FIFO_ENTRIES);
 713              		.loc 1 288 0
 714 0100 EF1B     		subs	r7, r5, r7
ARM GAS  e:\temp\ccq07yyZ.s 			page 44


 715 0102 1F25     		movs	r5, #31
 716 0104 2A40     		ands	r2, r5
 717 0106 BA1A     		subs	r2, r7, r2
 718              	.LVL17:
 290:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 291:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Proceed transaction or end it when RX FIFO becomes FULL again */
 292:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             if(diffCount > I2C_MSTR_I2C_FIFO_SIZE)
 719              		.loc 1 292 0
 720 0108 B242     		cmp	r2, r6
 721 010a 07D8     		bhi	.L39
 293:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 294:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 diffCount = I2C_MSTR_I2C_FIFO_SIZE;
 295:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 296:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             else
 297:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 298:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 if(0u == diffCount)
 722              		.loc 1 298 0
 723 010c 002A     		cmp	r2, #0
 724 010e 06D1     		bne	.L21
 299:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 {
 300:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     I2C_MSTR_DISABLE_MASTER_AUTO_DATA_ACK;
 725              		.loc 1 300 0
 726 0110 6749     		ldr	r1, .L78+52
 727              	.LVL18:
 728 0112 684A     		ldr	r2, .L78+56
 729              	.LVL19:
 730 0114 0D68     		ldr	r5, [r1]
 731 0116 2A40     		ands	r2, r5
 732 0118 0A60     		str	r2, [r1]
 733              	.LVL20:
 301:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 302:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     diffCount   = I2C_MSTR_I2C_FIFO_SIZE;
 303:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     endTransfer = I2C_MSTR_I2C_CMPLT_ANY_TRANSFER;
 734              		.loc 1 303 0
 735 011a 0100     		movs	r1, r0
 736              	.LVL21:
 737              	.L39:
 294:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 738              		.loc 1 294 0
 739 011c 3200     		movs	r2, r6
 740              	.L21:
 741              	.LVL22:
 304:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 }
 305:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 306:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 307:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             for(; (0u != diffCount); diffCount--)
 308:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 309:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 I2C_MSTR_mstrRdBufPtr[I2C_MSTR_mstrRdBufIndex] = (uint8)
 742              		.loc 1 309 0 discriminator 1
 743 011e 664E     		ldr	r6, .L78+60
 310:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                                                         I2C_MSTR_RX
 744              		.loc 1 310 0 discriminator 1
 745 0120 664D     		ldr	r5, .L78+64
 746              	.L22:
 309:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                                                         I2C_MSTR_RX
 747              		.loc 1 309 0 discriminator 2
 748 0122 2068     		ldr	r0, [r4]
ARM GAS  e:\temp\ccq07yyZ.s 			page 45


 749 0124 3768     		ldr	r7, [r6]
 307:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 750              		.loc 1 307 0 discriminator 2
 751 0126 013A     		subs	r2, r2, #1
 752              	.LVL23:
 309:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                                                         I2C_MSTR_RX
 753              		.loc 1 309 0 discriminator 2
 754 0128 3818     		adds	r0, r7, r0
 755              		.loc 1 310 0 discriminator 2
 756 012a 2F68     		ldr	r7, [r5]
 309:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                                                         I2C_MSTR_RX
 757              		.loc 1 309 0 discriminator 2
 758 012c FFB2     		uxtb	r7, r7
 759 012e 0770     		strb	r7, [r0]
 311:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 I2C_MSTR_mstrRdBufIndex++;
 760              		.loc 1 311 0 discriminator 2
 761 0130 2068     		ldr	r0, [r4]
 762 0132 0130     		adds	r0, r0, #1
 763 0134 2060     		str	r0, [r4]
 307:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 764              		.loc 1 307 0 discriminator 2
 765 0136 002A     		cmp	r2, #0
 766 0138 F3D1     		bne	.L22
 767 013a 17E0     		b	.L23
 768              	.LVL24:
 769              	.L20:
 312:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 313:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 314:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* INTR_RX_NOT_EMPTY:
 315:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * RX direction: the master received one data byte, ACK or NACK it.
 316:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * The last byte is stored and NACKed by the master. The NACK and Stop is
 317:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * generated by one command generate Stop.
 318:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         */
 319:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         else if(I2C_MSTR_CHECK_INTR_RX_MASKED(I2C_MSTR_INTR_RX_NOT_EMPTY))
 770              		.loc 1 319 0
 771 013c 1268     		ldr	r2, [r2]
 772 013e 2A42     		tst	r2, r5
 773 0140 14D0     		beq	.L23
 320:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 321:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Put data in component buffer */
 322:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_mstrRdBufPtr[I2C_MSTR_mstrRdBufIndex] = (uint8) I2C_MSTR_RX_FI
 774              		.loc 1 322 0
 775 0142 594A     		ldr	r2, .L78+44
 776 0144 5C4E     		ldr	r6, .L78+60
 777 0146 1468     		ldr	r4, [r2]
 778 0148 3668     		ldr	r6, [r6]
 779 014a 3419     		adds	r4, r6, r4
 780 014c 5B4E     		ldr	r6, .L78+64
 781 014e 3668     		ldr	r6, [r6]
 782 0150 F6B2     		uxtb	r6, r6
 783 0152 2670     		strb	r6, [r4]
 323:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_mstrRdBufIndex++;
 784              		.loc 1 323 0
 785 0154 1468     		ldr	r4, [r2]
 786 0156 0134     		adds	r4, r4, #1
 787 0158 1460     		str	r4, [r2]
 324:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
ARM GAS  e:\temp\ccq07yyZ.s 			page 46


 325:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             if(I2C_MSTR_mstrRdBufIndex < I2C_MSTR_mstrRdBufSize)
 788              		.loc 1 325 0
 789 015a 1468     		ldr	r4, [r2]
 790 015c 514A     		ldr	r2, .L78+40
 791 015e 1268     		ldr	r2, [r2]
 792 0160 9442     		cmp	r4, r2
 793 0162 02D2     		bcs	.L40
 326:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 327:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 I2C_MSTR_I2C_MASTER_GENERATE_ACK;
 794              		.loc 1 327 0
 795 0164 564A     		ldr	r2, .L78+68
 796 0166 1560     		str	r5, [r2]
 797 0168 00E0     		b	.L23
 798              	.L40:
 328:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 329:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             else
 330:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 331:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                endTransfer = I2C_MSTR_I2C_CMPLT_ANY_TRANSFER;
 799              		.loc 1 331 0
 800 016a 0100     		movs	r1, r0
 801              	.LVL25:
 802              	.L23:
 332:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 333:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 334:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         else
 335:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 336:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Do nothing */
 337:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 338:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 339:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_ClearRxInterruptSource(I2C_MSTR_INTR_RX_ALL);
 803              		.loc 1 339 0
 804 016c 5548     		ldr	r0, .L78+72
 805 016e 564A     		ldr	r2, .L78+76
 806 0170 4DE0     		b	.L72
 807              	.L19:
 340:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 341:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     else /* Writing */
 342:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 343:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* INTR_MASTER_I2C_NACK :
 344:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * The master writes data to the slave and NACK was received: not all the by
 345:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * written to the slave from the TX FIFO. Revert the index if there is data 
 346:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * the TX FIFO and pass control to a complete transfer.
 347:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         */
 348:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         if(I2C_MSTR_CHECK_INTR_MASTER_MASKED(I2C_MSTR_INTR_MASTER_I2C_NACK))
 808              		.loc 1 348 0
 809 0172 0222     		movs	r2, #2
 810 0174 2468     		ldr	r4, [r4]
 811 0176 1442     		tst	r4, r2
 812 0178 20D0     		beq	.L24
 349:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 350:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_ClearMasterInterruptSource(I2C_MSTR_INTR_MASTER_I2C_NACK);
 813              		.loc 1 350 0
 814 017a 4649     		ldr	r1, .L78+24
 815              	.LVL26:
 351:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 352:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Rollback write buffer index: NACKed byte remains in shifter */
 353:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_mstrWrBufIndexTmp -= (I2C_MSTR_GET_TX_FIFO_ENTRIES +
ARM GAS  e:\temp\ccq07yyZ.s 			page 47


 816              		.loc 1 353 0
 817 017c 534C     		ldr	r4, .L78+80
 350:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 818              		.loc 1 350 0
 819 017e 0A60     		str	r2, [r1]
 820              		.loc 1 353 0
 821 0180 5349     		ldr	r1, .L78+84
 822 0182 1D32     		adds	r2, r2, #29
 823 0184 0E68     		ldr	r6, [r1]
 354:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                                    I2C_MSTR_GET_TX_FIFO_SR_VALID);
 824              		.loc 1 354 0
 825 0186 0D68     		ldr	r5, [r1]
 353:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                                    I2C_MSTR_GET_TX_FIFO_SR_VALID);
 826              		.loc 1 353 0
 827 0188 2168     		ldr	r1, [r4]
 828 018a 3240     		ands	r2, r6
 829 018c 8A1A     		subs	r2, r1, r2
 830 018e E90B     		lsrs	r1, r5, #15
 831 0190 0840     		ands	r0, r1
 832 0192 101A     		subs	r0, r2, r0
 833 0194 2060     		str	r0, [r4]
 355:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 356:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Update number of transferred bytes */
 357:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_mstrWrBufIndex = I2C_MSTR_mstrWrBufIndexTmp;
 358:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 359:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_mstrStatus |= (uint16) (I2C_MSTR_I2C_MSTAT_ERR_XFER |
 834              		.loc 1 359 0
 835 0196 8420     		movs	r0, #132
 357:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 836              		.loc 1 357 0
 837 0198 2168     		ldr	r1, [r4]
 838 019a 4E4A     		ldr	r2, .L78+88
 839              		.loc 1 359 0
 840 019c 8000     		lsls	r0, r0, #2
 357:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 841              		.loc 1 357 0
 842 019e 1160     		str	r1, [r2]
 843              		.loc 1 359 0
 844 01a0 3B49     		ldr	r1, .L78+20
 845 01a2 0A88     		ldrh	r2, [r1]
 846 01a4 0243     		orrs	r2, r0
 360:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                                      I2C_MSTR_I2C_MSTAT_ERR_SHORT_X
 361:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 362:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_CLEAR_TX_FIFO;
 847              		.loc 1 362 0
 848 01a6 8020     		movs	r0, #128
 359:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                                      I2C_MSTR_I2C_MSTAT_ERR_SHORT_X
 849              		.loc 1 359 0
 850 01a8 0A80     		strh	r2, [r1]
 851              		.loc 1 362 0
 852 01aa 4B4A     		ldr	r2, .L78+92
 853 01ac 4002     		lsls	r0, r0, #9
 854 01ae 1168     		ldr	r1, [r2]
 855 01b0 0143     		orrs	r1, r0
 856 01b2 1160     		str	r1, [r2]
 857 01b4 1068     		ldr	r0, [r2]
 858 01b6 4949     		ldr	r1, .L78+96
ARM GAS  e:\temp\ccq07yyZ.s 			page 48


 859 01b8 0140     		ands	r1, r0
 860 01ba 30E0     		b	.L73
 861              	.LVL27:
 862              	.L24:
 363:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 364:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             endTransfer = I2C_MSTR_I2C_CMPLT_ANY_TRANSFER;
 365:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 366:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* INTR_TX_EMPTY :
 367:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * TX direction: the TX FIFO is EMPTY, the data from the buffer needs to be 
 368:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * When there is no data in the component buffer, the underflow interrupt is
 369:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * enabled to catch when all the data has been transferred.
 370:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         */
 371:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         else if(I2C_MSTR_CHECK_INTR_TX_MASKED(I2C_MSTR_INTR_TX_EMPTY))
 863              		.loc 1 371 0
 864 01bc 484A     		ldr	r2, .L78+100
 865 01be 1068     		ldr	r0, [r2]
 866 01c0 C006     		lsls	r0, r0, #27
 867 01c2 26D5     		bpl	.L76
 372:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 373:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             while(I2C_MSTR_I2C_FIFO_SIZE != I2C_MSTR_GET_TX_FIFO_ENTRIES)
 868              		.loc 1 373 0
 869 01c4 1F25     		movs	r5, #31
 374:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 375:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 /* The temporary mstrWrBufIndexTmp is used because slave could NACK
 376:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 * roll-back required in this case. The mstrWrBufIndex is updated at
 377:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 */
 378:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 if(I2C_MSTR_mstrWrBufIndexTmp < I2C_MSTR_mstrWrBufSize)
 379:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 {
 380:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 #if(!I2C_MSTR_CY_SCBIP_V0)
 381:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                    /* Clear INTR_TX.UNDERFLOW before putting the last byte into TX 
 382:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     * a proper trigger at the end of transaction when INTR_TX.UNDER
 383:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     * event. Ticket ID# 156735.
 384:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     */
 385:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     if(I2C_MSTR_mstrWrBufIndexTmp == (I2C_MSTR_mstrWrBufSize - 1u))
 386:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     {
 387:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                         I2C_MSTR_ClearTxInterruptSource(I2C_MSTR_INTR_TX_UNDERFLOW)
 870              		.loc 1 387 0
 871 01c6 4024     		movs	r4, #64
 373:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 872              		.loc 1 373 0
 873 01c8 414E     		ldr	r6, .L78+84
 378:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 {
 874              		.loc 1 378 0
 875 01ca 404A     		ldr	r2, .L78+80
 876              	.L70:
 373:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 877              		.loc 1 373 0
 878 01cc 3068     		ldr	r0, [r6]
 879 01ce 2840     		ands	r0, r5
 880 01d0 0828     		cmp	r0, #8
 881 01d2 1AD0     		beq	.L28
 378:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 {
 882              		.loc 1 378 0
 883 01d4 1068     		ldr	r0, [r2]
 884 01d6 8446     		mov	ip, r0
 885 01d8 2F48     		ldr	r0, .L78+28
 886 01da 0768     		ldr	r7, [r0]
ARM GAS  e:\temp\ccq07yyZ.s 			page 49


 887 01dc BC45     		cmp	ip, r7
 888 01de 14D2     		bcs	.L28
 385:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     {
 889              		.loc 1 385 0
 890 01e0 0068     		ldr	r0, [r0]
 891 01e2 1768     		ldr	r7, [r2]
 892 01e4 0138     		subs	r0, r0, #1
 893 01e6 B842     		cmp	r0, r7
 894 01e8 03D1     		bne	.L29
 895              		.loc 1 387 0
 896 01ea 3E48     		ldr	r0, .L78+104
 897 01ec 0460     		str	r4, [r0]
 388:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                         I2C_MSTR_SetTxInterruptMode(I2C_MSTR_INTR_TX_UNDERFLOW);
 898              		.loc 1 388 0
 899 01ee 2B48     		ldr	r0, .L78+32
 900 01f0 0460     		str	r4, [r0]
 901              	.L29:
 389:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     }
 390:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                  #endif /* (!I2C_MSTR_CY_SCBIP_V0) */
 391:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 392:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     /* Put data into TX FIFO */
 393:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     I2C_MSTR_TX_FIFO_WR_REG = (uint32) I2C_MSTR_mstrWrBufPtr[I2C_MS
 902              		.loc 1 393 0
 903 01f2 3D4F     		ldr	r7, .L78+108
 904 01f4 1068     		ldr	r0, [r2]
 905 01f6 3F68     		ldr	r7, [r7]
 906 01f8 3818     		adds	r0, r7, r0
 907 01fa 0078     		ldrb	r0, [r0]
 908 01fc 3B4F     		ldr	r7, .L78+112
 909 01fe C0B2     		uxtb	r0, r0
 910 0200 3860     		str	r0, [r7]
 394:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     I2C_MSTR_mstrWrBufIndexTmp++;
 911              		.loc 1 394 0
 912 0202 1068     		ldr	r0, [r2]
 913 0204 0130     		adds	r0, r0, #1
 914 0206 1060     		str	r0, [r2]
 915 0208 E0E7     		b	.L70
 916              	.L28:
 395:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 }
 396:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 else
 397:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 {
 398:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     break; /* No more data to put */
 399:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 }
 400:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 401:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 402:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         #if(I2C_MSTR_CY_SCBIP_V0)
 403:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             if(I2C_MSTR_mstrWrBufIndexTmp == I2C_MSTR_mstrWrBufSize)
 404:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 405:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 I2C_MSTR_SetTxInterruptMode(I2C_MSTR_INTR_TX_UNDERFLOW);
 406:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 407:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 408:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_ClearTxInterruptSource(I2C_MSTR_INTR_TX_ALL);
 409:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         #else
 410:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_ClearTxInterruptSource(I2C_MSTR_INTR_TX_EMPTY);
 917              		.loc 1 410 0
 918 020a 1020     		movs	r0, #16
 919 020c 354A     		ldr	r2, .L78+104
ARM GAS  e:\temp\ccq07yyZ.s 			page 50


 920              	.L72:
 921 020e 1060     		str	r0, [r2]
 922 0210 07E0     		b	.L18
 923              	.L76:
 411:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         #endif /* (I2C_MSTR_CY_SCBIP_V0) */
 412:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 413:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* INTR_TX_UNDERFLOW:
 414:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * TX direction: all data from the TX FIFO was transferred to the slave.
 415:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * The transaction needs to be completed.
 416:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         */
 417:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         else if(I2C_MSTR_CHECK_INTR_TX_MASKED(I2C_MSTR_INTR_TX_UNDERFLOW))
 924              		.loc 1 417 0
 925 0212 1268     		ldr	r2, [r2]
 926 0214 5206     		lsls	r2, r2, #25
 927 0216 04D5     		bpl	.L18
 418:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 419:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Update number of transferred bytes */
 420:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_mstrWrBufIndex = I2C_MSTR_mstrWrBufIndexTmp;
 928              		.loc 1 420 0
 929 0218 2C4A     		ldr	r2, .L78+80
 930 021a 1168     		ldr	r1, [r2]
 931              	.LVL28:
 932 021c 2D4A     		ldr	r2, .L78+88
 933              	.L73:
 934 021e 1160     		str	r1, [r2]
 935              	.LVL29:
 936 0220 01E0     		b	.L25
 937              	.LVL30:
 938              	.L18:
 421:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 422:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             endTransfer = I2C_MSTR_I2C_CMPLT_ANY_TRANSFER;
 423:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 424:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         else
 425:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 426:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Do nothing */
 427:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 428:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 429:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 430:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 431:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 if(0u != endTransfer) /* Complete transfer */
 939              		.loc 1 431 0
 940 0222 0029     		cmp	r1, #0
 941 0224 28D0     		beq	.L1
 942              	.LVL31:
 943              	.L25:
 432:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 433:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Clean-up master after reading: only in case of NACK */
 434:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_DISABLE_MASTER_AUTO_DATA_ACK;
 944              		.loc 1 434 0
 945 0226 2249     		ldr	r1, .L78+52
 946 0228 224A     		ldr	r2, .L78+56
 947 022a 0868     		ldr	r0, [r1]
 948 022c 0240     		ands	r2, r0
 949 022e 0A60     		str	r2, [r1]
 435:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 436:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Disable data processing interrupts: they have to be cleared before */
 437:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_SetRxInterruptMode(I2C_MSTR_NO_INTR_SOURCES);
ARM GAS  e:\temp\ccq07yyZ.s 			page 51


 950              		.loc 1 437 0
 951 0230 0022     		movs	r2, #0
 952 0232 2F49     		ldr	r1, .L78+116
 953 0234 0A60     		str	r2, [r1]
 438:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_SetTxInterruptMode(I2C_MSTR_NO_INTR_SOURCES);
 954              		.loc 1 438 0
 955 0236 1949     		ldr	r1, .L78+32
 956 0238 0A60     		str	r2, [r1]
 439:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 440:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     if(I2C_MSTR_CHECK_I2C_MODE_NO_STOP(I2C_MSTR_mstrControl))
 957              		.loc 1 440 0
 958 023a 2E4A     		ldr	r2, .L78+120
 959 023c 1278     		ldrb	r2, [r2]
 960 023e 9207     		lsls	r2, r2, #30
 961 0240 12D5     		bpl	.L77
 441:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 442:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* On-going transaction is suspended: the ReStart is generated by the API r
 443:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_mstrStatus |= (uint16) (I2C_MSTR_I2C_MSTAT_XFER_HALT |
 962              		.loc 1 443 0
 963 0242 0122     		movs	r2, #1
 444:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                                  I2C_MSTR_GET_I2C_MSTAT_CMPLT);
 964              		.loc 1 444 0
 965 0244 1978     		ldrb	r1, [r3]
 443:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                                  I2C_MSTR_GET_I2C_MSTAT_CMPLT);
 966              		.loc 1 443 0
 967 0246 1248     		ldr	r0, .L78+20
 968 0248 0A40     		ands	r2, r1
 969 024a 0A21     		movs	r1, #10
 970 024c 8A1A     		subs	r2, r1, r2
 971 024e 0188     		ldrh	r1, [r0]
 972 0250 0A43     		orrs	r2, r1
 973 0252 92B2     		uxth	r2, r2
 974 0254 0280     		strh	r2, [r0]
 445:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 446:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_state = I2C_MSTR_I2C_FSM_MSTR_HALT;
 975              		.loc 1 446 0
 976 0256 6022     		movs	r2, #96
 977              	.L74:
 978 0258 1A70     		strb	r2, [r3]
 979 025a 0DE0     		b	.L1
 980              	.LVL32:
 981              	.L11:
 447:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 448:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     else
 449:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 450:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Complete transaction: exclude the data processing state and generate Sto
 451:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * The completion status will be set after Stop generation.
 452:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * A special case is read: because NACK and Stop are generated by the comman
 453:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * Lost arbitration can occur during NACK generation when
 454:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * the other master is still reading from the slave.
 455:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         */
 456:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_I2C_MASTER_GENERATE_STOP;
 457:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 458:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 459:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
 460:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 461:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         } /* (I2C_MSTR_I2C_MASTER) */
ARM GAS  e:\temp\ccq07yyZ.s 			page 52


 462:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #endif
 463:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 464:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     } /* (I2C_MSTR_CHECK_I2C_FSM_MASTER) */
 465:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 466:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 467:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     /* FSM Slave */
 468:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     else if(I2C_MSTR_CHECK_I2C_FSM_SLAVE)
 982              		.loc 1 468 0
 983 025c 1B78     		ldrb	r3, [r3]
 984 025e 1342     		tst	r3, r2
 985 0260 0AD1     		bne	.L1
 469:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     {
 470:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #if(I2C_MSTR_I2C_SLAVE)
 471:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         {
 472:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             /* INTR_SLAVE_NACK:
 473:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * The master completes reading the slave: the appropriate flags have to be set.
 474:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * The TX FIFO is cleared after an overflow condition is set.
 475:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             */
 476:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             if(I2C_MSTR_CHECK_INTR_SLAVE_MASKED(I2C_MSTR_INTR_SLAVE_I2C_NACK))
 477:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
 478:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_ClearSlaveInterruptSource(I2C_MSTR_INTR_SLAVE_I2C_NACK);
 479:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 480:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* All entries that remain in TX FIFO are: FIFO Size + 1 (SHIFTER) */
 481:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 diffCount = (I2C_MSTR_GET_TX_FIFO_ENTRIES + I2C_MSTR_GET_TX_FIFO_SR_VALID);
 482:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 483:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 if(I2C_MSTR_slOverFlowCount > diffCount) /* Overflow */
 484:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 485:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_slStatus |= (uint8) I2C_MSTR_I2C_SSTAT_RD_OVFL;
 486:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 487:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 else /* No Overflow */
 488:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 489:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Roll-back temporary index */
 490:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_slRdBufIndexTmp -= (diffCount - I2C_MSTR_slOverFlowCount);
 491:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 492:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 493:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* Update slave of transferred bytes */
 494:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_slRdBufIndex = I2C_MSTR_slRdBufIndexTmp;
 495:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 496:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* Clean-up TX FIFO */
 497:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_SetTxInterruptMode(I2C_MSTR_NO_INTR_SOURCES);
 498:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_slOverFlowCount = 0u;
 499:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_CLEAR_TX_FIFO;
 500:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 501:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* Complete master reading */
 502:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_slStatus &= (uint8) ~I2C_MSTR_I2C_SSTAT_RD_BUSY;
 503:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_slStatus |= (uint8)  I2C_MSTR_I2C_SSTAT_RD_CMPLT;
 504:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_state     =  I2C_MSTR_I2C_FSM_IDLE;
 505:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 
 506:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             #ifdef I2C_MSTR_I2C_SLAVE_CMPLT_CALLBACK
 507:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* Read complete */
 508:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_I2C_SlaveCompleteCallback();
 509:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             #endif /* I2C_MSTR_I2C_SLAVE_CMPLT_CALLBACK */
 510:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
 511:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 512:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 513:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             /* INTR_SLAVE_I2C_WRITE_STOP:
 514:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * The master completes writing to the slave: the appropriate flags have to be set.
ARM GAS  e:\temp\ccq07yyZ.s 			page 53


 515:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * The RX FIFO contains 1-8 bytes from the previous transaction which needs to be read.
 516:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * There is a possibility that RX FIFO contains an address, it needs to leave it there.
 517:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             */
 518:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             if(I2C_MSTR_CHECK_INTR_SLAVE_MASKED(I2C_MSTR_INTR_SLAVE_I2C_WRITE_STOP))
 519:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
 520:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_ClearSlaveInterruptSource(I2C_MSTR_INTR_SLAVE_I2C_WRITE_STOP);
 521:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 522:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* Read bytes from RX FIFO when auto data ACK receive logic is enabled. Otherwise a
 523:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 * were already read from the RX FIFO except for address byte which has to stay here
 524:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 * I2C_ADDR_MATCH.
 525:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 */
 526:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 if (0u != (I2C_MSTR_I2C_CTRL_REG & I2C_MSTR_I2C_CTRL_S_READY_DATA_ACK))
 527:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 528:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     while(0u != I2C_MSTR_GET_RX_FIFO_ENTRIES)
 529:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 530:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         #if(I2C_MSTR_CHECK_I2C_ACCEPT_ADDRESS)
 531:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 532:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             if((1u == I2C_MSTR_GET_RX_FIFO_ENTRIES) &&
 533:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                (I2C_MSTR_CHECK_INTR_SLAVE_MASKED(I2C_MSTR_INTR_SLAVE_I2C_ADDR_MATCH
 534:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 535:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 break; /* Leave address in RX FIFO */
 536:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 537:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 538:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         #endif
 539:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 540:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Put data in component buffer */
 541:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_slWrBufPtr[I2C_MSTR_slWrBufIndex] = (uint8) I2C_MSTR_RX_FIFO_RD_RE
 542:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_slWrBufIndex++;
 543:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 544:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 545:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_DISABLE_SLAVE_AUTO_DATA;
 546:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 547:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 548:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 if(I2C_MSTR_CHECK_INTR_RX(I2C_MSTR_INTR_RX_OVERFLOW))
 549:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 550:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_slStatus |= (uint8) I2C_MSTR_I2C_SSTAT_WR_OVFL;
 551:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 552:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 553:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* Clears RX interrupt sources triggered on data receiving */
 554:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_SetRxInterruptMode(I2C_MSTR_NO_INTR_SOURCES);
 555:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_ClearRxInterruptSource(I2C_MSTR_INTR_RX_ALL);
 556:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 557:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* Complete master writing */
 558:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_slStatus &= (uint8) ~I2C_MSTR_I2C_SSTAT_WR_BUSY;
 559:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_slStatus |= (uint8)  I2C_MSTR_I2C_SSTAT_WR_CMPLT;
 560:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_state     =  I2C_MSTR_I2C_FSM_IDLE;
 561:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 562:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             #ifdef I2C_MSTR_I2C_SLAVE_CMPLT_CALLBACK
 563:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* Write complete */
 564:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_I2C_SlaveCompleteCallback();
 565:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             #endif /* I2C_MSTR_I2C_SLAVE_CMPLT_CALLBACK */
 566:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
 567:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 568:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 569:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             /* INTR_SLAVE_I2C_ADDR_MATCH or INTR_SLAVE_I2C_GENERAL:
 570:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * The address match or general call address event starts the slave operation:
 571:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * after leaving the TX or RX direction has to be chosen.
ARM GAS  e:\temp\ccq07yyZ.s 			page 54


 572:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * The wakeup interrupt must be cleared only after an address match is set.
 573:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             */
 574:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #if (I2C_MSTR_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 575:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             if (I2C_MSTR_CHECK_INTR_SLAVE_MASKED(I2C_MSTR_INTR_SLAVE_I2C_ADDR_MATCH |
 576:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                                          I2C_MSTR_INTR_SLAVE_I2C_GENERAL))
 577:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #else
 578:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             if (I2C_MSTR_CHECK_INTR_SLAVE_MASKED(I2C_MSTR_INTR_SLAVE_I2C_ADDR_MATCH))
 579:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #endif /* (I2C_MSTR_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 580:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
 581:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* Clear externally clocked address match interrupt source when internally clocked 
 582:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_ClearI2CExtClkInterruptSource(I2C_MSTR_INTR_I2C_EC_WAKE_UP);
 583:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 584:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 #if (I2C_MSTR_I2C_CUSTOM_ADDRESS_HANDLER)
 585:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 586:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     if (NULL != I2C_MSTR_customAddressHandler)
 587:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 588:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Call custom address handler */
 589:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         response = I2C_MSTR_customAddressHandler();
 590:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 591:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     else
 592:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 593:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Read address from the RX FIFO. If there is no address underflow triggers
 594:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         * component does not use that source. */
 595:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         (void) I2C_MSTR_RX_FIFO_RD_REG;
 596:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         response = I2C_MSTR_I2C_ACK_ADDR;
 597:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 598:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 599:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Clears RX sources after address was received in the RX FIFO */
 600:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_ClearRxInterruptSource(I2C_MSTR_INTR_RX_ALL);
 601:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 602:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 #endif
 603:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 604:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             #if (I2C_MSTR_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 605:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 if (response == I2C_MSTR_I2C_NAK_ADDR)
 606:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 607:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 #if (!I2C_MSTR_CY_SCBIP_V0)
 608:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Disable write stop interrupt source as it triggers after address was NACKed.
 609:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_DISABLE_INTR_SLAVE(I2C_MSTR_INTR_SLAVE_I2C_WRITE_STOP);
 610:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 #endif /* (!I2C_MSTR_CY_SCBIP_V0) */
 611:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 612:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Clear address match and stop history */
 613:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_ClearSlaveInterruptSource(I2C_MSTR_INTR_SLAVE_ALL);
 614:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 615:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* ACK the address byte */
 616:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_I2C_SLAVE_GENERATE_NACK;
 617:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 618:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 else
 619:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             #endif /* (I2C_MSTR_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 620:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 621:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     if(I2C_MSTR_CHECK_I2C_STATUS(I2C_MSTR_I2C_STATUS_S_READ))
 622:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* TX direction: master reads from slave */
 623:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 624:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_SetTxInterruptMode(I2C_MSTR_INTR_TX_EMPTY);
 625:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 626:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Set temporary index to address buffer clear from API */
 627:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_slRdBufIndexTmp = I2C_MSTR_slRdBufIndex;
 628:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
ARM GAS  e:\temp\ccq07yyZ.s 			page 55


 629:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Start master reading */
 630:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_slStatus |= (uint8) I2C_MSTR_I2C_SSTAT_RD_BUSY;
 631:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_state     = I2C_MSTR_I2C_FSM_SL_RD;
 632:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 633:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     else
 634:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* RX direction: master writes into slave */
 635:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 636:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Calculate available buffer size */
 637:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         diffCount = (I2C_MSTR_slWrBufSize - I2C_MSTR_slWrBufIndex);
 638:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 639:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     #if (I2C_MSTR_CY_SCBIP_V0)
 640:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         if(diffCount < I2C_MSTR_I2C_FIFO_SIZE)
 641:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Receive data: byte-by-byte */
 642:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 643:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_SetRxInterruptMode(I2C_MSTR_INTR_RX_NOT_EMPTY);
 644:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 645:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         else
 646:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Receive data: into RX FIFO */
 647:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 648:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             if(diffCount == I2C_MSTR_I2C_FIFO_SIZE)
 649:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 650:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 /* NACK when RX FIFO become FULL */
 651:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 I2C_MSTR_ENABLE_SLAVE_AUTO_DATA;
 652:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 653:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             else
 654:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 655:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 /* Stretch clock when RX FIFO becomes FULL */
 656:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 I2C_MSTR_ENABLE_SLAVE_AUTO_DATA_ACK;
 657:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 I2C_MSTR_SetRxInterruptMode(I2C_MSTR_INTR_RX_FULL);
 658:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 659:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 660:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 661:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     #else
 662:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         #if(I2C_MSTR_CHECK_I2C_ACCEPT_ADDRESS)
 663:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 664:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Enable RX.NOT_EMPTY interrupt source to receive byte by byte.
 665:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             * The byte by byte receive is always chosen for the case when an addres
 666:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             * in RX FIFO. Ticket ID#175559.
 667:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             */
 668:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_SetRxInterruptMode(I2C_MSTR_INTR_RX_NOT_EMPTY);
 669:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 670:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         #else
 671:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 672:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             if(diffCount < I2C_MSTR_I2C_FIFO_SIZE)
 673:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Receive data: byte-by-byte */
 674:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 675:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 I2C_MSTR_SetRxInterruptMode(I2C_MSTR_INTR_RX_NOT_EMPTY);
 676:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 677:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             else
 678:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Receive data: into RX FIFO */
 679:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             {
 680:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 if(diffCount == I2C_MSTR_I2C_FIFO_SIZE)
 681:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 {
 682:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     /* NACK when RX FIFO become FULL */
 683:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     I2C_MSTR_ENABLE_SLAVE_AUTO_DATA;
 684:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 }
 685:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 else
ARM GAS  e:\temp\ccq07yyZ.s 			page 56


 686:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 {
 687:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     /* Stretch clock when RX FIFO becomes FULL */
 688:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     I2C_MSTR_ENABLE_SLAVE_AUTO_DATA_ACK;
 689:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                     I2C_MSTR_SetRxInterruptMode(I2C_MSTR_INTR_RX_FULL);
 690:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                                 }
 691:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             }
 692:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 693:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         #endif
 694:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     #endif /* (I2C_MSTR_CY_SCBIP_V0) */
 695:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 696:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         /* Start master reading */
 697:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_slStatus |= (uint8) I2C_MSTR_I2C_SSTAT_WR_BUSY;
 698:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_state     = I2C_MSTR_I2C_FSM_SL_WR;
 699:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 700:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 701:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Clear address match and stop history */
 702:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_ClearSlaveInterruptSource(I2C_MSTR_INTR_SLAVE_ALL);
 703:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 704:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 #if (!I2C_MSTR_CY_SCBIP_V0)
 705:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Enable write stop interrupt source as it triggers after address was NACKed. 
 706:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_ENABLE_INTR_SLAVE(I2C_MSTR_INTR_SLAVE_I2C_WRITE_STOP);
 707:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 #endif /* (!I2C_MSTR_CY_SCBIP_V0) */
 708:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 709:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* ACK the address byte */
 710:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_I2C_SLAVE_GENERATE_ACK;
 711:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 712:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
 713:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 714:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             /* I2C_MSTR_INTR_RX_FULL:
 715:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * Get data from the RX FIFO and decide whether to ACK or NACK the following bytes
 716:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             */
 717:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             if(I2C_MSTR_CHECK_INTR_RX_MASKED(I2C_MSTR_INTR_RX_FULL))
 718:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
 719:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* Calculate available buffer size to take into account that RX FIFO is FULL */
 720:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 diffCount =  I2C_MSTR_slWrBufSize -
 721:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             (I2C_MSTR_slWrBufIndex + I2C_MSTR_I2C_FIFO_SIZE);
 722:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 723:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 if(diffCount > I2C_MSTR_I2C_FIFO_SIZE) /* Proceed transaction */
 724:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 725:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     diffCount   = I2C_MSTR_I2C_FIFO_SIZE;
 726:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 727:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 728:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 else /* End when FIFO becomes FULL again */
 729:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 730:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     endTransfer = I2C_MSTR_I2C_CMPLT_ANY_TRANSFER;
 731:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 732:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 733:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 for(; (0u != diffCount); diffCount--)
 734:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 735:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Put data in component buffer */
 736:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_slWrBufPtr[I2C_MSTR_slWrBufIndex] = (uint8) I2C_MSTR_RX_FIFO_RD_REG;
 737:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_slWrBufIndex++;
 738:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 739:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 740:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 if(0u != endTransfer) /* End transfer sending NACK */
 741:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 742:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_ENABLE_SLAVE_AUTO_DATA_NACK;
ARM GAS  e:\temp\ccq07yyZ.s 			page 57


 743:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 744:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* INTR_RX_FULL triggers earlier than INTR_SLAVE_I2C_STOP:
 745:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     * disable all RX interrupt sources.
 746:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     */
 747:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_SetRxInterruptMode(I2C_MSTR_NO_INTR_SOURCES);
 748:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 749:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 750:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_ClearRxInterruptSource(I2C_MSTR_INTR_RX_FULL);
 751:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
 752:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             /* I2C_MSTR_INTR_RX_NOT_EMPTY:
 753:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * The buffer size is less than 8: it requires processing in byte-by-byte mode.
 754:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             */
 755:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             else if(I2C_MSTR_CHECK_INTR_RX_MASKED(I2C_MSTR_INTR_RX_NOT_EMPTY))
 756:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
 757:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 diffCount = I2C_MSTR_RX_FIFO_RD_REG;
 758:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 759:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 if(I2C_MSTR_slWrBufIndex < I2C_MSTR_slWrBufSize)
 760:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 761:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_I2C_SLAVE_GENERATE_ACK;
 762:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 763:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Put data into component buffer */
 764:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_slWrBufPtr[I2C_MSTR_slWrBufIndex] = (uint8) diffCount;
 765:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_slWrBufIndex++;
 766:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 767:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 else /* Overflow: there is no space in write buffer */
 768:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 769:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_I2C_SLAVE_GENERATE_NACK;
 770:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 771:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     I2C_MSTR_slStatus |= (uint8) I2C_MSTR_I2C_SSTAT_WR_OVFL;
 772:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 773:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 774:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_ClearRxInterruptSource(I2C_MSTR_INTR_RX_NOT_EMPTY);
 775:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
 776:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             else
 777:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
 778:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 /* Does nothing */
 779:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
 780:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 781:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 782:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             /* I2C_MSTR_INTR_TX_EMPTY:
 783:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * The master reads the slave: provide data to read or 0xFF in the case of the end of th
 784:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * The overflow condition must be captured, but not set until the end of transaction.
 785:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             * There is a possibility of a false overflow due to TX FIFO utilization.
 786:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             */
 787:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             if(I2C_MSTR_CHECK_INTR_TX_MASKED(I2C_MSTR_INTR_TX_EMPTY))
 788:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             {
 789:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 while(I2C_MSTR_I2C_FIFO_SIZE != I2C_MSTR_GET_TX_FIFO_ENTRIES)
 790:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 {
 791:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Temporary slRdBufIndexTmp is used because the master can NACK the byte and
 792:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     * index roll-back is required in this case. The slRdBufIndex is updated at the 
 793:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     * of the read transfer.
 794:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     */
 795:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     if(I2C_MSTR_slRdBufIndexTmp < I2C_MSTR_slRdBufSize)
 796:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Data from buffer */
 797:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 798:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_TX_FIFO_WR_REG = (uint32) I2C_MSTR_slRdBufPtr[I2C_MSTR_slRdBufInde
 799:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_slRdBufIndexTmp++;
ARM GAS  e:\temp\ccq07yyZ.s 			page 58


 800:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 801:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     else
 802:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     /* Probably Overflow */
 803:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     {
 804:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         I2C_MSTR_TX_FIFO_WR_REG = I2C_MSTR_I2C_SLAVE_OVFL_RETURN;
 805:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 806:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         if(I2C_MSTR_slOverFlowCount <= I2C_MSTR_I2C_TX_OVERFLOW_COUNT)
 807:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         {
 808:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             /* Get counter in range of overflow. */
 809:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                             I2C_MSTR_slOverFlowCount++;
 810:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                         }
 811:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 812:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 }
 813:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 814:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                 I2C_MSTR_ClearTxInterruptSource(I2C_MSTR_INTR_TX_EMPTY);
 815:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             }
 816:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 817:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         }  /* (I2C_MSTR_I2C_SLAVE) */
 818:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #endif
 819:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     }
 820:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 821:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 822:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     /* FSM EXIT:
 823:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     * Slave:  INTR_SLAVE_I2C_BUS_ERROR, INTR_SLAVE_I2C_ARB_LOST
 824:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     * Master: INTR_MASTER_I2C_BUS_ERROR, INTR_MASTER_I2C_ARB_LOST.
 825:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     */
 826:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     else
 827:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     {
 828:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         I2C_MSTR_I2CFwBlockReset();
 986              		.loc 1 828 0
 987 0262 FFF7FEFF 		bl	I2C_MSTR_I2CFwBlockReset
 988              	.LVL33:
 829:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         
 830:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     #ifdef I2C_MSTR_I2C_SLAVE_CMPLT_CALLBACK
 831:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #if(I2C_MSTR_I2C_SLAVE)
 832:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         {
 833:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             /* Error condition: read or write complete is set */
 834:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****             I2C_MSTR_I2C_SlaveCompleteCallback();
 835:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         }
 836:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****         #endif
 837:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     #endif /* I2C_MSTR_I2C_SLAVE_CMPLT_CALLBACK */
 838:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     }
 839:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 840:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** #ifdef I2C_MSTR_I2C_ISR_EXIT_CALLBACK
 841:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****     I2C_MSTR_I2C_ISR_ExitCallback();
 842:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** #endif /* I2C_MSTR_I2C_ISR_EXIT_CALLBACK */
 843:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** 
 844:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c **** }
 989              		.loc 1 844 0
 990 0266 07E0     		b	.L1
 991              	.L77:
 456:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 992              		.loc 1 456 0
 993 0268 234B     		ldr	r3, .L78+124
 994 026a 1A68     		ldr	r2, [r3]
 995 026c 1823     		movs	r3, #24
 996 026e 9206     		lsls	r2, r2, #26
ARM GAS  e:\temp\ccq07yyZ.s 			page 59


 997 0270 00D4     		bmi	.L32
 998 0272 083B     		subs	r3, r3, #8
 999              	.L32:
 456:Generated_Source\PSoC4/I2C_MSTR_I2C_INT.c ****                     }
 1000              		.loc 1 456 0 is_stmt 0 discriminator 4
 1001 0274 124A     		ldr	r2, .L78+68
 1002 0276 1360     		str	r3, [r2]
 1003              	.L1:
 1004              		.loc 1 844 0 is_stmt 1
 1005              		@ sp needed
 1006 0278 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1007              	.L79:
 1008 027a C046     		.align	2
 1009              	.L78:
 1010 027c 00000000 		.word	I2C_MSTR_customIntrHandler
 1011 0280 8C0E0640 		.word	1074138764
 1012 0284 880E0640 		.word	1074138760
 1013 0288 00000000 		.word	I2C_MSTR_state
 1014 028c 0C0F0640 		.word	1074138892
 1015 0290 00000000 		.word	I2C_MSTR_mstrStatus
 1016 0294 000F0640 		.word	1074138880
 1017 0298 00000000 		.word	I2C_MSTR_mstrWrBufSize
 1018 029c 880F0640 		.word	1074139016
 1019 02a0 CC0F0640 		.word	1074139084
 1020 02a4 00000000 		.word	I2C_MSTR_mstrRdBufSize
 1021 02a8 00000000 		.word	I2C_MSTR_mstrRdBufIndex
 1022 02ac 08030640 		.word	1074135816
 1023 02b0 60000640 		.word	1074135136
 1024 02b4 FFFEFFFF 		.word	-257
 1025 02b8 00000000 		.word	I2C_MSTR_mstrRdBufPtr
 1026 02bc 40030640 		.word	1074135872
 1027 02c0 68000640 		.word	1074135144
 1028 02c4 ED0F0000 		.word	4077
 1029 02c8 C00F0640 		.word	1074139072
 1030 02cc 00000000 		.word	I2C_MSTR_mstrWrBufIndexTmp
 1031 02d0 08020640 		.word	1074135560
 1032 02d4 00000000 		.word	I2C_MSTR_mstrWrBufIndex
 1033 02d8 04020640 		.word	1074135556
 1034 02dc FFFFFEFF 		.word	-65537
 1035 02e0 8C0F0640 		.word	1074139020
 1036 02e4 800F0640 		.word	1074139008
 1037 02e8 00000000 		.word	I2C_MSTR_mstrWrBufPtr
 1038 02ec 40020640 		.word	1074135616
 1039 02f0 C80F0640 		.word	1074139080
 1040 02f4 00000000 		.word	I2C_MSTR_mstrControl
 1041 02f8 64000640 		.word	1074135140
 1042              		.cfi_endproc
 1043              	.LFE0:
 1044              		.size	I2C_MSTR_I2C_ISR, .-I2C_MSTR_I2C_ISR
 1045              		.text
 1046              	.Letext0:
 1047              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 1048              		.file 3 "Generated_Source\\PSoC4\\I2C_MSTR_PVT.h"
 1049              		.file 4 "Generated_Source\\PSoC4\\I2C_MSTR_I2C_PVT.h"
 1050              		.section	.debug_info,"",%progbits
 1051              	.Ldebug_info0:
 1052 0000 A4010000 		.4byte	0x1a4
ARM GAS  e:\temp\ccq07yyZ.s 			page 60


 1053 0004 0400     		.2byte	0x4
 1054 0006 00000000 		.4byte	.Ldebug_abbrev0
 1055 000a 04       		.byte	0x4
 1056 000b 01       		.uleb128 0x1
 1057 000c D1010000 		.4byte	.LASF32
 1058 0010 0C       		.byte	0xc
 1059 0011 3B000000 		.4byte	.LASF33
 1060 0015 65000000 		.4byte	.LASF34
 1061 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1062 001d 00000000 		.4byte	0
 1063 0021 00000000 		.4byte	.Ldebug_line0
 1064 0025 02       		.uleb128 0x2
 1065 0026 01       		.byte	0x1
 1066 0027 06       		.byte	0x6
 1067 0028 08030000 		.4byte	.LASF0
 1068 002c 02       		.uleb128 0x2
 1069 002d 01       		.byte	0x1
 1070 002e 08       		.byte	0x8
 1071 002f 16010000 		.4byte	.LASF1
 1072 0033 02       		.uleb128 0x2
 1073 0034 02       		.byte	0x2
 1074 0035 05       		.byte	0x5
 1075 0036 CE020000 		.4byte	.LASF2
 1076 003a 02       		.uleb128 0x2
 1077 003b 02       		.byte	0x2
 1078 003c 07       		.byte	0x7
 1079 003d 06000000 		.4byte	.LASF3
 1080 0041 02       		.uleb128 0x2
 1081 0042 04       		.byte	0x4
 1082 0043 05       		.byte	0x5
 1083 0044 F3020000 		.4byte	.LASF4
 1084 0048 02       		.uleb128 0x2
 1085 0049 04       		.byte	0x4
 1086 004a 07       		.byte	0x7
 1087 004b 24010000 		.4byte	.LASF5
 1088 004f 02       		.uleb128 0x2
 1089 0050 08       		.byte	0x8
 1090 0051 05       		.byte	0x5
 1091 0052 BB020000 		.4byte	.LASF6
 1092 0056 02       		.uleb128 0x2
 1093 0057 08       		.byte	0x8
 1094 0058 07       		.byte	0x7
 1095 0059 BA010000 		.4byte	.LASF7
 1096 005d 03       		.uleb128 0x3
 1097 005e 04       		.byte	0x4
 1098 005f 05       		.byte	0x5
 1099 0060 696E7400 		.ascii	"int\000"
 1100 0064 02       		.uleb128 0x2
 1101 0065 04       		.byte	0x4
 1102 0066 07       		.byte	0x7
 1103 0067 AD010000 		.4byte	.LASF8
 1104 006b 04       		.uleb128 0x4
 1105 006c 40010000 		.4byte	.LASF9
 1106 0070 02       		.byte	0x2
 1107 0071 E401     		.2byte	0x1e4
 1108 0073 2C000000 		.4byte	0x2c
 1109 0077 04       		.uleb128 0x4
ARM GAS  e:\temp\ccq07yyZ.s 			page 61


 1110 0078 9F010000 		.4byte	.LASF10
 1111 007c 02       		.byte	0x2
 1112 007d E501     		.2byte	0x1e5
 1113 007f 3A000000 		.4byte	0x3a
 1114 0083 04       		.uleb128 0x4
 1115 0084 A6010000 		.4byte	.LASF11
 1116 0088 02       		.byte	0x2
 1117 0089 E601     		.2byte	0x1e6
 1118 008b 48000000 		.4byte	0x48
 1119 008f 02       		.uleb128 0x2
 1120 0090 04       		.byte	0x4
 1121 0091 04       		.byte	0x4
 1122 0092 E0000000 		.4byte	.LASF12
 1123 0096 02       		.uleb128 0x2
 1124 0097 08       		.byte	0x8
 1125 0098 04       		.byte	0x4
 1126 0099 5B010000 		.4byte	.LASF13
 1127 009d 02       		.uleb128 0x2
 1128 009e 01       		.byte	0x1
 1129 009f 08       		.byte	0x8
 1130 00a0 C9020000 		.4byte	.LASF14
 1131 00a4 05       		.uleb128 0x5
 1132 00a5 6B000000 		.4byte	0x6b
 1133 00a9 05       		.uleb128 0x5
 1134 00aa 77000000 		.4byte	0x77
 1135 00ae 04       		.uleb128 0x4
 1136 00af 00000000 		.4byte	.LASF15
 1137 00b3 02       		.byte	0x2
 1138 00b4 9002     		.2byte	0x290
 1139 00b6 BA000000 		.4byte	0xba
 1140 00ba 05       		.uleb128 0x5
 1141 00bb 83000000 		.4byte	0x83
 1142 00bf 04       		.uleb128 0x4
 1143 00c0 8D020000 		.4byte	.LASF16
 1144 00c4 02       		.byte	0x2
 1145 00c5 A002     		.2byte	0x2a0
 1146 00c7 CB000000 		.4byte	0xcb
 1147 00cb 06       		.uleb128 0x6
 1148 00cc 04       		.byte	0x4
 1149 00cd D1000000 		.4byte	0xd1
 1150 00d1 07       		.uleb128 0x7
 1151 00d2 02       		.uleb128 0x2
 1152 00d3 08       		.byte	0x8
 1153 00d4 04       		.byte	0x4
 1154 00d5 FC020000 		.4byte	.LASF17
 1155 00d9 02       		.uleb128 0x2
 1156 00da 04       		.byte	0x4
 1157 00db 07       		.byte	0x7
 1158 00dc B2020000 		.4byte	.LASF18
 1159 00e0 08       		.uleb128 0x8
 1160 00e1 2B030000 		.4byte	.LASF35
 1161 00e5 01       		.byte	0x1
 1162 00e6 1F       		.byte	0x1f
 1163 00e7 00000000 		.4byte	.LFB0
 1164 00eb FC020000 		.4byte	.LFE0-.LFB0
 1165 00ef 01       		.uleb128 0x1
 1166 00f0 9C       		.byte	0x9c
ARM GAS  e:\temp\ccq07yyZ.s 			page 62


 1167 00f1 1D010000 		.4byte	0x11d
 1168 00f5 09       		.uleb128 0x9
 1169 00f6 36010000 		.4byte	.LASF19
 1170 00fa 01       		.byte	0x1
 1171 00fb 21       		.byte	0x21
 1172 00fc 83000000 		.4byte	0x83
 1173 0100 00000000 		.4byte	.LLST0
 1174 0104 09       		.uleb128 0x9
 1175 0105 19000000 		.4byte	.LASF20
 1176 0109 01       		.byte	0x1
 1177 010a 22       		.byte	0x22
 1178 010b 83000000 		.4byte	0x83
 1179 010f 2A000000 		.4byte	.LLST1
 1180 0113 0A       		.uleb128 0xa
 1181 0114 66020000 		.4byte	.LVL33
 1182 0118 9C010000 		.4byte	0x19c
 1183 011c 00       		.byte	0
 1184 011d 0B       		.uleb128 0xb
 1185 011e D8020000 		.4byte	.LASF21
 1186 0122 03       		.byte	0x3
 1187 0123 3B       		.byte	0x3b
 1188 0124 BF000000 		.4byte	0xbf
 1189 0128 0B       		.uleb128 0xb
 1190 0129 90010000 		.4byte	.LASF22
 1191 012d 04       		.byte	0x4
 1192 012e 1E       		.byte	0x1e
 1193 012f A4000000 		.4byte	0xa4
 1194 0133 0B       		.uleb128 0xb
 1195 0134 3C030000 		.4byte	.LASF23
 1196 0138 04       		.byte	0x4
 1197 0139 31       		.byte	0x31
 1198 013a A9000000 		.4byte	0xa9
 1199 013e 0B       		.uleb128 0xb
 1200 013f 46010000 		.4byte	.LASF24
 1201 0143 04       		.byte	0x4
 1202 0144 32       		.byte	0x32
 1203 0145 A4000000 		.4byte	0xa4
 1204 0149 0B       		.uleb128 0xb
 1205 014a 62010000 		.4byte	.LASF25
 1206 014e 04       		.byte	0x4
 1207 014f 35       		.byte	0x35
 1208 0150 54010000 		.4byte	0x154
 1209 0154 06       		.uleb128 0x6
 1210 0155 04       		.byte	0x4
 1211 0156 A4000000 		.4byte	0xa4
 1212 015a 0B       		.uleb128 0xb
 1213 015b 14030000 		.4byte	.LASF26
 1214 015f 04       		.byte	0x4
 1215 0160 36       		.byte	0x36
 1216 0161 BA000000 		.4byte	0xba
 1217 0165 0B       		.uleb128 0xb
 1218 0166 78010000 		.4byte	.LASF27
 1219 016a 04       		.byte	0x4
 1220 016b 37       		.byte	0x37
 1221 016c BA000000 		.4byte	0xba
 1222 0170 0B       		.uleb128 0xb
 1223 0171 25000000 		.4byte	.LASF28
ARM GAS  e:\temp\ccq07yyZ.s 			page 63


 1224 0175 04       		.byte	0x4
 1225 0176 3A       		.byte	0x3a
 1226 0177 54010000 		.4byte	0x154
 1227 017b 0B       		.uleb128 0xb
 1228 017c FF000000 		.4byte	.LASF29
 1229 0180 04       		.byte	0x4
 1230 0181 3B       		.byte	0x3b
 1231 0182 BA000000 		.4byte	0xba
 1232 0186 0B       		.uleb128 0xb
 1233 0187 9A020000 		.4byte	.LASF30
 1234 018b 04       		.byte	0x4
 1235 018c 3C       		.byte	0x3c
 1236 018d BA000000 		.4byte	0xba
 1237 0191 0B       		.uleb128 0xb
 1238 0192 50030000 		.4byte	.LASF31
 1239 0196 04       		.byte	0x4
 1240 0197 3D       		.byte	0x3d
 1241 0198 BA000000 		.4byte	0xba
 1242 019c 0C       		.uleb128 0xc
 1243 019d E6000000 		.4byte	.LASF36
 1244 01a1 E6000000 		.4byte	.LASF36
 1245 01a5 04       		.byte	0x4
 1246 01a6 4D       		.byte	0x4d
 1247 01a7 00       		.byte	0
 1248              		.section	.debug_abbrev,"",%progbits
 1249              	.Ldebug_abbrev0:
 1250 0000 01       		.uleb128 0x1
 1251 0001 11       		.uleb128 0x11
 1252 0002 01       		.byte	0x1
 1253 0003 25       		.uleb128 0x25
 1254 0004 0E       		.uleb128 0xe
 1255 0005 13       		.uleb128 0x13
 1256 0006 0B       		.uleb128 0xb
 1257 0007 03       		.uleb128 0x3
 1258 0008 0E       		.uleb128 0xe
 1259 0009 1B       		.uleb128 0x1b
 1260 000a 0E       		.uleb128 0xe
 1261 000b 55       		.uleb128 0x55
 1262 000c 17       		.uleb128 0x17
 1263 000d 11       		.uleb128 0x11
 1264 000e 01       		.uleb128 0x1
 1265 000f 10       		.uleb128 0x10
 1266 0010 17       		.uleb128 0x17
 1267 0011 00       		.byte	0
 1268 0012 00       		.byte	0
 1269 0013 02       		.uleb128 0x2
 1270 0014 24       		.uleb128 0x24
 1271 0015 00       		.byte	0
 1272 0016 0B       		.uleb128 0xb
 1273 0017 0B       		.uleb128 0xb
 1274 0018 3E       		.uleb128 0x3e
 1275 0019 0B       		.uleb128 0xb
 1276 001a 03       		.uleb128 0x3
 1277 001b 0E       		.uleb128 0xe
 1278 001c 00       		.byte	0
 1279 001d 00       		.byte	0
 1280 001e 03       		.uleb128 0x3
ARM GAS  e:\temp\ccq07yyZ.s 			page 64


 1281 001f 24       		.uleb128 0x24
 1282 0020 00       		.byte	0
 1283 0021 0B       		.uleb128 0xb
 1284 0022 0B       		.uleb128 0xb
 1285 0023 3E       		.uleb128 0x3e
 1286 0024 0B       		.uleb128 0xb
 1287 0025 03       		.uleb128 0x3
 1288 0026 08       		.uleb128 0x8
 1289 0027 00       		.byte	0
 1290 0028 00       		.byte	0
 1291 0029 04       		.uleb128 0x4
 1292 002a 16       		.uleb128 0x16
 1293 002b 00       		.byte	0
 1294 002c 03       		.uleb128 0x3
 1295 002d 0E       		.uleb128 0xe
 1296 002e 3A       		.uleb128 0x3a
 1297 002f 0B       		.uleb128 0xb
 1298 0030 3B       		.uleb128 0x3b
 1299 0031 05       		.uleb128 0x5
 1300 0032 49       		.uleb128 0x49
 1301 0033 13       		.uleb128 0x13
 1302 0034 00       		.byte	0
 1303 0035 00       		.byte	0
 1304 0036 05       		.uleb128 0x5
 1305 0037 35       		.uleb128 0x35
 1306 0038 00       		.byte	0
 1307 0039 49       		.uleb128 0x49
 1308 003a 13       		.uleb128 0x13
 1309 003b 00       		.byte	0
 1310 003c 00       		.byte	0
 1311 003d 06       		.uleb128 0x6
 1312 003e 0F       		.uleb128 0xf
 1313 003f 00       		.byte	0
 1314 0040 0B       		.uleb128 0xb
 1315 0041 0B       		.uleb128 0xb
 1316 0042 49       		.uleb128 0x49
 1317 0043 13       		.uleb128 0x13
 1318 0044 00       		.byte	0
 1319 0045 00       		.byte	0
 1320 0046 07       		.uleb128 0x7
 1321 0047 15       		.uleb128 0x15
 1322 0048 00       		.byte	0
 1323 0049 27       		.uleb128 0x27
 1324 004a 19       		.uleb128 0x19
 1325 004b 00       		.byte	0
 1326 004c 00       		.byte	0
 1327 004d 08       		.uleb128 0x8
 1328 004e 2E       		.uleb128 0x2e
 1329 004f 01       		.byte	0x1
 1330 0050 3F       		.uleb128 0x3f
 1331 0051 19       		.uleb128 0x19
 1332 0052 03       		.uleb128 0x3
 1333 0053 0E       		.uleb128 0xe
 1334 0054 3A       		.uleb128 0x3a
 1335 0055 0B       		.uleb128 0xb
 1336 0056 3B       		.uleb128 0x3b
 1337 0057 0B       		.uleb128 0xb
ARM GAS  e:\temp\ccq07yyZ.s 			page 65


 1338 0058 27       		.uleb128 0x27
 1339 0059 19       		.uleb128 0x19
 1340 005a 11       		.uleb128 0x11
 1341 005b 01       		.uleb128 0x1
 1342 005c 12       		.uleb128 0x12
 1343 005d 06       		.uleb128 0x6
 1344 005e 40       		.uleb128 0x40
 1345 005f 18       		.uleb128 0x18
 1346 0060 9642     		.uleb128 0x2116
 1347 0062 19       		.uleb128 0x19
 1348 0063 01       		.uleb128 0x1
 1349 0064 13       		.uleb128 0x13
 1350 0065 00       		.byte	0
 1351 0066 00       		.byte	0
 1352 0067 09       		.uleb128 0x9
 1353 0068 34       		.uleb128 0x34
 1354 0069 00       		.byte	0
 1355 006a 03       		.uleb128 0x3
 1356 006b 0E       		.uleb128 0xe
 1357 006c 3A       		.uleb128 0x3a
 1358 006d 0B       		.uleb128 0xb
 1359 006e 3B       		.uleb128 0x3b
 1360 006f 0B       		.uleb128 0xb
 1361 0070 49       		.uleb128 0x49
 1362 0071 13       		.uleb128 0x13
 1363 0072 02       		.uleb128 0x2
 1364 0073 17       		.uleb128 0x17
 1365 0074 00       		.byte	0
 1366 0075 00       		.byte	0
 1367 0076 0A       		.uleb128 0xa
 1368 0077 898201   		.uleb128 0x4109
 1369 007a 00       		.byte	0
 1370 007b 11       		.uleb128 0x11
 1371 007c 01       		.uleb128 0x1
 1372 007d 31       		.uleb128 0x31
 1373 007e 13       		.uleb128 0x13
 1374 007f 00       		.byte	0
 1375 0080 00       		.byte	0
 1376 0081 0B       		.uleb128 0xb
 1377 0082 34       		.uleb128 0x34
 1378 0083 00       		.byte	0
 1379 0084 03       		.uleb128 0x3
 1380 0085 0E       		.uleb128 0xe
 1381 0086 3A       		.uleb128 0x3a
 1382 0087 0B       		.uleb128 0xb
 1383 0088 3B       		.uleb128 0x3b
 1384 0089 0B       		.uleb128 0xb
 1385 008a 49       		.uleb128 0x49
 1386 008b 13       		.uleb128 0x13
 1387 008c 3F       		.uleb128 0x3f
 1388 008d 19       		.uleb128 0x19
 1389 008e 3C       		.uleb128 0x3c
 1390 008f 19       		.uleb128 0x19
 1391 0090 00       		.byte	0
 1392 0091 00       		.byte	0
 1393 0092 0C       		.uleb128 0xc
 1394 0093 2E       		.uleb128 0x2e
ARM GAS  e:\temp\ccq07yyZ.s 			page 66


 1395 0094 00       		.byte	0
 1396 0095 3F       		.uleb128 0x3f
 1397 0096 19       		.uleb128 0x19
 1398 0097 3C       		.uleb128 0x3c
 1399 0098 19       		.uleb128 0x19
 1400 0099 6E       		.uleb128 0x6e
 1401 009a 0E       		.uleb128 0xe
 1402 009b 03       		.uleb128 0x3
 1403 009c 0E       		.uleb128 0xe
 1404 009d 3A       		.uleb128 0x3a
 1405 009e 0B       		.uleb128 0xb
 1406 009f 3B       		.uleb128 0x3b
 1407 00a0 0B       		.uleb128 0xb
 1408 00a1 00       		.byte	0
 1409 00a2 00       		.byte	0
 1410 00a3 00       		.byte	0
 1411              		.section	.debug_loc,"",%progbits
 1412              	.Ldebug_loc0:
 1413              	.LLST0:
 1414 0000 08010000 		.4byte	.LVL17
 1415 0004 14010000 		.4byte	.LVL19
 1416 0008 0100     		.2byte	0x1
 1417 000a 52       		.byte	0x52
 1418 000b 1A010000 		.4byte	.LVL20
 1419 000f 1C010000 		.4byte	.LVL21
 1420 0013 0200     		.2byte	0x2
 1421 0015 38       		.byte	0x38
 1422 0016 9F       		.byte	0x9f
 1423 0017 1E010000 		.4byte	.LVL22
 1424 001b 3C010000 		.4byte	.LVL24
 1425 001f 0100     		.2byte	0x1
 1426 0021 52       		.byte	0x52
 1427 0022 00000000 		.4byte	0
 1428 0026 00000000 		.4byte	0
 1429              	.LLST1:
 1430 002a 00000000 		.4byte	.LVL0
 1431 002e 22000000 		.4byte	.LVL2
 1432 0032 0200     		.2byte	0x2
 1433 0034 30       		.byte	0x30
 1434 0035 9F       		.byte	0x9f
 1435 0036 26000000 		.4byte	.LVL3
 1436 003a 3C000000 		.4byte	.LVL4
 1437 003e 0200     		.2byte	0x2
 1438 0040 30       		.byte	0x30
 1439 0041 9F       		.byte	0x9f
 1440 0042 3C000000 		.4byte	.LVL4
 1441 0046 3E000000 		.4byte	.LVL5
 1442 004a 0200     		.2byte	0x2
 1443 004c 31       		.byte	0x31
 1444 004d 9F       		.byte	0x9f
 1445 004e 3E000000 		.4byte	.LVL5
 1446 0052 48000000 		.4byte	.LVL6
 1447 0056 0100     		.2byte	0x1
 1448 0058 51       		.byte	0x51
 1449 0059 50000000 		.4byte	.LVL7
 1450 005d 52000000 		.4byte	.LVL8
 1451 0061 0200     		.2byte	0x2
ARM GAS  e:\temp\ccq07yyZ.s 			page 67


 1452 0063 31       		.byte	0x31
 1453 0064 9F       		.byte	0x9f
 1454 0065 52000000 		.4byte	.LVL8
 1455 0069 56000000 		.4byte	.LVL9
 1456 006d 0100     		.2byte	0x1
 1457 006f 51       		.byte	0x51
 1458 0070 6E000000 		.4byte	.LVL10
 1459 0074 82000000 		.4byte	.LVL11
 1460 0078 0100     		.2byte	0x1
 1461 007a 51       		.byte	0x51
 1462 007b 9A000000 		.4byte	.LVL12
 1463 007f AC000000 		.4byte	.LVL13
 1464 0083 0100     		.2byte	0x1
 1465 0085 51       		.byte	0x51
 1466 0086 B8000000 		.4byte	.LVL14
 1467 008a BC000000 		.4byte	.LVL15
 1468 008e 0200     		.2byte	0x2
 1469 0090 31       		.byte	0x31
 1470 0091 9F       		.byte	0x9f
 1471 0092 BC000000 		.4byte	.LVL15
 1472 0096 12010000 		.4byte	.LVL18
 1473 009a 0100     		.2byte	0x1
 1474 009c 51       		.byte	0x51
 1475 009d 1A010000 		.4byte	.LVL20
 1476 00a1 1C010000 		.4byte	.LVL21
 1477 00a5 0200     		.2byte	0x2
 1478 00a7 31       		.byte	0x31
 1479 00a8 9F       		.byte	0x9f
 1480 00a9 1E010000 		.4byte	.LVL22
 1481 00ad 7C010000 		.4byte	.LVL26
 1482 00b1 0100     		.2byte	0x1
 1483 00b3 51       		.byte	0x51
 1484 00b4 BC010000 		.4byte	.LVL27
 1485 00b8 1C020000 		.4byte	.LVL28
 1486 00bc 0100     		.2byte	0x1
 1487 00be 51       		.byte	0x51
 1488 00bf 20020000 		.4byte	.LVL29
 1489 00c3 22020000 		.4byte	.LVL30
 1490 00c7 0200     		.2byte	0x2
 1491 00c9 31       		.byte	0x31
 1492 00ca 9F       		.byte	0x9f
 1493 00cb 22020000 		.4byte	.LVL30
 1494 00cf 26020000 		.4byte	.LVL31
 1495 00d3 0100     		.2byte	0x1
 1496 00d5 51       		.byte	0x51
 1497 00d6 5C020000 		.4byte	.LVL32
 1498 00da 65020000 		.4byte	.LVL33-1
 1499 00de 0100     		.2byte	0x1
 1500 00e0 51       		.byte	0x51
 1501 00e1 00000000 		.4byte	0
 1502 00e5 00000000 		.4byte	0
 1503              		.section	.debug_aranges,"",%progbits
 1504 0000 1C000000 		.4byte	0x1c
 1505 0004 0200     		.2byte	0x2
 1506 0006 00000000 		.4byte	.Ldebug_info0
 1507 000a 04       		.byte	0x4
 1508 000b 00       		.byte	0
ARM GAS  e:\temp\ccq07yyZ.s 			page 68


 1509 000c 0000     		.2byte	0
 1510 000e 0000     		.2byte	0
 1511 0010 00000000 		.4byte	.LFB0
 1512 0014 FC020000 		.4byte	.LFE0-.LFB0
 1513 0018 00000000 		.4byte	0
 1514 001c 00000000 		.4byte	0
 1515              		.section	.debug_ranges,"",%progbits
 1516              	.Ldebug_ranges0:
 1517 0000 00000000 		.4byte	.LFB0
 1518 0004 FC020000 		.4byte	.LFE0
 1519 0008 00000000 		.4byte	0
 1520 000c 00000000 		.4byte	0
 1521              		.section	.debug_line,"",%progbits
 1522              	.Ldebug_line0:
 1523 0000 53010000 		.section	.debug_str,"MS",%progbits,1
 1523      02007500 
 1523      00000201 
 1523      FB0E0D00 
 1523      01010101 
 1524              	.LASF15:
 1525 0000 72656733 		.ascii	"reg32\000"
 1525      3200
 1526              	.LASF3:
 1527 0006 73686F72 		.ascii	"short unsigned int\000"
 1527      7420756E 
 1527      7369676E 
 1527      65642069 
 1527      6E7400
 1528              	.LASF20:
 1529 0019 656E6454 		.ascii	"endTransfer\000"
 1529      72616E73 
 1529      66657200 
 1530              	.LASF28:
 1531 0025 4932435F 		.ascii	"I2C_MSTR_mstrWrBufPtr\000"
 1531      4D535452 
 1531      5F6D7374 
 1531      72577242 
 1531      75665074 
 1532              	.LASF33:
 1533 003b 47656E65 		.ascii	"Generated_Source\\PSoC4\\I2C_MSTR_I2C_INT.c\000"
 1533      72617465 
 1533      645F536F 
 1533      75726365 
 1533      5C50536F 
 1534              	.LASF34:
 1535 0065 433A5C55 		.ascii	"C:\\Users\\Admin\\Desktop\\_FIRMWARE\\DBARLite\\CYP"
 1535      73657273 
 1535      5C41646D 
 1535      696E5C44 
 1535      65736B74 
 1536 0092 44353232 		.ascii	"D5225\\CYPD5225-96BZXI_notebook\\CYPD5225-96BZXI_no"
 1536      355C4359 
 1536      50443532 
 1536      32352D39 
 1536      36425A58 
 1537 00c3 7465626F 		.ascii	"tebook.cydsn\\backup_fw.cydsn\000"
 1537      6F6B2E63 
ARM GAS  e:\temp\ccq07yyZ.s 			page 69


 1537      7964736E 
 1537      5C626163 
 1537      6B75705F 
 1538              	.LASF12:
 1539 00e0 666C6F61 		.ascii	"float\000"
 1539      7400
 1540              	.LASF36:
 1541 00e6 4932435F 		.ascii	"I2C_MSTR_I2CFwBlockReset\000"
 1541      4D535452 
 1541      5F493243 
 1541      4677426C 
 1541      6F636B52 
 1542              	.LASF29:
 1543 00ff 4932435F 		.ascii	"I2C_MSTR_mstrWrBufSize\000"
 1543      4D535452 
 1543      5F6D7374 
 1543      72577242 
 1543      75665369 
 1544              	.LASF1:
 1545 0116 756E7369 		.ascii	"unsigned char\000"
 1545      676E6564 
 1545      20636861 
 1545      7200
 1546              	.LASF5:
 1547 0124 6C6F6E67 		.ascii	"long unsigned int\000"
 1547      20756E73 
 1547      69676E65 
 1547      6420696E 
 1547      7400
 1548              	.LASF19:
 1549 0136 64696666 		.ascii	"diffCount\000"
 1549      436F756E 
 1549      7400
 1550              	.LASF9:
 1551 0140 75696E74 		.ascii	"uint8\000"
 1551      3800
 1552              	.LASF24:
 1553 0146 4932435F 		.ascii	"I2C_MSTR_mstrControl\000"
 1553      4D535452 
 1553      5F6D7374 
 1553      72436F6E 
 1553      74726F6C 
 1554              	.LASF13:
 1555 015b 646F7562 		.ascii	"double\000"
 1555      6C6500
 1556              	.LASF25:
 1557 0162 4932435F 		.ascii	"I2C_MSTR_mstrRdBufPtr\000"
 1557      4D535452 
 1557      5F6D7374 
 1557      72526442 
 1557      75665074 
 1558              	.LASF27:
 1559 0178 4932435F 		.ascii	"I2C_MSTR_mstrRdBufIndex\000"
 1559      4D535452 
 1559      5F6D7374 
 1559      72526442 
 1559      7566496E 
ARM GAS  e:\temp\ccq07yyZ.s 			page 70


 1560              	.LASF22:
 1561 0190 4932435F 		.ascii	"I2C_MSTR_state\000"
 1561      4D535452 
 1561      5F737461 
 1561      746500
 1562              	.LASF10:
 1563 019f 75696E74 		.ascii	"uint16\000"
 1563      313600
 1564              	.LASF11:
 1565 01a6 75696E74 		.ascii	"uint32\000"
 1565      333200
 1566              	.LASF8:
 1567 01ad 756E7369 		.ascii	"unsigned int\000"
 1567      676E6564 
 1567      20696E74 
 1567      00
 1568              	.LASF7:
 1569 01ba 6C6F6E67 		.ascii	"long long unsigned int\000"
 1569      206C6F6E 
 1569      6720756E 
 1569      7369676E 
 1569      65642069 
 1570              	.LASF32:
 1571 01d1 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1571      43313120 
 1571      352E342E 
 1571      31203230 
 1571      31363036 
 1572 0204 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 1572      20726576 
 1572      6973696F 
 1572      6E203233 
 1572      37373135 
 1573 0237 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects -finline-fu"
 1573      66756E63 
 1573      74696F6E 
 1573      2D736563 
 1573      74696F6E 
 1574 026a 6E637469 		.ascii	"nctions -flto -fno-strict-aliasing\000"
 1574      6F6E7320 
 1574      2D666C74 
 1574      6F202D66 
 1574      6E6F2D73 
 1575              	.LASF16:
 1576 028d 63796973 		.ascii	"cyisraddress\000"
 1576      72616464 
 1576      72657373 
 1576      00
 1577              	.LASF30:
 1578 029a 4932435F 		.ascii	"I2C_MSTR_mstrWrBufIndex\000"
 1578      4D535452 
 1578      5F6D7374 
 1578      72577242 
 1578      7566496E 
 1579              	.LASF18:
 1580 02b2 73697A65 		.ascii	"sizetype\000"
 1580      74797065 
ARM GAS  e:\temp\ccq07yyZ.s 			page 71


 1580      00
 1581              	.LASF6:
 1582 02bb 6C6F6E67 		.ascii	"long long int\000"
 1582      206C6F6E 
 1582      6720696E 
 1582      7400
 1583              	.LASF14:
 1584 02c9 63686172 		.ascii	"char\000"
 1584      00
 1585              	.LASF2:
 1586 02ce 73686F72 		.ascii	"short int\000"
 1586      7420696E 
 1586      7400
 1587              	.LASF21:
 1588 02d8 4932435F 		.ascii	"I2C_MSTR_customIntrHandler\000"
 1588      4D535452 
 1588      5F637573 
 1588      746F6D49 
 1588      6E747248 
 1589              	.LASF4:
 1590 02f3 6C6F6E67 		.ascii	"long int\000"
 1590      20696E74 
 1590      00
 1591              	.LASF17:
 1592 02fc 6C6F6E67 		.ascii	"long double\000"
 1592      20646F75 
 1592      626C6500 
 1593              	.LASF0:
 1594 0308 7369676E 		.ascii	"signed char\000"
 1594      65642063 
 1594      68617200 
 1595              	.LASF26:
 1596 0314 4932435F 		.ascii	"I2C_MSTR_mstrRdBufSize\000"
 1596      4D535452 
 1596      5F6D7374 
 1596      72526442 
 1596      75665369 
 1597              	.LASF35:
 1598 032b 4932435F 		.ascii	"I2C_MSTR_I2C_ISR\000"
 1598      4D535452 
 1598      5F493243 
 1598      5F495352 
 1598      00
 1599              	.LASF23:
 1600 033c 4932435F 		.ascii	"I2C_MSTR_mstrStatus\000"
 1600      4D535452 
 1600      5F6D7374 
 1600      72537461 
 1600      74757300 
 1601              	.LASF31:
 1602 0350 4932435F 		.ascii	"I2C_MSTR_mstrWrBufIndexTmp\000"
 1602      4D535452 
 1602      5F6D7374 
 1602      72577242 
 1602      7566496E 
 1603              		.comm	__gnu_lto_v1,1,1
 1604              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
ARM GAS  e:\temp\ccq07yyZ.s 			page 72


