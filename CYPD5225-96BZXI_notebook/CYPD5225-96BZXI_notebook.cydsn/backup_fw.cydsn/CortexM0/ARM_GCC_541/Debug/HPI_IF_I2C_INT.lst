ARM GAS  e:\temp\ccUM5GSw.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"HPI_IF_I2C_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.section	.gnu.lto_.profile.6240bf7a,"",%progbits
  19 0000 789C6361 		.ascii	"x\234ca`d`c`\000\222]L_\030\001\004\253\001\216"
  19      60646063 
  19      6000925D 
  19      4C5F1801 
  19      04AB018E 
  20              		.text
  21              		.section	.gnu.lto_.icf.6240bf7a,"",%progbits
  22 0000 789C6361 		.ascii	"x\234ca`d\000\001\016\006\004`d\330\370\357\341{&\006"
  22      60640001 
  22      0E060460 
  22      64D8F8EF 
  22      E17B2606 
  23 0014 0010BF03 		.ascii	"\000\020\277\003\220"
  23      90
  24              		.text
  25              		.section	.gnu.lto_.jmpfuncs.6240bf7a,"",%progbits
  26 0000 789C6361 		.ascii	"x\234ca`d\000\001N\006\004\200\210\324\0130\000\000"
  26      60640001 
  26      4E060480 
  26      88D40B30 
  26      0000
  27 0012 030F009F 		.ascii	"\003\017\000\237"
  28              		.text
  29              		.section	.gnu.lto_.inline.6240bf7a,"",%progbits
  30 0000 789C6361 		.ascii	"x\234ca`d\000\001e\006\004\000\212|c\234\310\310\310"
  30      60640001 
  30      65060400 
  30      8A7C639C 
  30      C8C8C8
  31 0013 C0748F79 		.ascii	"\300t\217y\307\027~\006\266\005\362L`q. \301\314\017"
  31      C7177E06 
  31      B605F24C 
  31      60712E20 
  31      C1CC0F
  32 0026 62020083 		.ascii	"b\002\000\203\200\0056"
  32      800536
  33              		.text
  34              		.section	.gnu.lto_.pureconst.6240bf7a,"",%progbits
  35 0000 789C6361 		.ascii	"x\234ca`d`f`\000\222R\000\000r\000$"
ARM GAS  e:\temp\ccUM5GSw.s 			page 2


  35      60646066 
  35      60009252 
  35      00007200 
  35      24
  36              		.text
  37              		.section	.gnu.lto_HPI_IF_I2C_ISR.6240bf7a,"",%progbits
  38 0000 789C9D5A 		.ascii	"x\234\235Z\011PUG\326\276\347\336\307\276\252q\337\367"
  38      09505547 
  38      D6BEE7DE 
  38      C7BEAA71 
  38      DFF7
  39 0012 05F7B8EF 		.ascii	"\005\367\270\357\306\232$V\352\377c\351Lj2\225\224Y"
  39      C69A2456 
  39      EAFF63E9 
  39      4C6A3295 
  39      9459
  40 0024 D4545213 		.ascii	"\324TR\023M\234\311\244&\363\217>|\200\212h\324(\002"
  40      4D9CC9A4 
  40      26F38F3E 
  40      7C808A68 
  40      D42802
  41 0037 821B2AAE 		.ascii	"\202\033*\256(\212\013\213\372D\005E\004DT\022\021\027"
  41      288A0B8B 
  41      FA440545 
  41      04445412 
  41      1117
  42 0049 14131514 		.ascii	"\024\023\025\024\005q\001\371\373\234\356\333<\256\357"
  42      057101F9 
  42      FB9CEEDB 
  42      3CAEEF
  43 0058 A10FAB3C 		.ascii	"\241\017\253<\334\356\333\375\235\245\3179}\272\357"
  43      DCEEDBFD 
  43      9DA5CF39 
  43      7DBAEF
  44 0067 3329A0E0 		.ascii	"3)\240\340\277^\203\025e\002\373;TS\024\230\250\200"
  44      BF5E8315 
  44      6502FB3B 
  44      54531498 
  44      A880
  45 0079 BA3C5B51 		.ascii	"\272<[Q\002\335UU\313\030\246\230=MgZ*fo\015L\274\333"
  45      02DD5555 
  45      CB18A698 
  45      3D4D675A 
  45      2A666F0D 
  46 0090 A4BA2CEA 		.ascii	"\244\272,\352\311\272]\221z\273\200+\357vU\275\251\333"
  46      C9BA5D91 
  46      7ABB802B 
  46      EF7655BD 
  46      A9DB
  47 00a2 8DBADD54 		.ascii	"\215\272\335TwjQ\237\267\273\352A-Ojy\200\027\237\342"
  47      776A519F 
  47      B7BBEA41 
  47      2D4F6A79 
  47      80179FE2 
  48 00b6 A93F7881 		.ascii	"\251?x\2017\177\360V\307\245v`\003}\362\007\260\201"
  48      377FF056 
  48      C7A57660 
ARM GAS  e:\temp\ccUM5GSw.s 			page 3


  48      037DF207 
  48      B081
  49 00c8 3EAA6FEA 		.ascii	">\252o\352p\326\032\233\337\202\265|U?\002iN ~j\023"
  49      70D61A9B 
  49      DF82B57C 
  49      553F0269 
  49      4E207E6A 
  50 00dd 6AF953CB 		.ascii	"j\371S\313\037\232p\200&jS\352nF\335M\341-\336\335L"
  50      1F9A7080 
  50      266A53EA 
  50      6E46DD4D 
  50      E12DDEDD 
  51 00f2 7F780B9A 		.ascii	"\177x\013\232\363\207\346j\013\032\330\236\006\266P"
  51      F387E66A 
  51      0B1AD89E 
  51      06B650
  52 0101 5B51AB0D 		.ascii	"[Q\253\015\265Z\301\004\034\004-\371\337\343\356VEm"
  52      B55AC104 
  52      1C042DF9 
  52      DFE3EE56 
  52      456D
  53 0113 1996A1B0 		.ascii	"\031\226\241\260\001\255\203\334\330\200\326\320\206"
  53      01AD83DC 
  53      D880D6D0 
  53      86
  54 0120 A3B451DB 		.ascii	"\243\264Q\333\322\274v4\257-\264\343\335\355\240=\177"
  54      D2BC7634 
  54      AF2DB4E3 
  54      DDEDA03D 
  54      7F
  55 0131 68AF76A0 		.ascii	"h\257v\240\367=\351}\007\265#\265:Q\253#\364\340\203"
  55      F73DE97D 
  55      07B523B5 
  55      3A51AB23 
  55      F4E083
  56 0144 3AA99DA9 		.ascii	":\251\235\251\273\013uw\206\356\274\273\213\332\365"
  56      BB0B7577 
  56      86EEBCBB 
  56      8BDAF5
  57 0153 6173D6DD 		.ascii	"as\326\335m\303\010\326\335U\357\356\246?t\327\347\367"
  57      6DC308D6 
  57      DD55EFEE 
  57      A63F74D7 
  57      E7F7
  58 0165 809EFCA1 		.ascii	"\200\236\374\241\247\332\213\200\006\022P/\265\017\265"
  58      A7DA8B80 
  58      0612502F 
  58      B50FB5
  59 0174 7A53AB37 		.ascii	"zS\2537\364\341\203\372@_R.\200\377=\356\336W\015\340"
  59      F4E183FA 
  59      405F522E 
  59      80FF3DEE 
  59      DE570DE0 
  60 0188 BAF523DD 		.ascii	"\272\365#\335\372\251\375i\332\000\232\326\037\006\360"
  60      FAA9FD69 
  60      DA009AD6 
  60      1F06F0
ARM GAS  e:\temp\ccUM5GSw.s 			page 4


  61 0197 69036028 		.ascii	"i\003`(\177\030\250\016\242\367C\351\375 u0\265\336"
  61      7F18A80E 
  61      A2F743E9 
  61      FD207530 
  61      B5DE
  62 01a9 A6D66018 		.ascii	"\246\326`\030\302\007\275\255?\014\321\247\015UG\343"
  62      C207BDAD 
  62      3F0CD1A7 
  62      0D5547E3 
  63 01b9 9A7AD2FA 		.ascii	"\232z\322\372z\217\206\361$\3040u8M\037A\323\207\303"
  63      7A8F86F1 
  63      24C43075 
  63      384D1F41 
  63      D387C3
  64 01cc 283E7884 		.ascii	"(>x\204:\222\272GQ\367H\275{\024\2375q\274:\214K<\206"
  64      3A92BA47 
  64      51F748BD 
  64      7B149F35 
  64      71BC3A8C 
  65 01e3 241E03E3 		.ascii	"$\036\003\343\370\373\261\372\3038\000|0\273\2032_\325"
  65      F8FBB1FA 
  65      C338007C 
  65      30BB8332 
  65      5FD5
  66 01f5 4C2EAE6E 		.ascii	"L.\256n\356\036\236^\336>\276~\376M\2326{\253y\213V"
  66      EE1E9E5E 
  66      DE3EBE7E 
  66      FE4D9A36 
  66      7BAB798B 
  67 020a 2DAD4AEB 		.ascii	"-\255J\3536m\333\265\357\320\261S\347.]\273u\357\321"
  67      366DDBB5 
  67      EFD0B153 
  67      E72E5DBB 
  67      75EFD1
  68 021d B357EF3E 		.ascii	"\263W\357>\001}\373\365\0370p\320\340\267\207\014\035"
  68      017DFBF5 
  68      1F3070D0 
  68      E0B7870C 
  68      1D
  69 022e 3D6CF888 		.ascii	"=l\370\210\221\243\306\217\031;\016\346\233\254\212"
  69      91A3C68F 
  69      193B0EE6 
  69      9BAC8A
  70 023d F8D75701 		.ascii	"\370\327W\001\253\011j\331??j\217\027\375\225j\215\012"
  70      AB096AD9 
  70      3F3F6A8F 
  70      17FD956A 
  70      8D0A
  71 024f 690B4B92 		.ascii	"i\013K\222\324\336qf\366\357\372\355\017\315\333\254"
  71      D4DE7166 
  71      F6EFFAED 
  71      0FCDDBAC 
  72 025f 10CCE2A9 		.ascii	"\020\314\342\251V\345C \016z+l\324\371\240\275\321Z"
  72      56E54320 
  72      0E7A2B6C 
  72      D4F9A0BD 
  72      D15A
ARM GAS  e:\temp\ccUM5GSw.s 			page 5


  73 0271 851AAC01 		.ascii	"\205\032\254\001\230X\263\374\\T\261/6U\350\304\232"
  73      9858B3FC 
  73      5C54B12F 
  73      3655E8C4 
  73      9A
  74 0282 C9CBCE06 		.ascii	"\311\313\316\006yj\001\200#CC\257$\250\335c\315\346"
  74      796A0180 
  74      234343AF 
  74      24A8DD63 
  74      CDE6
  75 0294 0566EBEA 		.ascii	"\005f\353\352\357#\315\326\240N\301\232\006;@c\230\260"
  75      EF23CDD6 
  75      A04EC19A 
  75      063B4063 
  75      98B0
  76 02a6 1DDAC136 		.ascii	"\035\332\3016hG\330lpuLr\271\2736\234&\036\313J\372"
  76      6847D86C 
  76      70754C72 
  76      B9BB369C 
  76      261ECB4A 
  77 02bb 41CC5B39 		.ascii	"A\314[9\323\274x\002\316\332ew\326\315\204\227\253}"
  77      D3BC7802 
  77      CEDA6577 
  77      D6CD8497 
  77      AB7D
  78 02cd 5C8350E4 		.ascii	"\\\203P\344N\260\033\272\303N\350\316%\206xpe\311A\325"
  78      4EB01BBA 
  78      C34EE8CE 
  78      25867870 
  78      65C941D5 
  79 02e1 7BF74CB5 		.ascii	"{\367L\265\232kk-f\353\012\227\362\373P\010\240\340"
  79      9A6B6B2D 
  79      66EB0A97 
  79      F2FB5008 
  79      A0E0
  80 02f3 1B86C8DE 		.ascii	"\033\206\310\336iJ\260fjI\035\255\331\243K;\352m\217"
  80      694AB066 
  80      6A491DAD 
  80      D9A34B3B 
  80      EA6D8F
  81 0306 BD1D9074 		.ascii	"\275\035\220tf\304\265\013\222\256\330\354\206\244;"
  81      66C4B50B 
  81      92AED8EC 
  81      86A43B
  82 0315 367B20E9 		.ascii	"6{ \351\211\244\027\222>H\002\220\364C\322\037\311@"
  82      89A41792 
  82      3E480290 
  82      F443D21F 
  82      C940
  83 0327 2483900C 		.ascii	"$\203\220\014A2\024\3110$\303\221\214@\250\221HF#\031"
  83      413214C9 
  83      3024C391 
  83      8C40A891 
  83      48462319 
  84 033b 83642C92 		.ascii	"\203d,\222qH\306\223H\023p\340Dl\277\203O\223\220\374"
  84      7148C693 
  84      481370E0 
ARM GAS  e:\temp\ccUM5GSw.s 			page 6


  84      446CBF83 
  84      4F9390FC 
  85 034f 09C9BBD8 		.ascii	"\011\311\273\330\367\036\222\367\221LF\362\001\222\017"
  85      F71E92F7 
  85      914C46F2 
  85      01920F
  86 035e 914C4132 		.ascii	"\221LA2\025\3114$\177\301\031\037!\371+\222\217\221"
  86      15C93424 
  86      7FC1191F 
  86      21F92B92 
  86      8F91
  87 0370 7C822F3E 		.ascii	"|\202/>E2\035\311gH>G\362\005\222/\031q\233\201O3\361"
  87      45321DC9 
  87      67483E47 
  87      F205922F 
  87      19719B81 
  88 0387 69163E7D 		.ascii	"i\026>}\205\323\276\306\247o\220\374\035\311\267H\346"
  88      85D3BEC6 
  88      A76F90FC 
  88      1DC9B748 
  88      E6
  89 0398 20F90EC9 		.ascii	" \371\016\311\3678d.\222\177!\371\021\311\277\221\374"
  89      F738642E 
  89      927F21F9 
  89      11C9BF91 
  89      FC
  90 03a9 84E4BF38 		.ascii	"\204\344\2778d\036\0223 \015$j!\032\214\3245\204\350"
  90      641E1233 
  90      200D246A 
  90      211A8CD4 
  90      3584E8
  91 03bc 62EA0925 		.ascii	"b\352\011%\272\204\257\325Rj,#\272\234\350\012\242\253"
  91      BA84AFD5 
  91      526A2C23 
  91      BA9CE80A 
  91      A2AB
  92 03ce 68C26AA2 		.ascii	"h\302j\242\221\324\023E4\206\350:\242\353\211n \272"
  92      91D41345 
  92      3486E83A 
  92      A2EB896E 
  92      20BA
  93 03e0 91E8260E 		.ascii	"\221\350&\016\032\213\015\267\315\324\265\205\236\267"
  93      1A8B0DB7 
  93      CDD4B585 
  93      9EB7
  94 03ee D2731CC1 		.ascii	"\322s\034\301m\247\347\035Dw\361\011\273\251\021Ot\037"
  94      6DA7E71D 
  94      4477F109 
  94      BBA9114F 
  94      741F
  95 0400 D1FD4413 		.ascii	"\321\375D\023\371\353\003\3248H\3640\341%\321s2=\247"
  95      F9EB03D4 
  95      3848F430 
  95      E125D173 
  95      323DA7
  96 0413 10EA11EA 		.ascii	"\020\352\021\3529J\3648\365\244\021=E=\351D3\210\236"
  96      394AF438 
ARM GAS  e:\temp\ccUM5GSw.s 			page 7


  96      F5A4113D 
  96      453DE944 
  96      33889E
  97 0426 267A8668 		.ascii	"&z\206h&\321\263\204\223E\317\347\3509\233\346\346P"
  97      26D1B384 
  97      9345CFE7 
  97      E8399BE6 
  97      E650
  98 0438 CF79A279 		.ascii	"\317y\242yD/R\377%\242\005D\025\345!\213\214\2346J\271"
  98      442F52FF 
  98      25A20544 
  98      15E5218B 
  98      8C9C364A 
  99 044d AAB23FDA 		.ascii	"\252\262?\332MX`=\262\005(R\230\277\263p\012\017N\313"
  99      4D58603D 
  99      B2052852 
  99      98BFB370 
  99      0A0F4ECB 
 100 0461 71C360D6 		.ascii	"q\303`\326\2306{X\230\225\300\202\360\362\304\3668\304"
 100      98367B58 
 100      9895C082 
 100      F0F2C4F6 
 100      38C4
 101 0473 A2B5B61D 		.ascii	"\242\265\266\035\341N\221\232\224t\377\212\333\374\032"
 101      E14E919A 
 101      9474FF8A 
 101      DBFC1A
 102 0482 F322B3D9 		.ascii	"\363\"\263\331\237\365-\326xX\336\315\272x\322s=\304"
 102      9FF52DD6 
 102      7858DECD 
 102      BA78D273 
 102      3DC4
 103 0494 049AA9DF 		.ascii	"\004\232\251\337\003\022`>\354\305\260\205}\300\326"
 103      0312603E 
 103      ECC5B085 
 103      7DC0D6
 104 04a3 E206045D 		.ascii	"\342\006\004]\261t\260\203\352\301\370\356\027\341]"
 104      B174B083 
 104      EAC1F8EE 
 104      17E15D
 105 04b2 AE6ACAD9 		.ascii	"\256j\312\331\246\332\357`\261^\236\211c\0256\230\351"
 105      A6DAEF60 
 105      B15E9E89 
 105      63153698 
 105      E9
 106 04c3 E149EF4C 		.ascii	"\341I\357L\250A\011\244=\017}\022\242q\244\366\266H"
 106      A84109A4 
 106      3D0F7D12 
 106      A271A4F6 
 106      B648
 107 04d5 5E245FD1 		.ascii	"^$_\321\355\334hO\336\014\213Ye\306\204u\371E\326-/"
 107      EDDC684F 
 107      DE0C8B59 
 107      65C68475 
 107      F945D62D 
 108 04ea 942D88A5 		.ascii	"\224-\210\2457o8\300\022J\"Iv\020%+\001K\265+\207\353"
 108      376F38C0 
ARM GAS  e:\temp\ccUM5GSw.s 			page 8


 108      124A2249 
 108      7610252B 
 108      014BB52B 
 109 0500 C011134F 		.ascii	"\300\021\023Of\204\270#\204\011\000\016\261\221\266"
 109      6684B823 
 109      8409000E 
 109      B191B6
 110 050f C2776003 		.ascii	"\302w`\003\366\334Oz\346\303\007(pX\012\357\242\304"
 110      F6DC4F7A 
 110      E6C30728 
 110      70580AEF 
 110      A2C4
 111 0521 F9A08015 		.ascii	"\371\240\200\025\017S[\343`62\375V\351\032o.\315\"!"
 111      0F535BE3 
 111      603632FD 
 111      56E91A6F 
 111      2ECD2221 
 112 0535 CDB55F53 		.ascii	"\315\265_S2\335\352\244I\222\322$3i\004Z\271\352*\224"
 112      32DDEAA4 
 112      4992D224 
 112      3369045A 
 112      B9EA2A94 
 113 0549 0D4F3815 		.ascii	"\015O8\025(\224\355l\253\254\233\235\305p[\314\026\021"
 113      2894ED6C 
 113      ABAC9B9D 
 113      C5705BCC 
 113      1611
 114 055b BBEF07DD 		.ascii	"\273\357\007\335\314&\205\315\201\330\357\003\251l1"
 114      CC2685CD 
 114      81D8EF03 
 114      A96C31
 115 056a 5288C911 		.ascii	"R\210\311\021\203\312]8\256\314\351\256\320\011\216"
 115      83CA5D38 
 115      AECCE9AE 
 115      D0098E
 116 0579 1A54EE62 		.ascii	"\032T\356b\2532K\261pL\252\354&T~\036\232~x\012\037"
 116      AB324BB1 
 116      704CAAEC 
 116      26547E1E 
 116      9A7E780A 
 117 058e DD958D7E 		.ascii	"\335\225\215~p\341\206\325\227\253\235\265\216\253\035"
 117      70E186D5 
 117      97AB9DB5 
 117      8EAB1D
 118 059d 7EE65891 		.ascii	"~\346X\221G\235\332V\251\366q\203D\3358D\\\330\302\030"
 118      479DDA56 
 118      A9F67183 
 118      44DD3844 
 118      5CD8C218 
 119 05b1 3F6EE340 		.ascii	"?n\343@\266Q\351\"\315\023\203l\314\356\256\344\273"
 119      B651E922 
 119      CD13836C 
 119      CCEEAEE4 
 119      BB
 120 05c2 92A9CA4F 		.ascii	"\222\251\312O\235p\341\257\273;a\233\023\3226'\015\222"
 120      9D70E1AF 
 120      BB3B619B 
ARM GAS  e:\temp\ccUM5GSw.s 			page 9


 120      13D23627 
 120      0D92
 121 05d4 F4E040D2 		.ascii	"\364\340@\322\035\\\231;\234\322\005\211\0071\310\306"
 121      1D5C993B 
 121      9CD20589 
 121      0731C8C6 
 122 05e4 1A1ECA0E 		.ascii	"\032\036\312\016\215/Z\306\005\017\376\272\247=IT\373"
 122      8D2F5AC6 
 122      050FFEBA 
 122      A73D4954 
 122      FB
 123 05f5 92A44B49 		.ascii	"\222\244KI2\014\222\364\342@\201\245!y$\211\017\324"
 123      320C92F4 
 123      E24081A5 
 123      21792489 
 123      0FD4
 124 0607 009CA668 		.ascii	"\000\234\246hM\013\007\341ko\312\346\214d\223\311\330"
 124      4D0B07E1 
 124      6B6FCAE6 
 124      8C6493C9 
 124      D8
 125 0618 30704239 		.ascii	"0pB9\237!\334\254\217\023Pg%T\226\220\370\251\2208\200"
 125      9F21DCAC 
 125      8F135067 
 125      25549690 
 125      F8A99038 
 126 062d 03ED3CB8 		.ascii	"\003\355<\270%\031\270\355<\340\\#\005\316\226\\rH\340"
 126      2519B8ED 
 126      3CE05C23 
 126      05CE965C 
 126      7248E0
 127 0640 0032B6A7 		.ascii	"\0002\266\247n\354\363\331B\362~N`\346J\314\363\006"
 127      6EECF3D9 
 127      42F27E4E 
 127      60E64ACC 
 127      F306
 128 0652 5BF7E740 		.ascii	"[\367\347@\367\362nZ\275\270\255\257\001\3445R\364\013"
 128      F7F26E5A 
 128      BDB8ADAF 
 128      01E43552 
 128      F40B
 129 0664 924D3E89 		.ascii	"\222M>\211\336\237PV\344\010\211\007:\001uQB]2\330z"
 129      DE9F5056 
 129      E4088907 
 129      3A017551 
 129      425D32D8 
 130 0679 10077A7C 		.ascii	"\020\007z|r\333c?n\353\345\000\227\033)q\201d\363+I"
 130      72DB633F 
 130      6EEBE500 
 130      971B2971 
 130      8164F32B 
 131 068e 3C888CED 		.ascii	"<\210\214\355%b\254b\357\305b7G\210\016\002\3547\211"
 131      2562AC62 
 131      EFC56237 
 131      47880E02 
 131      EC3789
 132 06a1 788521DA 		.ascii	"x\205!\332&1\037\226K\012E\302\363\226\011\357\232E"
ARM GAS  e:\temp\ccUM5GSw.s 			page 10


 132      26311F96 
 132      4B0A45C2 
 132      F39609EF 
 132      9A45
 133 06b3 58678813 		.ascii	"Xg\210\023L\256J&E\206\365\034\312\200^IiCm\242\326"
 133      4CAE4A26 
 133      4586F51C 
 133      CA805E49 
 133      69436DA2 
 134 06c8 4759E7CF 		.ascii	"GY\347\3179_\272,8\017s\202\3635\311\371\272\201\363"
 134      395FBA2C 
 134      380F7382 
 134      F335C9F9 
 134      BA81F3
 135 06db 700E94F7 		.ascii	"p\016\224\3670+\306\213\257\213?\334\320\005\231+\306"
 135      302BC68B 
 135      AF8B3FDC 
 135      D005992B 
 135      C6
 136 06ec D808E2AB 		.ascii	"\330\010\342\253\234\360\342\311\264\344\205H\246#\032"
 136      9CF0E2C9 
 136      B4E48548 
 136      A6231A
 137 06fb CA9C370D 		.ascii	"\312\2347\015\374F\362\361\247j\253\254\"s\252PlH\234"
 137      FC46F2F1 
 137      A76AABAC 
 137      2273AA50 
 137      6C489C
 138 070e 236D12A7 		.ascii	"#m\022\247\237r\323\205/\352\2655.bQw\324^.\360\343"
 138      9F72D385 
 138      2FEAB535 
 138      2E625177 
 138      D45E2EF0 
 139 0723 99DB2A32 		.ascii	"\231\333*2w\334\266]\205~u\374oI\376\267q\303*\346~"
 139      77DCB65D 
 139      857E75FC 
 139      6F49FEB7 
 139      71C32AE6 
 140 0738 F63C34BB 		.ascii	"\366<4\273\372\3778\213\321l\316\215\240\253+Mb\337"
 140      FAFF388B 
 140      D16CCE8D 
 140      A0AB2B4D 
 140      62DF
 141 074a 0BE230D5 		.ascii	"\013\3420\325\017\317\245\332\250Q\"a\356\030\324\030"
 141      0FCFA5DA 
 141      A8512261 
 141      EE18D418 
 142 075a C3217ED9 		.ascii	"\303!~\331\034\237$6\331\216\360\273\316\245\320\215"
 142      1C9F2436 
 142      D98EF0BB 
 142      CEA5D08D 
 143 076a 0F1ADB10 		.ascii	"\017\032\333\020\342\037\006\304q||\315\206\337j\\8"
 143      E21F06C4 
 143      717C7CCD 
 143      86DF6A5C 
 143      38
 144 077b A2D9CC4A 		.ascii	"\242\331\314J\026\3354%b\325\307I\333<T\375\261\030"
ARM GAS  e:\temp\ccUM5GSw.s 			page 11


 144      16DD3425 
 144      62D5C749 
 144      DB3C54FD 
 144      B118
 145 078d 29579B70 		.ascii	")W\233p\023Y\302C\012\305\240\361\026Mc2*7\231q\261"
 145      1359C243 
 145      0AC5A0F1 
 145      164D6332 
 145      2A379971 
 146 07a2 8C621520 		.ascii	"\214b\025 \353\244P+\277}\310\213\017\232`\317\1774"
 146      EBA4502B 
 146      BF7DC88B 
 146      0F9A60CF 
 146      7F34
 147 07b4 FBFE734F 		.ascii	"\373\376sO\372\317}.\366\202GB\307\211\014\010%\314"
 147      FACF7D2E 
 147      F6824742 
 147      C7890C08 
 147      25CC
 148 07c6 969B0D63 		.ascii	"\226\233\015c>\021\345{\004\032"
 148      3E11E57B 
 148      041A
 149 07d0 16267ED1 		.ascii	"\026&~\321\317nk(\264?.gS\024\231\344(\271,v\237w\234"
 149      CF6E6B28 
 149      B43F2E67 
 149      531499E4 
 149      28B92C76 
 150 07e7 08FC5229 		.ascii	"\010\374R)G\231!\277L\342@\362\030\350\012&x\320\310"
 150      479921BF 
 150      4CE240F2 
 150      18E80A26 
 150      78D0C8
 151 07fa F4F25072 		.ascii	"\364\362Pr)\247\3642\211<\261\231.zBi\234\037g\372'"
 151      29A7F432 
 151      893CB199 
 151      2E7A4269 
 151      9C1F67FA 
 152 080f 274CF848 		.ascii	"'L\370H\202>6\230\360]\006\204\252D\010U\336#\033\276"
 152      823E3698 
 152      F05D0684 
 152      AA440855 
 152      DE231BBE 
 153 0823 4BA26FEC 		.ascii	"K\242o\354\317\373\336\267MI\276v\352*\337\305\232\311"
 153      CFFBDEB7 
 153      4D49BE76 
 153      EA2ADFC5 
 153      9AC9
 154 0835 1E633FA8 		.ascii	"\036c?\250d\214+\210\361\023a3\235\321d\206\313\330"
 154      648C2B88 
 154      F1136133 
 154      9DD16486 
 154      CBD8
 155 0847 356023C7 		.ascii	"5`#\307\250U\022\365)\331h2\331\350-\021\255\341\011"
 155      A85512F5 
 155      29D96832 
 155      D9E82D11 
 155      ADE109
ARM GAS  e:\temp\ccUM5GSw.s 			page 12


 156 085a 0FF4E5FD 		.ascii	"\017\364\345\375\300\011\320g\022\3649\027\265\001\271"
 156      C009D067 
 156      12F43917 
 156      B501B9
 157 0869 5CEC43BC 		.ascii	"\\\354C\274\220\020\325$\327\007\012\025\273\0252y\334"
 157      9010D524 
 157      D7070A15 
 157      BB153279 
 157      DC
 158 087a 589996A0 		.ascii	"X\231\226\240W\273\353y\324\237\315\012\252\262\251"
 158      57BBEB79 
 158      D49FCD0A 
 158      AAB2A9
 159 0889 766B648C 		.ascii	"vkd\214\276\324\253]J@\225\013\275\0349\222\2035\257"
 159      BED4AB5D 
 159      4A40950B 
 159      BD1C3992 
 159      8335AF
 160 089c 956B6E56 		.ascii	"\225knV\031R\241\236 \212^N\345\306\371\020S\357\231"
 160      1952A19E 
 160      208A5E4E 
 160      E5C6F910 
 160      53EF99
 161 08af 9A8D1A17 		.ascii	"\232\215\032\027(H\244\241\252\365G\026\330\010\024"
 161      2848A4A1 
 161      AAF54716 
 161      D80814
 162 08be A8EA022D 		.ascii	"\250\352\002-P\353{\375\024\016q\247lW\230\233\2364"
 162      50EB7BFD 
 162      140E71A7 
 162      6C57989B 
 162      9E34
 163 08d0 4C6051EB 		.ascii	"L`Q\353\373\275C\270 \025M4\205\204\362\344\210S\033"
 163      FBBD43B8 
 163      20154D34 
 163      8584F2E4 
 163      88531B
 164 08e3 1A1FACD6 		.ascii	"\032\037\254\326\317Y\323\370\370\005\347\366\246\373"
 164      CF59D3F8 
 164      F805E7F6 
 164      A6FB
 165 08f1 72F6B5B5 		.ascii	"r\366\265\265/j\375 \344M\005XH\002L\243\301\011Uk\204"
 165      2F6AFD20 
 165      E44D0558 
 165      48024CA3 
 165      C109556B 
 166 0906 CBFCC589 		.ascii	"\313\374\305\211X]\244\352&^l\020\356#\006\324\350\372"
 166      585DA4EA 
 166      265E6C10 
 166      EE2306D4 
 166      E8FA
 167 0918 3354C22E 		.ascii	"3T\302.!\021?\342\365g\225\010\331\277:\001\025&\241"
 167      21113FE2 
 167      F5679508 
 167      D9BF3A01 
 167      1526A1
 168 092b 961A56EF 		.ascii	"\226\032V\357c\006D\305zc$\\&a\177&\011?\346NZ\035\347"
ARM GAS  e:\temp\ccUM5GSw.s 			page 13


 168      630644C5 
 168      7A63245C 
 168      26617F26 
 168      093FE64E 
 169 0942 E164E9B3 		.ascii	"\341d\351\263\\\002\255P\251\364Iy\\}V\345\245\217?"
 169      5C02AD50 
 169      A9F44979 
 169      5C7D56E5 
 169      A58F3F
 170 0955 AC5479E9 		.ascii	"\254Ty\351\323\\\356\373O\026Y\204\257|\322\320\306"
 170      D35CEEFB 
 170      4F165984 
 170      AF7CD2D0 
 170      C6
 171 0966 FF8B6139 		.ascii	"\377\213a9>\345\343\243R*2\305\376\346\016\253\324\372"
 171      3EE5E3A3 
 171      522A32C5 
 171      FEE60EAB 
 171      D4FA
 172 0978 1BFFA736 		.ascii	"\033\377\2476\033\177\013\271\361gEL\025*9\334\345W"
 172      1B7F0BB9 
 172      F167454C 
 172      152A39DC 
 172      E557
 173 098a 6378AD52 		.ascii	"cx\255REx=Yl\021\011z:\233\224\035\272\354\261\330\346"
 173      45783D59 
 173      6C11097A 
 173      3A9B941D 
 173      BAECB1D8 
 174 099f AF9B797C 		.ascii	"\257\233y|]/\330Z\345^\207\023.\375q\215.t\310I!\366"
 174      5D2FD85A 
 174      E55E8713 
 174      2EFD718D 
 174      2E74C849 
 175 09b5 671C2434 		.ascii	"g\034$4\360\376\011Q\257\230\255\012D\350\202\357\023"
 175      F0FE0951 
 175      AF98AD0A 
 175      44E882EF 
 175      13
 176 09c6 9BDE6736 		.ascii	"\233\336g6\222\267b\377\001\037Z*+\333ktWQ\024\221("
 176      92B762FF 
 176      011F5A2A 
 176      2BDB6B74 
 176      57511491 
 177 09db 067E699B 		.ascii	"\006~i\233\310\375\355$r\377\305x%\362\352m\205\033"
 177      C8FDED24 
 177      72FFC578 
 177      25F2EA6D 
 177      851B
 178 09ed 44B1858A 		.ascii	"D\261\205\212\304\345\200\265\252mv\264h3\354%H7\373"
 178      C4E580B5 
 178      AA6D76B4 
 178      6833EC25 
 178      4837FB
 179 0a00 09325AD5 		.ascii	"\0112Z\325\023d\214P6Z\250:\223I\307\260\270\015\363"
 179      13648C50 
 179      365AA83A 
ARM GAS  e:\temp\ccUM5GSw.s 			page 14


 179      9349C7B0 
 179      B80DF3
 180 0a13 5BF3CE59 		.ascii	"[\363\316Y\014#\372\345\246H\027Qo\205p\013&\306Xf\327"
 180      0C23FAE5 
 180      A6481751 
 180      6F85700B 
 180      26C65866 
 181 0a28 19709D34 		.ascii	"\031p\2354\340zU\354m\013\363[q\200\257\030\006\337"
 181      E07A55EC 
 181      6D0BF35B 
 181      7180AF18 
 181      06DF
 182 0a3a CA4EEA2E 		.ascii	"\312N\352.\276\261<\362g\215f3\335\350j\312\207q\027"
 182      BEB13CF2 
 182      678D6633 
 182      DDE86ACA 
 182      877117
 183 0a4d 4EB881BC 		.ascii	"N\270\201\274\371+\236\022\256E\034\026*~\355\204\212"
 183      F92B9E12 
 183      AE451C16 
 183      2A7EED84 
 183      8A
 184 0a5e 1BA58A9B 		.ascii	"\033\245\212\233\204\212\341B\305o8\320\201\205Y\011"
 184      848AE142 
 184      C56F38D0 
 184      81855909 
 185 0a6e 74FFE2C7 		.ascii	"t\377\342\307N\313\261jC\001\350\230\313f\311e\013\211"
 185      4ECBB16A 
 185      4301E898 
 185      CB66C965 
 185      0B89
 186 0a80 FC0D2DFE 		.ascii	"\374\015-\376\004eA'\340\227\015\241\261M9\327\317\361"
 186      04654127 
 186      E0970DA1 
 186      B14D39D7 
 186      CFF1
 187 0a92 90991A68 		.ascii	"\220\231\032h\325\267\035a\303\214e\373O\330x\363Vi"
 187      D5B71D61 
 187      C38C65FB 
 187      4FD878F3 
 187      5669
 188 0aa4 C43843E8 		.ascii	"\3048C\350|\301 \250\272$\227\273+,\362\205\215\313"
 188      7CC120A8 
 188      BA2497BB 
 188      2B2CF285 
 188      8DCB
 189 0ab6 B516B509 		.ascii	"\265\026\265\011\253p\303bE}\367\367\206\034}\233\201"
 189      AB70C362 
 189      457DF7F7 
 189      861C7D9B 
 189      81
 190 0ac7 C5B77CFC 		.ascii	"\305\267|\374\263=\311K\274D&?V\3032\371v\203q\034\002"
 190      B33DC94B 
 190      BC44263F 
 190      56C332F9 
 190      7683711C 
 191 0adc EE201B7C 		.ascii	"\356 \033|K\322\264\021\241\313\316\010a\026!\315\034"
ARM GAS  e:\temp\ccUM5GSw.s 			page 15


 191      4BD2B411 
 191      A1CBCE08 
 191      611621CD 
 191      1C
 192 0aed 3639F7CA 		.ascii	"69\367\312\252i\302\215\304\316\273~\177\330/\276up"
 192      AA69C28D 
 192      C4CEBB7E 
 192      7FD82FBE 
 192      7570
 193 0aff 3B25DC2E 		.ascii	";%\334.\203|\337q\004y\005d\202N\260[5\\s|gc\221\266"
 193      837CDF71 
 193      04790564 
 193      824EB05B 
 193      355C737C 
 194 0b17 B25ABB13 		.ascii	"\262Z\273\023\021%\336\177\357Dz\215\227Yq\217!k\317"
 194      1125DE7F 
 194      EF447A8D 
 194      9759718F 
 194      216BCF
 195 0b2a E54087CA 		.ascii	"\345@\207\312v\036\022\227M,!\354m\320\211\034\263I"
 195      761E1297 
 195      4D2C21EC 
 195      6DD0891C 
 195      B349
 196 0b3c 906CF691 		.ascii	"\220l\366\221\001\347\222\360\355d\356+\225\271\357"
 196      01E792F0 
 196      ED64EE2B 
 196      95B9EF
 197 0b4b DEF63359 		.ascii	"\336\3663Y\242L8-\254\367G\356\223\033Z\235\365\366"
 197      A24C382D 
 197      ACF747EE 
 197      931B5A9D 
 197      F5F6
 198 0b5d 4BEB25AA 		.ascii	"K\353%\2526uKni+\001\341\320\332\007x\342\257\216/|"
 198      36754B6E 
 198      692B01E1 
 198      D0DA0778 
 198      E2AF8E2F 
 199 0b72 284E33A5 		.ascii	"(N3\245\035\341\240P)\341A\304Ja\300\1779\241\331!\251"
 199      1DE1A050 
 199      29E141C4 
 199      4A61C07F 
 199      39A1D921 
 200 0b87 D961C35A 		.ascii	"\331a\303Z\376\310\200\032}Y\221$a\223\311`?\362\215"
 200      FEC8801A 
 200      7D599124 
 200      6193C960 
 200      3FF28D
 201 0b9a F981C836 		.ascii	"\371\201\3106\377v\002*EB\245\032\226\370'\006D\247"
 201      FF76022A 
 201      4542A51A 
 201      96F82706 
 201      44A7
 202 0bac E0C64878 		.ascii	"\340\306HxD\302\036%\011\177\342\033sE\304*\207H\016"
 202      44C21E25 
 202      097FE21B 
 202      7345C42A 
ARM GAS  e:\temp\ccUM5GSw.s 			page 16


 202      87480E
 203 0bbf 76E66312 		.ascii	"v\346c\022\311\212\013\252o\305\355\345V|)\"Vl\305\377"
 203      C98A0BAA 
 203      6FC5EDE5 
 203      567C2922 
 203      566CC5FF 
 204 0bd3 6DF0F6D2 		.ascii	"m\360\366\322\260\000\363\370x\351\301&\364\3404=\232"
 204      B000F3F8 
 204      78E9C126 
 204      F4E0343D 
 204      9A
 205 0be4 3689C59E 		.ascii	"6\211\305\236g\023M\035\244CfD\352\016y1\322\032'N\341"
 205      67134D1D 
 205      A4436644 
 205      EA0E7931 
 205      D21A274E 
 206 0bf9 66716D1C 		.ascii	"fqm\034\266\250 \333\263N\202\023\322\301N\242\374\207"
 206      B6A820DB 
 206      B34E8213 
 206      D2C14EA2 
 206      FC87
 207 0c0b F4F2B72C 		.ascii	"\364\362\267,\306\342\313y\230\321\355\016\346\257;"
 207      C6E2CB79 
 207      98D1ED0E 
 207      E6AF3B
 208 0c1a 2936E85B 		.ascii	")6\350[b\203>^\233e\233\032OI\240t\203*\201 @\344\005"
 208      62833E5E 
 208      9B659B1A 
 208      4F49A074 
 208      832A8120 
 209 0c31 8689152D 		.ascii	"\206\211\025-\031\272.GA\037f\243LG\221\032\330\232"
 209      19BA2E47 
 209      411F66A3 
 209      4C47911A 
 209      D89A
 210 0c43 44CE15CA 		.ascii	"D\316\025\3128<\002\234F\3113D(\224WF\346\012D\0138"
 210      383C029C 
 210      46C93344 
 210      28945746 
 210      E60A440B 
 211 0c58 71283923 		.ascii	"q(9#\267\212L\365u\347\032\007G\243\263\022\"\213\274"
 211      B78A4CF5 
 211      75E71A07 
 211      47A3B312 
 211      228BBC
 212 0c6b CA02A268 		.ascii	"\312\002\242h\216\324K\220\340W%r\354\244\347\244ke"
 212      8ED44B90 
 212      E0572572 
 212      ECA4E7A4 
 212      6B65
 213 0c7d 1B7C3F04 		.ascii	"\033|?\004\004\224\274\242q\005\025r\032\231\337r%\237"
 213      0494BCA2 
 213      71051572 
 213      1A99DF72 
 213      259F
 214 0c8f F3247608 		.ascii	"\363$v\010\360\363XUd\242\263\321\220'\241.\360t\265"
 214      F0F35855 
ARM GAS  e:\temp\ccUM5GSw.s 			page 17


 214      64A2B3D1 
 214      9027A12E 
 214      F074B5
 215 0ca2 FADC9102 		.ascii	"\372\334\221\002\215\327\251M!_\004G'y\301\3602\362"
 215      8DD7A94D 
 215      215F0447 
 215      2779C1F0 
 215      32F2
 216 0cb4 91B0CC62 		.ascii	"\221\260\314b\273k\345n\337\320\027\245\241/\031\252"
 216      BB6BE56E 
 216      DFD017A5 
 216      A12F19AA 
 217 0cc4 AC50BB30 		.ascii	"\254P\2730\016\252\203\313\022\246@\0308\"\244\320\304"
 217      0EAA83CB 
 217      12A64018 
 217      3822A4D0 
 217      C4
 218 0cd5 819600CA 		.ascii	"\201\226\000\312\204\200\365oh\226\320'\250\034K\354"
 218      8480F56F 
 218      6896D027 
 218      A81C4BEC 
 219 0ce5 A572377D 		.ascii	"\245r7}$\303>\223\271f\2337\377\374\345\006\277\252"
 219      24C33E93 
 219      B9669B37 
 219      FFFCE506 
 219      BFAA
 220 0cf7 BA1B7756 		.ascii	"\272\033wV\016\003\377\222s;j\245nL\207[\302o\334f\362"
 220      0E03FF92 
 220      733B6AA5 
 220      6E4C875B 
 220      C26FDC66 
 221 0d0c 7EC40426 		.ascii	"~\304\004&\270\"l\326\005\221\030\347\337,\305\227\022"
 221      B8226CD6 
 221      059118E7 
 221      DF2CC597 
 221      12
 222 0d1d 3C74CE54 		.ascii	"<t\316TOsV]\225!<\341\024\355\216m\306\337/\205\206"
 222      4F73565D 
 222      95213CE1 
 222      14ED8E6D 
 222      C6DF2F85 
 223 0d32 AA814283 		.ascii	"\252\201B\203S-\0031\343\217\312\222\035\276z\035\255"
 223      532D0331 
 223      E38FCA92 
 223      1DBE7A1D 
 223      AD
 224 0d43 C2D5372D 		.ascii	"\302\3257-/\212\310{\226\001\211\323M\011\006.OZ\274"
 224      2F8AC87B 
 224      960189D3 
 224      4D09062E 
 224      4F5ABC
 225 0d56 B8F15ADE 		.ascii	"\270\361Z\336\2408\327\014\342\254\000\234AU\374\033"
 225      A038D70C 
 225      E2AC009C 
 225      4155FC1B 
 226 0d66 71BF4EDC 		.ascii	"q\277N\334Wp\337\315\255h\363:c\337\320\217#(mw\351"
 226      5770DFCD 
ARM GAS  e:\temp\ccUM5GSw.s 			page 18


 226      AD68F33A 
 226      63DFD08F 
 226      23286D77 
 227 0d7b 91D5517A 		.ascii	"\221\325Qz\254\256r&VoJ\307/6\350\261\032\020\212.\216"
 227      ACAE7226 
 227      566F4AC7 
 227      2F36E8B1 
 227      1A108A2E 
 228 0d90 1B139CB7 		.ascii	"\033\023\234\267$\360mRp5WpoM\224\323\301Y\"\241\356"
 228      24F06D52 
 228      70355770 
 228      6F4D94D3 
 228      C15922A1 
 229 0da5 70474B3E 		.ascii	"pGK>\226\221\351\303\203\263\011\374.L\321Cn#\265Q\177"
 229      9691E9C3 
 229      83B309FC 
 229      2E4CD143 
 229      6E23B551 
 230 0dba 7BDD99EE 		.ascii	"{\335\231\356\017\016\264=\377\334]OQ\222v\204\273\372"
 230      0F0EB43D 
 230      FFDC5D4F 
 230      51927684 
 230      BBFA
 231 0dcc 192FEFB0 		.ascii	"\031/\357\260X\371H\034\024y\350\310\021\017Q\034\211"
 231      58F9481C 
 231      1479E8C8 
 231      110F511C 
 231      89
 232 0ddd 1BE15DBB 		.ascii	"\033\341]\273K\302m\212\235{rq\356\033\214\030\005\010"
 232      4BC26D8A 
 232      9D7B7271 
 232      EE1B8C18 
 232      0508
 233 0def A29F1EA5 		.ascii	"\242\237\036\245\021\035\316/%[Eq[-\317h+\306\357[\021"
 233      111DCE2F 
 233      255B4571 
 233      5B2DCF68 
 233      2BC6EF5B 
 234 0e04 B2C4878B 		.ascii	"\262\304\207\213p_\354bK\257-\333\345]\007Q&!\036\350"
 234      705FEC62 
 234      4BAF2DDB 
 234      E55D0751 
 234      26211EE8 
 235 0e18 DB211AA5 		.ascii	"\333!\032\245\247\334\316\313\222\364\223u\014\231\360"
 235      A7DCCECB 
 235      92F49375 
 235      0C99F0
 236 0e27 F22A8B50 		.ascii	"\362*\213P*KT|\245\261\217\362l<\364\241D,7\354\213"
 236      2A4B547C 
 236      A5B18FF2 
 236      6C3CF4A1 
 236      442C37EC 
 237 0e3c EB00415E 		.ascii	"\353\000A^9`\257\263\335\007{\311\313\272\374\265y\302"
 237      3960AFB3 
 237      DD077BC9 
 237      CBBAFCB5 
 237      79C2
ARM GAS  e:\temp\ccUM5GSw.s 			page 19


 238 0e4e 31D73B93 		.ascii	"1\327;\223*\037\311\034\367\330\220*78\223*+$L\245Z"
 238      2A1FC91C 
 238      F7D8902A 
 238      3738932A 
 238      2B244CA5 
 239 0e63 FF827223 		.ascii	"\377\202r#\240D\010\247\324\273\337\336\004\370\216"
 239      A04408A7 
 239      D4BBDFDE 
 239      04F88E
 240 0e72 61E5076D 		.ascii	"a\345\007m.\362\340\316\361\024\177=\004O\260v\266\315"
 240      2EF2E0CE 
 240      F1147F3D 
 240      044FB076 
 240      B6CD
 241 0e84 A99B28A7 		.ascii	"\251\233(\247\026X\366\\Mp\321'\333d\266\336\030\234"
 241      1658F65C 
 241      4D70D127 
 241      DB64B6DE 
 241      189C
 242 0e96 F88B83CA 		.ascii	"\370\213\203\312\262\323\224\235\305O\016\344\011Qc"
 242      B2D3949D 
 242      C54F0EE4 
 242      095163
 243 0ea5 27C42AE1 		.ascii	"'\304*\341\276}\320`\312#h\211 \275\303*\323\361C|\350"
 243      BE7DD060 
 243      CA236889 
 243      20BDC32A 
 243      D3F1437C 
 244 0eba F3CBCBDC 		.ascii	"\363\313\313\334\371Hwx\252\266\353UX\231\336\355\021"
 244      F9487778 
 244      AAB6EB55 
 244      5899DEED 
 244      11
 245 0ecb F36236AB 		.ascii	"\363b6\253\367\346*W\374\301B\257[\225\256l~\200\022"
 245      F7E62A57 
 245      FCC142AF 
 245      5B95AE6C 
 245      7E8012
 246 0ede 3B8AEE03 		.ascii	";\212\356\003\022n\255\215\026\226\212}\325R\216o\000"
 246      126EAD8D 
 246      16968A7D 
 246      D5528E6F 
 246      00
 247 0eef 9EC91B80 		.ascii	"\236\311\033\200\347\006\203ov\306\340/\244\301\253"
 247      E706836F 
 247      76C6E02F 
 247      A4C1AB
 248 0efe 0D57005B 		.ascii	"\015W\000[\000%B8\036e\025\242\254\336\012\015\234\371"
 248      00254238 
 248      1E6515A2 
 248      ACDE0A0D 
 248      9CF9
 249 0f10 6BE499BF 		.ascii	"k\344\231\277Bl[q\200S\370\251\177\234\275C\177\214"
 249      426C5B71 
 249      8053F8A9 
 249      7F9CBD43 
 249      7F8C
ARM GAS  e:\temp\ccUM5GSw.s 			page 20


 250 0f22 38F46F01 		.ascii	"8\364o\001\2215^RP\305\3619\345\267\326\356\025zmwF"
 250      91355E52 
 250      50C5F139 
 250      E5B7D6EE 
 250      157A6D77 
 251 0f37 AF5AA997 		.ascii	"\257Z\251\227Y\253\177\356\337\001\010\325\350\243~"
 251      59AB7FEE 
 251      DF0108D5 
 251      E8A37E
 252 0f46 A0A6032F 		.ascii	"\240\246\003/ \177\334!\374\261,\245\270\015g\260\213"
 252      207FDC21 
 252      FCB12CA5 
 252      B80D67B0 
 252      8B
 253 0f57 F5A2A8F7 		.ascii	"\365\242\250\367R\367\026\270po\240\237\263\261n\203"
 253      52F716B8 
 253      706FA09F 
 253      B3B16E83 
 254 0f67 43EEE27B 		.ascii	"C\356\342{X_%\330\212_\307\026\370\323\257\272,,G\363"
 254      585F25D8 
 254      8A5FC716 
 254      F8D3AFBA 
 254      2C2C47F3 
 255 0f7b 060D12BF 		.ascii	"\006\015\022\277E\331*\254 \243\226U4\026\255e\037@"
 255      45D92AAC 
 255      20A39655 
 255      3416AD65 
 255      1F40
 256 0f8d 9880C33E 		.ascii	"\230\200\303>\217@e\370\330T\003\200\201\366C\007\245"
 256      8F4065F8 
 256      D8540380 
 256      81F64307 
 256      A5
 257 0f9e 99FB     		.ascii	"\231\373"
 258 0fa0 8B747757 		.ascii	"\213twWm\"\276\277\274&x\222\252_\023\354np\347\014"
 258      6D22BEBF 
 258      BC267892 
 258      AA5F13EC 
 258      6E70E70C 
 259 0fb4 D2EA27CB 		.ascii	"\322\352'\313x\300\031\364Y\352\215v\316`\262W\274\330"
 259      78C019F4 
 259      59EA8D76 
 259      CE60B257 
 259      BCD8
 260 0fc6 394BF564 		.ascii	"9K\365d\351p\347\014\321l~_2@n\027\017\326\352\247\016"
 260      E970E70C 
 260      D16C7E5F 
 260      32406E17 
 260      0FD6EAA7 
 261 0fdb 8767D885 		.ascii	"\207g\330\205\232\315\236;P\336@\024\035\325\025\335"
 261      9ACD9E3B 
 261      50DE4014 
 261      1DD515DD 
 262 0feb 070D25D0 		.ascii	"\007\015%\320EZ\375\004\272\037p\006\225H\365.\372\366"
 262      455AFD04 
 262      BA1F7006 
 262      9548F52E 
ARM GAS  e:\temp\ccUM5GSw.s 			page 21


 262      FAF6
 263 0ffd DB66D0   		.ascii	"\333f\320"
 264 1000 41D29E65 		.ascii	"A\322\236eG\213\305\221&\261^\2500_\377\217R?\\\026"
 264      478BC591 
 264      26B15EA8 
 264      305FFF8F 
 264      523F5C16 
 265 1014 2327B6D6 		.ascii	"#'\266\326\346\037\353\234\"Q8~\225t\374\003\3168~\250"
 265      E61FEB9C 
 265      2251387E 
 265      9574FC03 
 265      CE387EA8 
 266 1028 F4CF255A 		.ascii	"\364\317%Z\375\274p\320\231|\036&a\226j\374\347Pu_\365"
 266      FDBC70D0 
 266      997C1E26 
 266      61966AFC 
 266      E750755F 
 267 103d 0E008209 		.ascii	"\016\000\202\011\275\007\313\322\263z\255\276\217;\334"
 267      BD07CBD2 
 267      B37AADBE 
 267      8F3BDC
 268 104c EC9669F2 		.ascii	"\354\226i\362\354\3072\337K\231\371\016;\223\371~\326"
 268      ECC732DF 
 268      4B99F90E 
 268      3B93F97E 
 268      D6
 269 105d F4CCB7DC 		.ascii	"\364\314\267\334\240a\2223\206Z!5\\\251\325\317|\311"
 269      A0619233 
 269      865A2135 
 269      5CA9D5CF 
 269      7CC9
 270 106f 8012215C 		.ascii	"\200\022!\\\375T\226\002ru\032Ne\311z*\373\205\\>E\254"
 270      FD549602 
 270      72751A4E 
 270      65C97A2A 
 270      FB855C3E 
 271 1085 E84BB9A2 		.ascii	"\350K\271\242G\234\021t\225\024t\265!\225\035\005\204"
 271      479C1174 
 271      951474B5 
 271      21951D05 
 271      84
 272 1096 6A742A0B 		.ascii	"jt*\013\227\300kH\316\243<\035\275-W\364d\364kW4B\253"
 272      97C06B48 
 272      CEA33C1D 
 272      BD2D57F4 
 272      64F46B57 
 273 10ad FBA61E5E 		.ascii	"\373\246\036^~*Z\277_;\356LU\033\251\351\025c\224!\307"
 273      7E2A5ABF 
 273      5F3BEE4C 
 273      551BA9E9 
 273      15639421 
 274 10c2 A4014235 		.ascii	"\244\001B5\372Jm\255\004\216&\015\323\270\206C\344\251"
 274      FA4A6DAD 
 274      048E260D 
 274      D3B88643 
 274      E4A9
 275 10d4 3F23FAB5 		.ascii	"?#\372\265\311$\0065\324\217GCe\201V\224\251\027h\247"
ARM GAS  e:\temp\ccUM5GSw.s 			page 22


 275      C9240635 
 275      D48F4743 
 275      65815694 
 275      A91768A7 
 276 10e8 50D5A7CF 		.ascii	"P\325\247\317n\307\213\002-L\024hI\271O\312l~\306\267"
 276      6EC78B02 
 276      2D4C1468 
 276      49B94FCA 
 276      6C7EC6B7 
 277 10fc 4E9317E3 		.ascii	"N\223\027\343\206\374\222\016\010RwS1O\357\266I/\243"
 277      86FC920E 
 277      08527753 
 277      314FEFB6 
 277      492FA3
 278 110f 952037FA 		.ascii	"\225 7\372\2200L\011\313P\370\031\342j\264~\247q\306"
 278      90304C09 
 278      CB50F819 
 278      E26AB47E 
 278      A771C6
 279 1122 AE3F39B8 		.ascii	"\256?9\270>\330 \227}\243!~2\355\302x\330\207\331$a"
 279      3ED82097 
 279      7DA3217E 
 279      32EDC278 
 279      D887D924 
 280 1137 626586A8 		.ascii	"be\206\250\223\007\301\204\350\303\225\364\256\274\324"
 280      9307C184 
 280      E8C395F4 
 280      AEBCD4
 281 1146 B9167D50 		.ascii	"\271\026}P\250|\326n\300{\332\017\370\3152\340\267\030"
 281      A87CD66E 
 281      C07BDA0F 
 281      F8CD32E0 
 281      B718
 282 1158 04CE7246 		.ascii	"\004\316rF\357\255R\3408C\300\237\003\224\010\341l?"
 282      EFAD52E0 
 282      3843C09F 
 282      039408E1 
 282      6C3F
 283 116a 7F6643BD 		.ascii	"\177fC\275\370\006\012\355szho\323\364J'K\240\344\000"
 283      F8060AED 
 283      737A686F 
 283      D3F44A27 
 283      4BA0E400 
 284 117e CE21F16E 		.ascii	"\316!\361n\014\020^U\260{\317;\342\232[|\317-{\271>"
 284      0C105E55 
 284      B07BCF3B 
 284      E29A5B7C 
 284      CF2D7BB9 
 285 1193 D35B4F18 		.ascii	"\323[O\030\377\240\375`\273\364\214\035\344\2459\"_"
 285      FFA0FD60 
 285      BBF48C1D 
 285      E4A53922 
 285      5F
 286 11a4 5C93EB7B 		.ascii	"\\\223\353{\336\031=wJ=w\031\362E\036 \324\353\363\205"
 286      DE193D77 
 286      4A3D7719 
 286      F2451E20 
ARM GAS  e:\temp\ccUM5GSw.s 			page 23


 286      D4EBF385 
 287 11b8 03E0DD12 		.ascii	"\003\340\335\0228\236\344\314\343\3214\202\257/;\000"
 287      389EE4CC 
 287      E3D13482 
 287      AF2F3B00 
 288 11c8 95B41388 		.ascii	"\225\264\023\210\015*\271\207\237,.XN\346\320\365\203"
 288      0D2AB987 
 288      9F2C2E58 
 288      4EE6D0F5 
 288      83
 289 11d9 37D4B208 		.ascii	"7\324\262\010\327\304\015\363\235\350KB\351\213vS\210"
 289      D7C40DF3 
 289      9DE84B42 
 289      E98B7653 
 289      88
 290 11ea 83CFEB09 		.ascii	"\203\317\353\0112\322\367\011o\314\261\224\331\002\325"
 290      32D2F709 
 290      6FCCB194 
 290      D902D5
 291 11f9 3CCCADF1 		.ascii	"<\314\255\361\346WX\236\260_\323\343j\244R\334\204G"
 291      E657589E 
 291      B05FD3E3 
 291      6AA452DC 
 291      8447
 292 120b D37DC9F8 		.ascii	"\323}\311\370\2223\214\023%\343\003\006k\027\200\200"
 292      92338C13 
 292      25E30306 
 292      6B178080 
 293 121b 9207081F 		.ascii	"\222\007\010\037v\2008\250\275&\2259\340sH\3629L\306"
 293      768038A8 
 293      BD269539 
 293      E07348F2 
 293      394CC6
 294 122e 2FE0C61F 		.ascii	"/\340\306\037E\351\000\237\306+\313\263\025\376\271"
 294      45E9009F 
 294      C62BCBB3 
 294      15FEB9
 295 123d A92CB3B8 		.ascii	"\251,\263\270%\227!\203\356\362\035\375\356(\311\220"
 295      25972183 
 295      EEF21DFD 
 295      EE28C990 
 296 124d 884E03CE 		.ascii	"\210N\003\316\250\373\274\224\014z\277\3151i\014\313"
 296      A8FBBC94 
 296      0C7ABFCD 
 296      31690CCB 
 297 125d 44A21293 		.ascii	"D\242\022\223\311\263t\337\212\307\"\373\231E\366K\337"
 297      C9B374DF 
 297      8AC722FB 
 297      9945F64B 
 297      DF
 298 126e 7CEF7FEA 		.ascii	"|\357\177\352x&\313\325O\321\304%*b\215U\256\230\350"
 298      7826CBD5 
 298      4FD1C425 
 298      2A628D55 
 298      AE98E8
 299 1281 E7D3CF1E 		.ascii	"\347\323\317\036\237&^\257~\003u\251\305\017\250\220"
 299      9F265EAF 
ARM GAS  e:\temp\ccUM5GSw.s 			page 24


 299      7E0375A9 
 299      C50FA890 
 300 1291 AACD973F 		.ascii	"\252\315\227?\254\036\207?\275\273\313\016jIO\334i\022"
 300      AC1E873F 
 300      BDBBCB0E 
 300      6A494FDC 
 300      6912
 301 12a3 FF0914B0 		.ascii	"\377\011\024\260n\266\017\364zo\346\354\231s?\377\347"
 301      6EB60FF4 
 301      7A6FE6EC 
 301      99733FFF 
 301      E7
 302 12b4 CC19D3A7 		.ascii	"\314\031\323\247\315\371a\356\2273?\2312m\316\244!\237"
 302      CDF961EE 
 302      97333F99 
 302      326DCEA4 
 302      219F
 303 12c6 BC3F65F2 		.ascii	"\274?e\362\364\311\357N\237<x\322\364\311\377\373\347"
 303      F4C9EF4E 
 303      9F3C78D2 
 303      F4C9FFFB 
 303      E7
 304 12d7 FE5F2A5E 		.ascii	"\376_*^3g\317\370\363\334\317g\377c\326\314\271\036"
 304      3367CFF8 
 304      F3DCCF67 
 304      FF63D6CC 
 304      B91E
 305 12e9 33BE9E35 		.ascii	"3\276\2365k\322\234\037f\377\363\377\001z4MM"
 305      6BD29C1F 
 305      66FFF3FF 
 305      017A344D 
 305      4D
 306              		.text
 307              		.section	.gnu.lto_.symbol_nodes.6240bf7a,"",%progbits
 308 0000 789C1DCC 		.ascii	"x\234\035\314\313\021@@\024D\321\373\346\303\014\202"
 308      CB114040 
 308      1444D1FB 
 308      E6C30C82 
 309 0010 2001299A 		.ascii	" \001)\232\020TIA\024v\022\260\025\203\004\254\215\356"
 309      10544941 
 309      147612B0 
 309      158304AC 
 309      8DEE
 310 0022 CDA9BA8B 		.ascii	"\315\251\272\213\016\030\205:\307\002\353\305\317Q&"
 310      0E18853A 
 310      C702EBC5 
 310      CF5126
 311 0031 88C6587B 		.ascii	"\210\306X{t&\274\023\301\213\030D\023E\333\210\324\212"
 311      7426BC13 
 311      C18B1844 
 311      1345DB88 
 311      D48A
 312 0043 9C449745 		.ascii	"\234D\227E\337\375\330\260\230\336\241\224\032<\003"
 312      DFFDD8B0 
 312      98DEA194 
 312      1A3C03
 313 0052 FB7BCE01 		.ascii	"\373{\316\001\266\3476\370\000\010\325\016J"
ARM GAS  e:\temp\ccUM5GSw.s 			page 25


 313      B6E736F8 
 313      0008D50E 
 313      4A
 314              		.text
 315              		.section	.gnu.lto_.refs.6240bf7a,"",%progbits
 316 0000 789C0D8C 		.ascii	"x\234\015\214\337*\304a\024E\327\376\316\367\315\374"
 316      DF2AC461 
 316      1445D7FE 
 316      CEF7CDFC 
 317 0010 86A24444 		.ascii	"\206\242DD(o0%J\306\263\341\005\304-\227\334\310;\230"
 317      286F3025 
 317      4AC6B3E1 
 317      05C42D97 
 317      DCC83B98 
 318 0024 A28C69B8 		.ascii	"\242\214i\270\301\270\360'IMJ\304-b_\354\326i\355sN"
 318      C1B8F027 
 318      494D4AC4 
 318      2D625FEC 
 318      D669ED73 
 319 0039 468C083A 		.ascii	"F\214\010:\200\022\251A\032%\306\024\343\304\204b\222"
 319      8012A941 
 319      1A25C614 
 319      E3C48462 
 319      92
 320 004a 98524C13 		.ascii	"\230RL\0233\212Y\2459\322<i\201\334$\026\025K\344e\312"
 320      338A59A5 
 320      39D23C69 
 320      81DC2416 
 320      154BE465 
 321 005f 8ACA2AA5 		.ascii	"\212\312*\245\245\332\232r\033\342\014\305\271\3315"
 321      A5DA9A72 
 321      1BE20CC5 
 321      B9D935
 322 006e 7B7E7A01 		.ascii	"{~z\001\365\033\250\372\316\035\252\036\334\015\334"
 322      F51BA8FA 
 322      CE1DAA1E 
 322      DC0DDC
 323 007d BD9A6FE6 		.ascii	"\275\232o\346\273\371a~z\367\013j\337\250\374\330\375"
 323      BBF9617E 
 323      7AF70B6A 
 323      DFA8FCD8 
 323      FD
 324 008e DAFDD9AD 		.ascii	"\332\375\331\255\213\306\206\2506ElI\261-\245\035\273"
 324      8BC686A8 
 324      36456C49 
 324      B12DA51D 
 324      BB
 325 009f 5DBB3D51 		.ascii	"]\273=Q\3377\017\234C\251:2\217\335\265\355O<\237:\035"
 325      DF370F9C 
 325      43A93A32 
 325      8FDDB5ED 
 325      4F3C9F3A 
 326 00b4 FBAE6F7B 		.ascii	"\373\256o{\276\275\024\345J\014]\213\341\276\347[\347"
 326      BEBD14E5 
 326      4A0C5D8B 
 326      E1BEE75B 
 326      E7
ARM GAS  e:\temp\ccUM5GSw.s 			page 26


 327 00c5 5E2A8F22 		.ascii	"^*\217\"?9\317R~\021\377\357\230,\325"
 327      3F39CF52 
 327      7E11FFEF 
 327      982CD5
 328              		.text
 329              		.section	.gnu.lto_.decls.6240bf7a,"",%progbits
 330 0000 789CAD94 		.ascii	"x\234\255\224]L\024W\024\307\347\314\300\262\354.P\320"
 330      5D4C1457 
 330      14C7E7CC 
 330      C0B2EC2E 
 330      50D0
 331 0012 101E484A 		.ascii	"\020\036HJM\0154ih\205>\364\245/\222 \274X\"\324\276"
 331      4D0D3469 
 331      68853EF4 
 331      A52F9220 
 331      BC5822D4 
 332 0027 9810CA8E 		.ascii	"\230\020\312\216\326\024Y\263\273\324\322\247\221\205"
 332      D61459B3 
 332      BBD4D2A7 
 332      9185
 333 0035 F265ADC5 		.ascii	"\362e\255\305\240\260b\244Z\025\224/\371\220\202E\020"
 333      A0B062A4 
 333      5A15942F 
 333      F9908245 
 333      10
 334 0046 5101F95A 		.ascii	"Q\001\371Z\020\224\317\205PbQ\261X\245\326\266v{\356"
 334      1094CF85 
 334      506251B1 
 334      58A5D6B6 
 334      767BEE
 335 0059 BDB33BBB 		.ascii	"\275\263;\273\256m|\350\315\376\357\314=s\316\357\236"
 335      AE6D7CE8 
 335      CDFEEFCC 
 335      3D73CEEF 
 335      9E
 336 006a 73E6CEFA 		.ascii	"s\346\316\372p\300\221\241Vs\\'\336\256\342\275\003"
 336      70C091A1 
 336      56735C27 
 336      DEAEE2BD 
 336      03
 337 007b 078FD7ED 		.ascii	"\007\217\327\355\2342\310\272\026U\217\322\242ZQ\235"
 337      9C32C8BA 
 337      16558FD2 
 337      A25A519D 
 338 008b A82BA8AB 		.ascii	"\250+\250\253\250\233\250A\324\010j\024u\0135\201\272"
 338      A89BA841 
 338      D4086A14 
 338      750B3581 
 338      BA
 339 009c C3790EC2 		.ascii	"\303y\016\302\010\226\331!\250\365\250^T$\252\011\025"
 339      0896D921 
 339      A8F5A85E 
 339      5424AA09 
 339      15
 340 00ad 8E1A464D 		.ascii	"\216\032FM\242ZP5\250Y\324\014\3522j\016\325\217\262"
 340      A25A5035 
 340      A859D40C 
ARM GAS  e:\temp\ccUM5GSw.s 			page 27


 340      EA326A0E 
 340      D58FB2
 341 00c0 FFCF793D 		.ascii	"\377\317y=\347\301q\274\256\312\177\032&\201\007\271"
 341      E7C171BC 
 341      AECA7F1A 
 341      268107B9 
 342 00d0 291C009B 		.ascii	")\034\000\233\201\212c\242K\274\341\351\314\271L\256"
 342      818A63A2 
 342      4BBCE1E9 
 342      CCB94CAE 
 343 00e0 0B47668E 		.ascii	"\013Gf\216\371S\233\002\243?\347\325\341\034\024\242"
 343      F9539B02 
 343      A33FE7D5 
 343      E11C14A2 
 344 00f0 D0410E02 		.ascii	"\320A\016\002W\006,\212=\347e7\216\301y%\300\215\307"
 344      57062C8A 
 344      3DE76537 
 344      8EC17925 
 344      C08DC7
 345 0103 D275CB09 		.ascii	"\322u\313\011<k\002g\321\023\007\217\035\362\023\220"
 345      3C6B0267 
 345      D113078F 
 345      1DF21390 
 346 0113 89F7F667 		.ascii	"\211\367\366gU\361\3215\022\216C\222\304\277\245t\346"
 346      55F1D135 
 346      128E4392 
 346      C4BFA574 
 346      E6
 347 0124 9AE36957 		.ascii	"\232\343iW\320\023\036B4\300\343rtu\340\270\026\227"
 347      D0131E42 
 347      34C0E372 
 347      7475E0B8 
 347      1697
 348 0136 EB35F01A 		.ascii	"\3535\360\032.\357_.w\004\204\035!q\222E\212\340a{("
 348      2EEF5F2E 
 348      7704841D 
 348      21719245 
 348      8AE0617B 
 349 014b 9C877038 		.ascii	"\234\207p8\007\3702\241\006\302p\376\304\207\221.\026"
 349      07F832A1 
 349      06C270FE 
 349      C487912E 
 349      16
 350 015c 9D98830D 		.ascii	"\235\230\203\015\225Re\2034\277\366\227\177\271\324"
 350      95526583 
 350      34BFF697 
 350      7FB9D4
 351 016b 9583513C 		.ascii	"\225\203Q<\361\202*\020\240\032\242IvxK.ga\032\323\256"
 351      F1822A10 
 351      A01AA249 
 351      76784B2E 
 351      67611AD3 
 352 0180 850D1879 		.ascii	"\205\015\030y\260\374\244]%\304\321D{\207\253\326\002"
 352      B0FCA45D 
 352      25C4D144 
 352      7B87ABD6 
 352      02
ARM GAS  e:\temp\ccUM5GSw.s 			page 28


 353 0191 90322F21 		.ascii	"\2202/!\345\372\326\205F)\327\227\"\352\024D\035E\340"
 353      E5FAD685 
 353      4629D797 
 353      22EA1444 
 353      1D45E0
 354 01a4 4D3D0D7F 		.ascii	"M=\015\177\3222\366\215J\260\000\215\267\3456T\010\254"
 354      D232F68D 
 354      4AB0008D 
 354      B7E53654 
 354      08AC
 355 01b6 1E1F5C3E 		.ascii	"\036\037\\>\032\264.\006\262z\"pYRj9\353\247+\222\244"
 355      1AB42E06 
 355      B27A2270 
 355      59526A39 
 355      EBA72B92 
 356 01cb 1CE99045 		.ascii	"\034\351\220E\012I\240\344F,\350\002-\250\011t\362\036"
 356      0A49A0E4 
 356      462CE802 
 356      2DA80974 
 356      F21E
 357 01dd E8BBB294 		.ascii	"\350\273\262\224\327\244\025*(\226\357i[.\015\004]\324"
 357      D7A4152A 
 357      2896EF69 
 357      5B2E0D04 
 357      5DD4
 358 01ef BF84C245 		.ascii	"\277\204\302E\210r\213>C\3725\337T\254\267NIR\004\264"
 358      88728B3E 
 358      43FA35DF 
 358      54ACB74E 
 358      495204B4 
 359 0203 E0836625 		.ascii	"\340\203f%}\364c;\034t|}O\273\361\224T\231#\315\267"
 359      7DF4633B 
 359      1C747C7D 
 359      4FBBF194 
 359      549923CD 
 360 0218 0E7DD086 		.ascii	"\016}\320\206\265\026\252\251w\003\363vK\255\201\324"
 360      B516AAA9 
 360      7703F376 
 360      4BAD81D4 
 361 0228 0CADB091 		.ascii	"\014\255\260\221\364\350ag\223\237\260\312\012\256\317"
 361      F4E86167 
 361      939FB0CA 
 361      0AAECF
 362 0237 FBA95A8D 		.ascii	"\373\251Z\215\025\206k\300\001d\375\240\355Y\000[\223"
 362      15866BC0 
 362      0164FDA0 
 362      ED59005B 
 362      93
 363 0248 C7E5DF2E 		.ascii	"\307\345\337.\376\255\025\236\263*\306\026\317/\373"
 363      FEAD159E 
 363      B32AC616 
 363      CF2FFB
 364 0257 409486E5 		.ascii	"@\224\206\345\327X\2743_\222\000:@\003\227\224\364\302"
 364      D758BC33 
 364      5F92003A 
 364      40039794 
 364      F4C2
ARM GAS  e:\temp\ccUM5GSw.s 			page 29


 365 0269 35381790 		.ascii	"58\027\220:WOJ\2520\016b\303\341],\361G,\021\241\304"
 365      3A574F4A 
 365      AA300E62 
 365      C3E15D2C 
 365      F1472C11 
 366 027f 0BDA31AF 		.ascii	"\013\3321\2576\314\213t?\367\361\204JS@\316\307+\371"
 366      36CC8B74 
 366      3FF7F184 
 366      4A5340CE 
 366      C72BF9
 367 0292 573E7D3C 		.ascii	"W>}<\034\200E\177o\301\027\374\325\353\365uR\256E\015"
 367      1C80457F 
 367      6FC117FC 
 367      D5EBF575 
 367      52AE450D 
 368 02a6 9731871F 		.ascii	"\2271\207\037\344\242Y<G\3268w\322\222+\332\217t\004"
 368      E4A2593C 
 368      47D63877 
 368      D2922BDA 
 368      8F7404
 369 02b9 09167698 		.ascii	"\011\026v\230o\264\216\226\0051D\327\341\0258*u\357"
 369      6FB48E96 
 369      053144D7 
 369      E115382A 
 369      75EF
 370 02cb F7A184AE 		.ascii	"\367\241\204\256\027\010]\224p\205\022jO\035{[8\314"
 370      17085D94 
 370      7085126A 
 370      4F1D7B5B 
 370      38CC
 371 02dd 00C52B77 		.ascii	"\000\305+w\0178\001\227\326\334\000\335/\000\272)\340"
 371      0F380197 
 371      D6DC00DD 
 371      2F00BA29 
 371      E0
 372 02ee 2A05F4D8 		.ascii	"*\005\364\330\277+\323\012\347\030a\266\267\372<9f\221"
 372      BF2BD30A 
 372      E71861B6 
 372      B7FA3C39 
 372      6691
 373 0300 D8751C41 		.ascii	"\330u\034An\215\217d\215\357\267/\375\352/\\\241\356"
 373      6E8D8F64 
 373      8DEFB72F 
 373      FDEA2F5C 
 373      A1EE
 374 0312 FC68F903 		.ascii	"\374h\371\003\273\0124Q\005\256\343\303)g\247\017\033"
 374      BB0A3451 
 374      05AEE3C3 
 374      2967A70F 
 374      1B
 375 0323 152937EA 		.ascii	"\025)7\352:\032\257\241\321y\202v\035\315'\337P/\346"
 375      3A1AAFA1 
 375      D1798276 
 375      1DCD27DF 
 375      502FE6
 376 0336 76437945 		.ascii	"vCyE\221\032v\200\012\027J\247|Y\357_\005\212\021\213"
 376      911A7680 
ARM GAS  e:\temp\ccUM5GSw.s 			page 30


 376      0A174AA7 
 376      7C59EF5F 
 376      058A118B 
 377 034a B6F9667F 		.ascii	"\266\371f\177W\367\243;\330\221\353G|\217\327\221\353"
 377      57F7A33B 
 377      D891EB47 
 377      7C8FD791 
 377      EB
 378 035b A1C5DFA4 		.ascii	"\241\305\337\244\305?\312\033\374Y%\364\262\342+\373"
 378      C53FCA1B 
 378      FC5925F4 
 378      B2E22BFB 
 379 036b 6A4FF172 		.ascii	"jO\361r\373.\212N\300\200\027`\200\002\006)\340t\321"
 379      FB2E8A4E 
 379      C0801760 
 379      80020629 
 379      E074D1
 380 037e C2222FCC 		.ascii	"\302\"/\3140@Y\351\231?\002\335?C\322{%n\230~ \304\261"
 380      304059E9 
 380      993F02DD 
 380      3F43D27B 
 380      256E987E 
 381 0395 EDCEE428 		.ascii	"\355\316\344(\260/\244\253\214\356\204\317`\310k\247"
 381      B02FA4AB 
 381      8CEE84CF 
 381      60C86BA7 
 382 03a5 21BAD308 		.ascii	"!\272\323\010\335i\262f\344\276Nx\310v\262\254-YAN\265"
 382      DD69B266 
 382      E4BE4E78 
 382      C876B2AC 
 382      2D59414E 
 383 03ba C295AACD 		.ascii	"\302\225\252\315\013`\243\200QV\353\324\275\023*!G\240"
 383      0B60A380 
 383      5156EBD4 
 383      BD132A21 
 383      47A0
 384 03cc 80C58E92 		.ascii	"\200\305\216\222i\255\014\260\272\000c^\2001\012\270"
 384      69AD0CB0 
 384      BA00635E 
 384      80310AB8 
 385 03dc 4501B629 		.ascii	"E\001\266)\233A(e\361\266\374\303\263\316^5\273\342"
 385      9B412865 
 385      F1B6FCC3 
 385      B3CE5E35 
 385      BBE2
 386 03ee C7BDE2C7 		.ascii	"\307\275\342\307i\374\004\215?\276T\321\023(T1\300\\"
 386      69FC048D 
 386      3FBE54D1 
 386      13285431 
 386      C05C
 387 0400 CBE97A3F 		.ascii	"\313\351z?\271\005\215\256\026\334\366\002\334\246\200"
 387      B9058DAE 
 387      16DCF602 
 387      DCA680
 388 040f 3B1460BD 		.ascii	";\024`\275[w\333\243\277\344?Eq\235d\375%Wtn\237\223"
 388      5B77DBA3 
 388      BFE43F45 
ARM GAS  e:\temp\ccUM5GSw.s 			page 31


 388      719D64FD 
 388      2557746E 
 389 0425 2A7C8576 		.ascii	"*|\205v\272\033?^\334Z&\270\376!\232\212S\254%\373\361"
 389      BA1B3F5E 
 389      DC5A26B8 
 389      FE219A8A 
 389      53AC25FB 
 390 043a 1F6C0673 		.ascii	"\037l\006s\236R\316\037\226\300\376#\274\317\335\364"
 390      9E52CE1F 
 390      96C0FE23 
 390      BCCFDDF4 
 391 044a CBCFDD6F 		.ascii	"\313\317\335o\277\367\035\320\271g4\343\361\306g\345"
 391      BFF71DD0 
 391      B96734E3 
 391      F1C667E5 
 392 045a 8C666946 		.ascii	"\214fiF\177\37626\251vw\356\367p\236\223\235\347\250"
 392      7FFE3236 
 392      A97677EE 
 392      F7709E93 
 392      9DE7A8
 393 046d B375B9D0 		.ascii	"\263u\271\320*\270;\017{\324j\227\235\31150!)151>51"
 393      2AB83B0F 
 393      7BD46A97 
 393      9DC93530 
 393      21293135 
 394 0485 262E3531 		.ascii	"&.51y\233z\313\326\217\"\3426m\342\242\266\210\231\242"
 394      799B7ACB 
 394      D68F22E2 
 394      366DE2A2 
 394      B68899A2 
 395 0499 31CD2CEA 		.ascii	"1\315,\352S\223\015Y\306tqGR\262!\356\275\035\356\356"
 395      53930D59 
 395      C6747147 
 395      52B221EE 
 395      BD1DEEEE 
 396 04ad 5B53A2D3 		.ascii	"[S\242\323\271P\305\022\277os\206!\375\263m\242I4\277"
 396      B950C512 
 396      BF6F7386 
 396      21FDB36D 
 396      A24934BF 
 397 04c1 427CD2F6 		.ascii	"B|\322\366\224\350O\2710\331\222\236e2\033\366$f\232"
 397      94E84FB9 
 397      30D9929E 
 397      65321BF6 
 397      24669A
 398 04d4 8D096999 		.ascii	"\215\011i\231\372\014\321\250K\317\336m2\246\351\365"
 398      FA0CD1A8 
 398      4BCFDE6D 
 398      32A6E9F5 
 399 04e4 46D1647A 		.ascii	"F\321dz\343\345\270w\322\263\315\331{E\023r\336\374"
 399      E3E5B877 
 399      D2B3CDD9 
 399      7B451372 
 399      DEFC
 400 04f6 EF0DD966 		.ascii	"\357\015\331f:ye2\243\243o\326\356L\363\373ANSF2\032"
 400      3A796532 
 400      A3A36FD6 
ARM GAS  e:\temp\ccUM5GSw.s 			page 32


 400      EE4CF3FB 
 400      414E5346 
 401 050c B34CA1AE 		.ascii	"\263L\241\256\365\207\237\213\306\370\014\303\2768C"
 401      F5879F8B 
 401      C6F80CC3 
 401      BE3843
 402 051b 56A65931 		.ascii	"V\246Y1o\323o\316\332\231\230\251\027\277H\331\263W"
 402      6FD36FCE 
 402      DA9998A9 
 402      17BF48D9 
 402      B357
 403 052d 4518B131 		.ascii	"E\030\2611\353^\3624\330e\373\330\210\266$\263q\235"
 403      EB5EF234 
 403      D865FBD8 
 403      88B624B3 
 403      719D
 404 053f A7857A85 		.ascii	"\247\205z\205x\332\222w\177)\206x\302\210)\330\323\204"
 404      78DA9277 
 404      7F298678 
 404      C28829D8 
 404      D384
 405 0551 2C5FA3B8 		.ascii	",_\243\270+6\346\037j\375\006w"
 405      2B36E61F 
 405      6AFD0677 
 406              		.text
 407              		.section	.gnu.lto_.symtab.6240bf7a,"",%progbits
 408 0000 4850495F 		.ascii	"HPI_IF_I2C_ISR\000"
 408      49465F49 
 408      32435F49 
 408      535200
 409 000f 00       		.ascii	"\000"
 410 0010 00       		.ascii	"\000"
 411 0011 00       		.ascii	"\000"
 412 0012 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 412      00000000 
 413 001a AD000000 		.ascii	"\255\000\000\000"
 414 001e 4850495F 		.ascii	"HPI_IF_customIntrHandler\000"
 414      49465F63 
 414      7573746F 
 414      6D496E74 
 414      7248616E 
 415 0037 00       		.ascii	"\000"
 416 0038 02       		.ascii	"\002"
 417 0039 00       		.ascii	"\000"
 418 003a 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 418      00000000 
 419 0042 B7000000 		.ascii	"\267\000\000\000"
 420 0046 4850495F 		.ascii	"HPI_IF_state\000"
 420      49465F73 
 420      74617465 
 420      00
 421 0053 00       		.ascii	"\000"
 422 0054 02       		.ascii	"\002"
 423 0055 00       		.ascii	"\000"
 424 0056 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 424      00000000 
 425 005e BF000000 		.ascii	"\277\000\000\000"
ARM GAS  e:\temp\ccUM5GSw.s 			page 33


 426 0062 4850495F 		.ascii	"HPI_IF_slStatus\000"
 426      49465F73 
 426      6C537461 
 426      74757300 
 427 0072 00       		.ascii	"\000"
 428 0073 02       		.ascii	"\002"
 429 0074 00       		.ascii	"\000"
 430 0075 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 430      00000000 
 431 007d C1000000 		.ascii	"\301\000\000\000"
 432 0081 4850495F 		.ascii	"HPI_IF_slOverFlowCount\000"
 432      49465F73 
 432      6C4F7665 
 432      72466C6F 
 432      77436F75 
 433 0098 00       		.ascii	"\000"
 434 0099 02       		.ascii	"\002"
 435 009a 00       		.ascii	"\000"
 436 009b 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 436      00000000 
 437 00a3 C3000000 		.ascii	"\303\000\000\000"
 438 00a7 4850495F 		.ascii	"HPI_IF_slRdBufIndexTmp\000"
 438      49465F73 
 438      6C526442 
 438      7566496E 
 438      64657854 
 439 00be 00       		.ascii	"\000"
 440 00bf 02       		.ascii	"\002"
 441 00c0 00       		.ascii	"\000"
 442 00c1 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 442      00000000 
 443 00c9 CB000000 		.ascii	"\313\000\000\000"
 444 00cd 4850495F 		.ascii	"HPI_IF_slRdBufIndex\000"
 444      49465F73 
 444      6C526442 
 444      7566496E 
 444      64657800 
 445 00e1 00       		.ascii	"\000"
 446 00e2 02       		.ascii	"\002"
 447 00e3 00       		.ascii	"\000"
 448 00e4 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 448      00000000 
 449 00ec CD000000 		.ascii	"\315\000\000\000"
 450 00f0 4850495F 		.ascii	"HPI_IF_slWrBufPtr\000"
 450      49465F73 
 450      6C577242 
 450      75665074 
 450      7200
 451 0102 00       		.ascii	"\000"
 452 0103 02       		.ascii	"\002"
 453 0104 00       		.ascii	"\000"
 454 0105 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 454      00000000 
 455 010d D0000000 		.ascii	"\320\000\000\000"
 456 0111 4850495F 		.ascii	"HPI_IF_slWrBufIndex\000"
 456      49465F73 
 456      6C577242 
ARM GAS  e:\temp\ccUM5GSw.s 			page 34


 456      7566496E 
 456      64657800 
 457 0125 00       		.ascii	"\000"
 458 0126 02       		.ascii	"\002"
 459 0127 00       		.ascii	"\000"
 460 0128 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 460      00000000 
 461 0130 D2000000 		.ascii	"\322\000\000\000"
 462 0134 4850495F 		.ascii	"HPI_IF_slWrBufSize\000"
 462      49465F73 
 462      6C577242 
 462      75665369 
 462      7A6500
 463 0147 00       		.ascii	"\000"
 464 0148 02       		.ascii	"\002"
 465 0149 00       		.ascii	"\000"
 466 014a 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 466      00000000 
 467 0152 D4000000 		.ascii	"\324\000\000\000"
 468 0156 4850495F 		.ascii	"HPI_IF_slRdBufSize\000"
 468      49465F73 
 468      6C526442 
 468      75665369 
 468      7A6500
 469 0169 00       		.ascii	"\000"
 470 016a 02       		.ascii	"\002"
 471 016b 00       		.ascii	"\000"
 472 016c 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 472      00000000 
 473 0174 D6000000 		.ascii	"\326\000\000\000"
 474 0178 4850495F 		.ascii	"HPI_IF_slRdBufPtr\000"
 474      49465F73 
 474      6C526442 
 474      75665074 
 474      7200
 475 018a 00       		.ascii	"\000"
 476 018b 02       		.ascii	"\002"
 477 018c 00       		.ascii	"\000"
 478 018d 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 478      00000000 
 479 0195 D8000000 		.ascii	"\330\000\000\000"
 480 0199 4850495F 		.ascii	"HPI_IF_I2CFwBlockReset\000"
 480      49465F49 
 480      32434677 
 480      426C6F63 
 480      6B526573 
 481 01b0 00       		.ascii	"\000"
 482 01b1 02       		.ascii	"\002"
 483 01b2 00       		.ascii	"\000"
 484 01b3 00000000 		.ascii	"\000\000\000\000\000\000\000\000"
 484      00000000 
 485 01bb AF000000 		.ascii	"\257\000\000\000"
 486              		.text
 487              		.section	.gnu.lto_.opts,"",%progbits
 488 0000 272D666D 		.ascii	"'-fmath-errno' '-fsigned-zeros' '-ftrapping-math' '"
 488      6174682D 
 488      6572726E 
ARM GAS  e:\temp\ccUM5GSw.s 			page 35


 488      6F272027 
 488      2D667369 
 489 0033 2D666E6F 		.ascii	"-fno-trapv' '-fno-openmp' '-fno-openacc' '-mcpu=cor"
 489      2D747261 
 489      70762720 
 489      272D666E 
 489      6F2D6F70 
 490 0066 7465782D 		.ascii	"tex-m0' '-mthumb' '-g' '-Os' '-Werror' '-ffunction-"
 490      6D302720 
 490      272D6D74 
 490      68756D62 
 490      2720272D 
 491 0099 73656374 		.ascii	"sections' '-ffat-lto-objects' '-finline-functions' "
 491      696F6E73 
 491      2720272D 
 491      66666174 
 491      2D6C746F 
 492 00cc 272D666C 		.ascii	"'-flto' '-fno-strict-aliasing'\000"
 492      746F2720 
 492      272D666E 
 492      6F2D7374 
 492      72696374 
 493              		.text
 494              		.cfi_sections	.debug_frame
 495              		.section	.text.HPI_IF_I2C_ISR,"ax",%progbits
 496              		.align	1
 497              		.global	HPI_IF_I2C_ISR
 498              		.code	16
 499              		.thumb_func
 500              		.type	HPI_IF_I2C_ISR, %function
 501              	HPI_IF_I2C_ISR:
 502              	.LFB0:
 503              		.file 1 "Generated_Source\\PSoC4\\HPI_IF_I2C_INT.c"
   1:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** * \file HPI_IF_I2C_INT.c
   3:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** * \version 4.0
   4:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** *
   5:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** * \brief
   6:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** *  This file provides the source code to the Interrupt Service Routine for
   7:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** *  the SCB Component in I2C mode.
   8:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** *
   9:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** * Note:
  10:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** *
  11:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** ********************************************************************************
  12:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** * \copyright
  13:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** * Copyright 2013-2017, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  19:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** #include "HPI_IF_PVT.h"
  20:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** #include "HPI_IF_I2C_PVT.h"
  21:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** #include "cyapicallbacks.h"
  22:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  23:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  24:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** /*******************************************************************************
ARM GAS  e:\temp\ccUM5GSw.s 			page 36


  25:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** * Function Name: HPI_IF_I2C_ISR
  26:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** ****************************************************************************//**
  27:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** *
  28:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** *  Handles the Interrupt Service Routine for the SCB I2C mode.
  29:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** *
  30:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** *******************************************************************************/
  31:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** CY_ISR(HPI_IF_I2C_ISR)
  32:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** {
 504              		.loc 1 32 0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 8
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508              	.LVL0:
 509 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 510              		.cfi_def_cfa_offset 32
 511              		.cfi_offset 0, -32
 512              		.cfi_offset 1, -28
 513              		.cfi_offset 2, -24
 514              		.cfi_offset 4, -20
 515              		.cfi_offset 5, -16
 516              		.cfi_offset 6, -12
 517              		.cfi_offset 7, -8
 518              		.cfi_offset 14, -4
  33:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     uint32 diffCount;
  34:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     uint32 endTransfer;
  35:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  36:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** #ifdef HPI_IF_I2C_ISR_ENTRY_CALLBACK
  37:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     HPI_IF_I2C_ISR_EntryCallback();
  38:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** #endif /* HPI_IF_I2C_ISR_ENTRY_CALLBACK */
  39:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  40:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** #if (HPI_IF_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
  41:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     uint32 response;
  42:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  43:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     response = HPI_IF_I2C_ACK_ADDR;
  44:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** #endif /* (HPI_IF_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
  45:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  46:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     endTransfer = 0u; /* Continue active transfer */
  47:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  48:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     /* Calls customer routine if registered */
  49:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     if(NULL != HPI_IF_customIntrHandler)
 519              		.loc 1 49 0
 520 0002 B24B     		ldr	r3, .L75
 521 0004 1B68     		ldr	r3, [r3]
 522 0006 002B     		cmp	r3, #0
 523 0008 00D0     		beq	.L2
  50:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     {
  51:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         HPI_IF_customIntrHandler();
 524              		.loc 1 51 0
 525 000a 9847     		blx	r3
 526              	.LVL1:
 527              	.L2:
  52:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     }
  53:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  54:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     if(HPI_IF_CHECK_INTR_I2C_EC_MASKED(HPI_IF_INTR_I2C_EC_WAKE_UP))
 528              		.loc 1 54 0
 529 000c B04B     		ldr	r3, .L75+4
 530 000e 1B68     		ldr	r3, [r3]
ARM GAS  e:\temp\ccUM5GSw.s 			page 37


 531 0010 DB07     		lsls	r3, r3, #31
 532 0012 02D5     		bpl	.L3
  55:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     {
  56:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         /* Mask-off after wakeup */
  57:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         HPI_IF_SetI2CExtClkInterruptMode(HPI_IF_NO_INTR_SOURCES);
 533              		.loc 1 57 0
 534 0014 0022     		movs	r2, #0
 535 0016 AF4B     		ldr	r3, .L75+8
 536 0018 1A60     		str	r2, [r3]
 537              	.L3:
  58:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     }
  59:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  60:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     /* Master and Slave error tracking:
  61:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     * Add the master state check to track only the master errors when the master is active or
  62:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     * track slave errors when the slave is active or idle.
  63:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     * A special MMS case: in the address phase with misplaced Start: the master sets the LOST_ARB a
  64:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     * slave BUS_ERR. The valid event is LOST_ARB comes from the master.
  65:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     */
  66:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     if(HPI_IF_CHECK_I2C_FSM_MASTER)
 538              		.loc 1 66 0
 539 001a 2020     		movs	r0, #32
 540 001c AE4B     		ldr	r3, .L75+12
 541 001e 1A78     		ldrb	r2, [r3]
 542 0020 0242     		tst	r2, r0
 543 0022 19D1     		bne	.L4
  67:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     {
  68:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #if(HPI_IF_I2C_MASTER)
  69:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         {
  70:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             /* INTR_MASTER_I2C_BUS_ERROR:
  71:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * A misplaced Start or Stop condition occurred on the bus: complete the transaction.
  72:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * The interrupt is cleared in I2C_FSM_EXIT_IDLE.
  73:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             */
  74:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             if(HPI_IF_CHECK_INTR_MASTER_MASKED(HPI_IF_INTR_MASTER_I2C_BUS_ERROR))
  75:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
  76:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_mstrStatus |= (uint16) (HPI_IF_I2C_MSTAT_ERR_XFER |
  77:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                                          HPI_IF_I2C_MSTAT_ERR_BUS_ERROR);
  78:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  79:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 endTransfer = HPI_IF_I2C_CMPLT_ANY_TRANSFER;
  80:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
  81:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  82:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             /* INTR_MASTER_I2C_ARB_LOST:
  83:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * The MultiMaster lost arbitrage during transaction.
  84:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * A Misplaced Start or Stop condition is treated as lost arbitration when the master dr
  85:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * The interrupt source is cleared in I2C_FSM_EXIT_IDLE.
  86:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             */
  87:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             if(HPI_IF_CHECK_INTR_MASTER_MASKED(HPI_IF_INTR_MASTER_I2C_ARB_LOST))
  88:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
  89:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_mstrStatus |= (uint16) (HPI_IF_I2C_MSTAT_ERR_XFER |
  90:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                                          HPI_IF_I2C_MSTAT_ERR_ARB_LOST);
  91:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  92:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 endTransfer = HPI_IF_I2C_CMPLT_ANY_TRANSFER;
  93:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
  94:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
  95:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             #if(HPI_IF_I2C_MULTI_MASTER_SLAVE)
  96:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
  97:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* I2C_MASTER_CMD_M_START_ON_IDLE:
  98:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 * MultiMaster-Slave does not generate start, because Slave was addressed.
ARM GAS  e:\temp\ccUM5GSw.s 			page 38


  99:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 * Pass control to slave.
 100:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 */
 101:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 if(HPI_IF_CHECK_I2C_MASTER_CMD(HPI_IF_I2C_MASTER_CMD_M_START_ON_IDLE))
 102:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 103:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_mstrStatus |= (uint16) (HPI_IF_I2C_MSTAT_ERR_XFER |
 104:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                                              HPI_IF_I2C_MSTAT_ERR_ABORT_XFER);
 105:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 106:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     endTransfer = HPI_IF_I2C_CMPLT_ANY_TRANSFER;
 107:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 108:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
 109:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             #endif
 110:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 111:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             /* The error handling common part:
 112:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * Sets a completion flag of the master transaction and passes control to:
 113:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             *  - I2C_FSM_EXIT_IDLE - to complete transaction in case of: ARB_LOST or BUS_ERR.
 114:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             *  - I2C_FSM_IDLE      - to take chance for the slave to process incoming transaction.
 115:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             */
 116:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             if(0u != endTransfer)
 117:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
 118:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* Set completion flags for master */
 119:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_mstrStatus |= (uint16) HPI_IF_GET_I2C_MSTAT_CMPLT;
 120:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 121:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 #if(HPI_IF_I2C_MULTI_MASTER_SLAVE)
 122:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 123:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     if(HPI_IF_CHECK_I2C_FSM_ADDR)
 124:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 125:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Start generation is set after another master starts accessing Slave.
 126:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * Clean-up master and turn to slave. Set state to IDLE.
 127:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         */
 128:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         if(HPI_IF_CHECK_I2C_MASTER_CMD(HPI_IF_I2C_MASTER_CMD_M_START_ON_IDLE))
 129:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 130:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_I2C_MASTER_CLEAR_START;
 131:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 132:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             endTransfer = HPI_IF_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave *
 133:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 134:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Valid arbitration lost on the address phase happens only when: master LO
 135:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * slave BUS_ERR is cleared. Only in that case set the state to IDLE without
 136:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         */
 137:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         else if((!HPI_IF_CHECK_INTR_SLAVE_MASKED(HPI_IF_INTR_SLAVE_I2C_BUS_ERROR))
 138:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                && HPI_IF_CHECK_INTR_MASTER_MASKED(HPI_IF_INTR_MASTER_I2C_ARB_LOST))
 139:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 140:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             endTransfer = HPI_IF_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave *
 141:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 142:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         else
 143:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 144:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             endTransfer = 0u; /* Causes I2C_FSM_EXIT_IDLE to be set below */
 145:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 146:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 147:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         if(0u != endTransfer) /* Clean-up master to proceed with slave */
 148:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 149:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_CLEAR_TX_FIFO; /* Shifter keeps address, clear it */
 150:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 151:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_DISABLE_MASTER_AUTO_DATA_ACK; /* In case of reading disable auto
 152:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 153:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Clean-up master interrupt sources */
 154:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_ClearMasterInterruptSource(HPI_IF_INTR_MASTER_ALL);
 155:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
ARM GAS  e:\temp\ccUM5GSw.s 			page 39


 156:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Disable data processing interrupts: they have to be cleared before *
 157:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_SetRxInterruptMode(HPI_IF_NO_INTR_SOURCES);
 158:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_SetTxInterruptMode(HPI_IF_NO_INTR_SOURCES);
 159:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 160:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_state = HPI_IF_I2C_FSM_IDLE;
 161:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 162:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         else
 163:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 164:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Set I2C_FSM_EXIT_IDLE for BUS_ERR and ARB_LOST (that is really bus e
 165:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_state = HPI_IF_I2C_FSM_EXIT_IDLE;
 166:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 167:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 168:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     else
 169:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 170:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Set I2C_FSM_EXIT_IDLE if any other state than address */
 171:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_state = HPI_IF_I2C_FSM_EXIT_IDLE;
 172:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 173:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 174:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 #else
 175:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 176:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* In case of LOST*/
 177:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_state = HPI_IF_I2C_FSM_EXIT_IDLE;
 178:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 179:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 #endif
 180:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
 181:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         }
 182:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #endif
 183:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     }
 184:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     else /* (HPI_IF_CHECK_I2C_FSM_SLAVE) */
 185:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     {
 186:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #if(HPI_IF_I2C_SLAVE)
 187:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         {
 188:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             /* INTR_SLAVE_I2C_BUS_ERROR or HPI_IF_INTR_SLAVE_I2C_ARB_LOST:
 189:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * A Misplaced Start or Stop condition occurred on the bus: set a flag
 190:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * to notify an error condition.
 191:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             */
 192:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             if(HPI_IF_CHECK_INTR_SLAVE_MASKED(HPI_IF_INTR_SLAVE_I2C_BUS_ERROR |
 544              		.loc 1 192 0
 545 0024 AD4A     		ldr	r2, .L75+16
 546 0026 1168     		ldr	r1, [r2]
 547 0028 0222     		movs	r2, #2
 548 002a FF32     		adds	r2, r2, #255
 549 002c 1142     		tst	r1, r2
 550 002e 13D0     		beq	.L4
 193:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                                         HPI_IF_INTR_SLAVE_I2C_ARB_LOST))
 194:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
 195:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 if(HPI_IF_CHECK_I2C_FSM_RD)
 551              		.loc 1 195 0
 552 0030 1978     		ldrb	r1, [r3]
 553 0032 AB4A     		ldr	r2, .L75+20
 554 0034 C907     		lsls	r1, r1, #31
 555 0036 06D5     		bpl	.L5
 196:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 197:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* TX direction: master reads from slave */
 198:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_slStatus &= (uint8) ~HPI_IF_I2C_SSTAT_RD_BUSY;
 556              		.loc 1 198 0
 557 0038 1178     		ldrb	r1, [r2]
ARM GAS  e:\temp\ccUM5GSw.s 			page 40


 558 003a 1E38     		subs	r0, r0, #30
 559 003c 8143     		bics	r1, r0
 560 003e 1170     		strb	r1, [r2]
 199:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_slStatus |= (uint8) (HPI_IF_I2C_SSTAT_RD_ERR |
 561              		.loc 1 199 0
 562 0040 1178     		ldrb	r1, [r2]
 563 0042 0730     		adds	r0, r0, #7
 564 0044 04E0     		b	.L67
 565              	.L5:
 200:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                                           HPI_IF_I2C_SSTAT_RD_CMPLT);
 201:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 202:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 else
 203:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 204:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* RX direction: master writes into slave */
 205:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_slStatus &= (uint8) ~HPI_IF_I2C_SSTAT_WR_BUSY;
 566              		.loc 1 205 0
 567 0046 1178     		ldrb	r1, [r2]
 568 0048 8143     		bics	r1, r0
 569 004a 1170     		strb	r1, [r2]
 206:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_slStatus |= (uint8) (HPI_IF_I2C_SSTAT_WR_ERR |
 570              		.loc 1 206 0
 571 004c 9021     		movs	r1, #144
 572 004e 1078     		ldrb	r0, [r2]
 573              	.L67:
 574 0050 0143     		orrs	r1, r0
 575 0052 1170     		strb	r1, [r2]
 207:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                                           HPI_IF_I2C_SSTAT_WR_CMPLT);
 208:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 209:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 210:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_state = HPI_IF_I2C_FSM_EXIT_IDLE;
 576              		.loc 1 210 0
 577 0054 0022     		movs	r2, #0
 578 0056 1A70     		strb	r2, [r3]
 579              	.L4:
 211:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
 212:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         }
 213:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #endif
 214:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     }
 215:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 216:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     /* States description:
 217:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     * Any Master operation starts from: the ADDR_RD/WR state as the master generates traffic on the
 218:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     * Any Slave operation starts from: the IDLE state as the slave always waits for actions from th
 219:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     */
 220:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 221:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     /* FSM Master */
 222:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     if(HPI_IF_CHECK_I2C_FSM_MASTER)
 580              		.loc 1 222 0
 581 0058 1A78     		ldrb	r2, [r3]
 582 005a 9206     		lsls	r2, r2, #26
 583 005c 00D5     		bpl	.LCB94
 584 005e 33E1     		b	.L1	@long jump
 585              	.LCB94:
 223:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     {
 224:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #if(HPI_IF_I2C_MASTER)
 225:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         {
 226:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             /* INTR_MASTER_I2C_STOP:
 227:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * A Stop condition was generated by the master: the end of the transaction.
ARM GAS  e:\temp\ccUM5GSw.s 			page 41


 228:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * Set completion flags to notify the API.
 229:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             */
 230:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             if(HPI_IF_CHECK_INTR_MASTER_MASKED(HPI_IF_INTR_MASTER_I2C_STOP))
 231:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
 232:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_ClearMasterInterruptSource(HPI_IF_INTR_MASTER_I2C_STOP);
 233:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 234:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_mstrStatus |= (uint16) HPI_IF_GET_I2C_MSTAT_CMPLT;
 235:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_state       = HPI_IF_I2C_FSM_IDLE;
 236:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
 237:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             else
 238:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
 239:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 if(HPI_IF_CHECK_I2C_FSM_ADDR) /* Address stage */
 240:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 241:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* INTR_MASTER_I2C_NACK:
 242:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     * The master sent an address but it was NACKed by the slave. Complete transacti
 243:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     */
 244:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     if(HPI_IF_CHECK_INTR_MASTER_MASKED(HPI_IF_INTR_MASTER_I2C_NACK))
 245:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 246:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_ClearMasterInterruptSource(HPI_IF_INTR_MASTER_I2C_NACK);
 247:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 248:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_mstrStatus |= (uint16) (HPI_IF_I2C_MSTAT_ERR_XFER |
 249:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                                                  HPI_IF_I2C_MSTAT_ERR_ADDR_NAK);
 250:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 251:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         endTransfer = HPI_IF_I2C_CMPLT_ANY_TRANSFER;
 252:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 253:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* INTR_TX_UNDERFLOW. The master sent an address:
 254:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     *  - TX direction: the clock is stretched after the ACK phase, because the TX F
 255:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     *    EMPTY. The TX EMPTY cleans all the TX interrupt sources.
 256:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     *  - RX direction: the 1st byte is received, but there is no ACK permission,
 257:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     *    the clock is stretched after 1 byte is received.
 258:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     */
 259:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     else
 260:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 261:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         if(HPI_IF_CHECK_I2C_FSM_RD) /* Reading */
 262:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 263:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_state = HPI_IF_I2C_FSM_MSTR_RD_DATA;
 264:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 265:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         else /* Writing */
 266:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 267:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_state = HPI_IF_I2C_FSM_MSTR_WR_DATA;
 268:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             if(0u != HPI_IF_mstrWrBufSize)
 269:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 270:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 /* Enable INTR.TX_EMPTY if there is data to transmit */
 271:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 HPI_IF_SetTxInterruptMode(HPI_IF_INTR_TX_EMPTY);
 272:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 273:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 274:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 275:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 276:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 277:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 if(HPI_IF_CHECK_I2C_FSM_DATA) /* Data phase */
 278:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 279:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     if(HPI_IF_CHECK_I2C_FSM_RD) /* Reading */
 280:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 281:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* INTR_RX_FULL:
 282:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * RX direction: the master received 8 bytes.
 283:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * Get data from RX FIFO and decide whether to ACK or  NACK the following by
 284:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         */
ARM GAS  e:\temp\ccUM5GSw.s 			page 42


 285:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         if(HPI_IF_CHECK_INTR_RX_MASKED(HPI_IF_INTR_RX_FULL))
 286:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 287:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Calculate difference */
 288:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             diffCount =  HPI_IF_mstrRdBufSize -
 289:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                         (HPI_IF_mstrRdBufIndex + HPI_IF_GET_RX_FIFO_ENTRIES);
 290:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 291:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Proceed transaction or end it when RX FIFO becomes FULL again */
 292:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             if(diffCount > HPI_IF_I2C_FIFO_SIZE)
 293:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 294:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 diffCount = HPI_IF_I2C_FIFO_SIZE;
 295:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 296:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             else
 297:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 298:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 if(0u == diffCount)
 299:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 {
 300:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     HPI_IF_DISABLE_MASTER_AUTO_DATA_ACK;
 301:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 302:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     diffCount   = HPI_IF_I2C_FIFO_SIZE;
 303:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     endTransfer = HPI_IF_I2C_CMPLT_ANY_TRANSFER;
 304:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 }
 305:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 306:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 307:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             for(; (0u != diffCount); diffCount--)
 308:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 309:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 HPI_IF_mstrRdBufPtr[HPI_IF_mstrRdBufIndex] = (uint8)
 310:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                                                                         HPI_IF_RX_F
 311:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 HPI_IF_mstrRdBufIndex++;
 312:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 313:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 314:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* INTR_RX_NOT_EMPTY:
 315:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * RX direction: the master received one data byte, ACK or NACK it.
 316:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * The last byte is stored and NACKed by the master. The NACK and Stop is
 317:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * generated by one command generate Stop.
 318:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         */
 319:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         else if(HPI_IF_CHECK_INTR_RX_MASKED(HPI_IF_INTR_RX_NOT_EMPTY))
 320:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 321:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Put data in component buffer */
 322:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_mstrRdBufPtr[HPI_IF_mstrRdBufIndex] = (uint8) HPI_IF_RX_FIFO_RD_
 323:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_mstrRdBufIndex++;
 324:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 325:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             if(HPI_IF_mstrRdBufIndex < HPI_IF_mstrRdBufSize)
 326:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 327:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 HPI_IF_I2C_MASTER_GENERATE_ACK;
 328:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 329:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             else
 330:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 331:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                endTransfer = HPI_IF_I2C_CMPLT_ANY_TRANSFER;
 332:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 333:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 334:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         else
 335:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 336:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Do nothing */
 337:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 338:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 339:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_ClearRxInterruptSource(HPI_IF_INTR_RX_ALL);
 340:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 341:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     else /* Writing */
ARM GAS  e:\temp\ccUM5GSw.s 			page 43


 342:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 343:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* INTR_MASTER_I2C_NACK :
 344:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * The master writes data to the slave and NACK was received: not all the by
 345:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * written to the slave from the TX FIFO. Revert the index if there is data 
 346:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * the TX FIFO and pass control to a complete transfer.
 347:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         */
 348:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         if(HPI_IF_CHECK_INTR_MASTER_MASKED(HPI_IF_INTR_MASTER_I2C_NACK))
 349:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 350:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_ClearMasterInterruptSource(HPI_IF_INTR_MASTER_I2C_NACK);
 351:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 352:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Rollback write buffer index: NACKed byte remains in shifter */
 353:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_mstrWrBufIndexTmp -= (HPI_IF_GET_TX_FIFO_ENTRIES +
 354:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                                                    HPI_IF_GET_TX_FIFO_SR_VALID);
 355:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 356:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Update number of transferred bytes */
 357:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_mstrWrBufIndex = HPI_IF_mstrWrBufIndexTmp;
 358:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 359:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_mstrStatus |= (uint16) (HPI_IF_I2C_MSTAT_ERR_XFER |
 360:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                                                      HPI_IF_I2C_MSTAT_ERR_SHORT_XFE
 361:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 362:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_CLEAR_TX_FIFO;
 363:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 364:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             endTransfer = HPI_IF_I2C_CMPLT_ANY_TRANSFER;
 365:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 366:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* INTR_TX_EMPTY :
 367:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * TX direction: the TX FIFO is EMPTY, the data from the buffer needs to be 
 368:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * When there is no data in the component buffer, the underflow interrupt is
 369:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * enabled to catch when all the data has been transferred.
 370:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         */
 371:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         else if(HPI_IF_CHECK_INTR_TX_MASKED(HPI_IF_INTR_TX_EMPTY))
 372:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 373:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             while(HPI_IF_I2C_FIFO_SIZE != HPI_IF_GET_TX_FIFO_ENTRIES)
 374:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 375:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 /* The temporary mstrWrBufIndexTmp is used because slave could NACK
 376:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 * roll-back required in this case. The mstrWrBufIndex is updated at
 377:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 */
 378:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 if(HPI_IF_mstrWrBufIndexTmp < HPI_IF_mstrWrBufSize)
 379:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 {
 380:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 #if(!HPI_IF_CY_SCBIP_V0)
 381:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                    /* Clear INTR_TX.UNDERFLOW before putting the last byte into TX 
 382:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     * a proper trigger at the end of transaction when INTR_TX.UNDER
 383:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     * event. Ticket ID# 156735.
 384:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     */
 385:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     if(HPI_IF_mstrWrBufIndexTmp == (HPI_IF_mstrWrBufSize - 1u))
 386:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     {
 387:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                         HPI_IF_ClearTxInterruptSource(HPI_IF_INTR_TX_UNDERFLOW);
 388:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                         HPI_IF_SetTxInterruptMode(HPI_IF_INTR_TX_UNDERFLOW);
 389:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     }
 390:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                  #endif /* (!HPI_IF_CY_SCBIP_V0) */
 391:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 392:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     /* Put data into TX FIFO */
 393:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     HPI_IF_TX_FIFO_WR_REG = (uint32) HPI_IF_mstrWrBufPtr[HPI_IF_mst
 394:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     HPI_IF_mstrWrBufIndexTmp++;
 395:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 }
 396:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 else
 397:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 {
 398:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     break; /* No more data to put */
ARM GAS  e:\temp\ccUM5GSw.s 			page 44


 399:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 }
 400:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 401:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 402:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         #if(HPI_IF_CY_SCBIP_V0)
 403:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             if(HPI_IF_mstrWrBufIndexTmp == HPI_IF_mstrWrBufSize)
 404:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 405:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 HPI_IF_SetTxInterruptMode(HPI_IF_INTR_TX_UNDERFLOW);
 406:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 407:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 408:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_ClearTxInterruptSource(HPI_IF_INTR_TX_ALL);
 409:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         #else
 410:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_ClearTxInterruptSource(HPI_IF_INTR_TX_EMPTY);
 411:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         #endif /* (HPI_IF_CY_SCBIP_V0) */
 412:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 413:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* INTR_TX_UNDERFLOW:
 414:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * TX direction: all data from the TX FIFO was transferred to the slave.
 415:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * The transaction needs to be completed.
 416:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         */
 417:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         else if(HPI_IF_CHECK_INTR_TX_MASKED(HPI_IF_INTR_TX_UNDERFLOW))
 418:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 419:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Update number of transferred bytes */
 420:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_mstrWrBufIndex = HPI_IF_mstrWrBufIndexTmp;
 421:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 422:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             endTransfer = HPI_IF_I2C_CMPLT_ANY_TRANSFER;
 423:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 424:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         else
 425:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 426:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Do nothing */
 427:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 428:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 429:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 430:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 431:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 if(0u != endTransfer) /* Complete transfer */
 432:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 433:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Clean-up master after reading: only in case of NACK */
 434:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_DISABLE_MASTER_AUTO_DATA_ACK;
 435:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 436:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Disable data processing interrupts: they have to be cleared before */
 437:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_SetRxInterruptMode(HPI_IF_NO_INTR_SOURCES);
 438:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_SetTxInterruptMode(HPI_IF_NO_INTR_SOURCES);
 439:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 440:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     if(HPI_IF_CHECK_I2C_MODE_NO_STOP(HPI_IF_mstrControl))
 441:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 442:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* On-going transaction is suspended: the ReStart is generated by the API r
 443:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_mstrStatus |= (uint16) (HPI_IF_I2C_MSTAT_XFER_HALT |
 444:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                                                  HPI_IF_GET_I2C_MSTAT_CMPLT);
 445:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 446:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_state = HPI_IF_I2C_FSM_MSTR_HALT;
 447:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 448:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     else
 449:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 450:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Complete transaction: exclude the data processing state and generate Sto
 451:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * The completion status will be set after Stop generation.
 452:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * A special case is read: because NACK and Stop are generated by the comman
 453:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * Lost arbitration can occur during NACK generation when
 454:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * the other master is still reading from the slave.
 455:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         */
ARM GAS  e:\temp\ccUM5GSw.s 			page 45


 456:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_I2C_MASTER_GENERATE_STOP;
 457:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 458:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 459:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
 460:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 461:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         } /* (HPI_IF_I2C_MASTER) */
 462:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #endif
 463:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 464:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     } /* (HPI_IF_CHECK_I2C_FSM_MASTER) */
 465:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 466:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 467:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     /* FSM Slave */
 468:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     else if(HPI_IF_CHECK_I2C_FSM_SLAVE)
 586              		.loc 1 468 0
 587 0060 1A78     		ldrb	r2, [r3]
 588 0062 D206     		lsls	r2, r2, #27
 589 0064 00D4     		bmi	.LCB101
 590 0066 2DE1     		b	.L9	@long jump
 591              	.LCB101:
 469:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     {
 470:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #if(HPI_IF_I2C_SLAVE)
 471:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         {
 472:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             /* INTR_SLAVE_NACK:
 473:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * The master completes reading the slave: the appropriate flags have to be set.
 474:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * The TX FIFO is cleared after an overflow condition is set.
 475:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             */
 476:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             if(HPI_IF_CHECK_INTR_SLAVE_MASKED(HPI_IF_INTR_SLAVE_I2C_NACK))
 592              		.loc 1 476 0
 593 0068 0222     		movs	r2, #2
 594 006a 9C48     		ldr	r0, .L75+16
 595 006c 0168     		ldr	r1, [r0]
 596 006e 1142     		tst	r1, r2
 597 0070 34D0     		beq	.L10
 477:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
 478:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_ClearSlaveInterruptSource(HPI_IF_INTR_SLAVE_I2C_NACK);
 598              		.loc 1 478 0
 599 0072 9C49     		ldr	r1, .L75+24
 600 0074 9C4D     		ldr	r5, .L75+28
 601 0076 0A60     		str	r2, [r1]
 479:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 480:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* All entries that remain in TX FIFO are: FIFO Size + 1 (SHIFTER) */
 481:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 diffCount = (HPI_IF_GET_TX_FIFO_ENTRIES + HPI_IF_GET_TX_FIFO_SR_VALID);
 602              		.loc 1 481 0
 603 0078 9C49     		ldr	r1, .L75+32
 604 007a 1D32     		adds	r2, r2, #29
 605 007c 0C68     		ldr	r4, [r1]
 606 007e 0968     		ldr	r1, [r1]
 607 0080 2240     		ands	r2, r4
 482:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 483:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 if(HPI_IF_slOverFlowCount > diffCount) /* Overflow */
 608              		.loc 1 483 0
 609 0082 9B4C     		ldr	r4, .L75+36
 481:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 610              		.loc 1 481 0
 611 0084 0904     		lsls	r1, r1, #16
 612 0086 C90F     		lsrs	r1, r1, #31
 613              		.loc 1 483 0
ARM GAS  e:\temp\ccUM5GSw.s 			page 46


 614 0088 2678     		ldrb	r6, [r4]
 481:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 615              		.loc 1 481 0
 616 008a 8A18     		adds	r2, r1, r2
 617              	.LVL2:
 618 008c 9449     		ldr	r1, .L75+20
 619              		.loc 1 483 0
 620 008e B242     		cmp	r2, r6
 621 0090 04D2     		bcs	.L11
 484:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 485:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_slStatus |= (uint8) HPI_IF_I2C_SSTAT_RD_OVFL;
 622              		.loc 1 485 0
 623 0092 0426     		movs	r6, #4
 624 0094 0A78     		ldrb	r2, [r1]
 625              	.LVL3:
 626 0096 3243     		orrs	r2, r6
 627 0098 0A70     		strb	r2, [r1]
 628 009a 04E0     		b	.L12
 629              	.LVL4:
 630              	.L11:
 486:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 487:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 else /* No Overflow */
 488:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 489:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Roll-back temporary index */
 490:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_slRdBufIndexTmp -= (diffCount - HPI_IF_slOverFlowCount);
 631              		.loc 1 490 0
 632 009c 2778     		ldrb	r7, [r4]
 633 009e 2E68     		ldr	r6, [r5]
 634 00a0 D21B     		subs	r2, r2, r7
 635              	.LVL5:
 636 00a2 B21A     		subs	r2, r6, r2
 637 00a4 2A60     		str	r2, [r5]
 638              	.L12:
 491:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 492:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 493:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* Update slave of transferred bytes */
 494:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_slRdBufIndex = HPI_IF_slRdBufIndexTmp;
 639              		.loc 1 494 0
 640 00a6 2D68     		ldr	r5, [r5]
 641 00a8 924A     		ldr	r2, .L75+40
 642 00aa 1560     		str	r5, [r2]
 495:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 496:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* Clean-up TX FIFO */
 497:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_SetTxInterruptMode(HPI_IF_NO_INTR_SOURCES);
 643              		.loc 1 497 0
 644 00ac 0022     		movs	r2, #0
 645 00ae 924D     		ldr	r5, .L75+44
 646 00b0 2A60     		str	r2, [r5]
 498:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_slOverFlowCount = 0u;
 499:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_CLEAR_TX_FIFO;
 647              		.loc 1 499 0
 648 00b2 8025     		movs	r5, #128
 498:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_slOverFlowCount = 0u;
 649              		.loc 1 498 0
 650 00b4 2270     		strb	r2, [r4]
 651              		.loc 1 499 0
 652 00b6 914C     		ldr	r4, .L75+48
ARM GAS  e:\temp\ccUM5GSw.s 			page 47


 653 00b8 6D02     		lsls	r5, r5, #9
 654 00ba 2268     		ldr	r2, [r4]
 655 00bc 2A43     		orrs	r2, r5
 656 00be 2260     		str	r2, [r4]
 657 00c0 2568     		ldr	r5, [r4]
 658 00c2 8F4A     		ldr	r2, .L75+52
 659 00c4 2A40     		ands	r2, r5
 660 00c6 2260     		str	r2, [r4]
 500:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 501:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* Complete master reading */
 502:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_slStatus &= (uint8) ~HPI_IF_I2C_SSTAT_RD_BUSY;
 661              		.loc 1 502 0
 662 00c8 0224     		movs	r4, #2
 663 00ca 0A78     		ldrb	r2, [r1]
 664 00cc A243     		bics	r2, r4
 665 00ce 0A70     		strb	r2, [r1]
 503:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_slStatus |= (uint8)  HPI_IF_I2C_SSTAT_RD_CMPLT;
 666              		.loc 1 503 0
 667 00d0 0A78     		ldrb	r2, [r1]
 668 00d2 013C     		subs	r4, r4, #1
 669 00d4 2243     		orrs	r2, r4
 670 00d6 0A70     		strb	r2, [r1]
 504:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_state     =  HPI_IF_I2C_FSM_IDLE;
 671              		.loc 1 504 0
 672 00d8 1022     		movs	r2, #16
 673 00da 1A70     		strb	r2, [r3]
 674              	.L10:
 505:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 
 506:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             #ifdef HPI_IF_I2C_SLAVE_CMPLT_CALLBACK
 507:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* Read complete */
 508:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_I2C_SlaveCompleteCallback();
 509:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             #endif /* HPI_IF_I2C_SLAVE_CMPLT_CALLBACK */
 510:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
 511:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 512:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 513:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             /* INTR_SLAVE_I2C_WRITE_STOP:
 514:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * The master completes writing to the slave: the appropriate flags have to be set.
 515:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * The RX FIFO contains 1-8 bytes from the previous transaction which needs to be read.
 516:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * There is a possibility that RX FIFO contains an address, it needs to leave it there.
 517:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             */
 518:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             if(HPI_IF_CHECK_INTR_SLAVE_MASKED(HPI_IF_INTR_SLAVE_I2C_WRITE_STOP))
 675              		.loc 1 518 0
 676 00dc 0822     		movs	r2, #8
 677 00de 0168     		ldr	r1, [r0]
 678 00e0 1142     		tst	r1, r2
 679 00e2 35D0     		beq	.L13
 519:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
 520:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_ClearSlaveInterruptSource(HPI_IF_INTR_SLAVE_I2C_WRITE_STOP);
 680              		.loc 1 520 0
 681 00e4 7F49     		ldr	r1, .L75+24
 682 00e6 0A60     		str	r2, [r1]
 521:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 522:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* Read bytes from RX FIFO when auto data ACK receive logic is enabled. Otherwise a
 523:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 * were already read from the RX FIFO except for address byte which has to stay here
 524:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 * I2C_ADDR_MATCH.
 525:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 */
 526:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 if (0u != (HPI_IF_I2C_CTRL_REG & HPI_IF_I2C_CTRL_S_READY_DATA_ACK))
ARM GAS  e:\temp\ccUM5GSw.s 			page 48


 683              		.loc 1 526 0
 684 00e8 864A     		ldr	r2, .L75+56
 685 00ea 1168     		ldr	r1, [r2]
 686 00ec 8904     		lsls	r1, r1, #18
 687 00ee 17D5     		bpl	.L15
 527:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 528:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     while(0u != HPI_IF_GET_RX_FIFO_ENTRIES)
 529:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 530:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         #if(HPI_IF_CHECK_I2C_ACCEPT_ADDRESS)
 531:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 532:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             if((1u == HPI_IF_GET_RX_FIFO_ENTRIES) &&
 533:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                (HPI_IF_CHECK_INTR_SLAVE_MASKED(HPI_IF_INTR_SLAVE_I2C_ADDR_MATCH)))
 534:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 535:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 break; /* Leave address in RX FIFO */
 536:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 537:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 538:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         #endif
 539:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 540:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Put data in component buffer */
 541:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_slWrBufPtr[HPI_IF_slWrBufIndex] = (uint8) HPI_IF_RX_FIFO_RD_REG;
 688              		.loc 1 541 0
 689 00f0 8549     		ldr	r1, .L75+60
 690 00f2 864F     		ldr	r7, .L75+64
 691              	.L66:
 528:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 692              		.loc 1 528 0
 693 00f4 1F25     		movs	r5, #31
 694 00f6 864C     		ldr	r4, .L75+68
 695 00f8 2468     		ldr	r4, [r4]
 696 00fa 2C42     		tst	r4, r5
 697 00fc 0CD0     		beq	.L72
 698              		.loc 1 541 0
 699 00fe 6E46     		mov	r6, sp
 700 0100 0C68     		ldr	r4, [r1]
 701 0102 3D68     		ldr	r5, [r7]
 702 0104 2C19     		adds	r4, r5, r4
 703 0106 834D     		ldr	r5, .L75+72
 704 0108 2D68     		ldr	r5, [r5]
 705 010a F571     		strb	r5, [r6, #7]
 706 010c F579     		ldrb	r5, [r6, #7]
 707 010e 2570     		strb	r5, [r4]
 542:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_slWrBufIndex++;
 708              		.loc 1 542 0
 709 0110 0C68     		ldr	r4, [r1]
 710 0112 0134     		adds	r4, r4, #1
 711 0114 0C60     		str	r4, [r1]
 712 0116 EDE7     		b	.L66
 713              	.L72:
 543:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 544:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 545:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_DISABLE_SLAVE_AUTO_DATA;
 714              		.loc 1 545 0
 715 0118 1468     		ldr	r4, [r2]
 716 011a 7F49     		ldr	r1, .L75+76
 717 011c 2140     		ands	r1, r4
 718 011e 1160     		str	r1, [r2]
 719              	.L15:
ARM GAS  e:\temp\ccUM5GSw.s 			page 49


 546:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 547:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 548:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 if(HPI_IF_CHECK_INTR_RX(HPI_IF_INTR_RX_OVERFLOW))
 720              		.loc 1 548 0
 721 0120 7E4A     		ldr	r2, .L75+80
 722 0122 6F49     		ldr	r1, .L75+20
 723 0124 1568     		ldr	r5, [r2]
 724 0126 1400     		movs	r4, r2
 725 0128 AA06     		lsls	r2, r5, #26
 726 012a 03D5     		bpl	.L17
 549:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 550:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_slStatus |= (uint8) HPI_IF_I2C_SSTAT_WR_OVFL;
 727              		.loc 1 550 0
 728 012c 4025     		movs	r5, #64
 729 012e 0A78     		ldrb	r2, [r1]
 730 0130 2A43     		orrs	r2, r5
 731 0132 0A70     		strb	r2, [r1]
 732              	.L17:
 551:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 552:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 553:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* Clears RX interrupt sources triggered on data receiving */
 554:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_SetRxInterruptMode(HPI_IF_NO_INTR_SOURCES);
 733              		.loc 1 554 0
 734 0134 0025     		movs	r5, #0
 735 0136 7A4A     		ldr	r2, .L75+84
 736 0138 1560     		str	r5, [r2]
 555:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_ClearRxInterruptSource(HPI_IF_INTR_RX_ALL);
 737              		.loc 1 555 0
 738 013a 7A4A     		ldr	r2, .L75+88
 739 013c 2260     		str	r2, [r4]
 556:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 557:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* Complete master writing */
 558:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_slStatus &= (uint8) ~HPI_IF_I2C_SSTAT_WR_BUSY;
 740              		.loc 1 558 0
 741 013e 2024     		movs	r4, #32
 742 0140 0A78     		ldrb	r2, [r1]
 743 0142 A243     		bics	r2, r4
 744 0144 0A70     		strb	r2, [r1]
 559:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_slStatus |= (uint8)  HPI_IF_I2C_SSTAT_WR_CMPLT;
 745              		.loc 1 559 0
 746 0146 0A78     		ldrb	r2, [r1]
 747 0148 103C     		subs	r4, r4, #16
 748 014a 2243     		orrs	r2, r4
 749 014c 0A70     		strb	r2, [r1]
 560:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_state     =  HPI_IF_I2C_FSM_IDLE;
 750              		.loc 1 560 0
 751 014e 1C70     		strb	r4, [r3]
 752              	.L13:
 561:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 562:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             #ifdef HPI_IF_I2C_SLAVE_CMPLT_CALLBACK
 563:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* Write complete */
 564:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_I2C_SlaveCompleteCallback();
 565:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             #endif /* HPI_IF_I2C_SLAVE_CMPLT_CALLBACK */
 566:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
 567:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 568:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 569:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             /* INTR_SLAVE_I2C_ADDR_MATCH or INTR_SLAVE_I2C_GENERAL:
ARM GAS  e:\temp\ccUM5GSw.s 			page 50


 570:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * The address match or general call address event starts the slave operation:
 571:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * after leaving the TX or RX direction has to be chosen.
 572:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * The wakeup interrupt must be cleared only after an address match is set.
 573:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             */
 574:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #if (HPI_IF_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 575:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             if (HPI_IF_CHECK_INTR_SLAVE_MASKED(HPI_IF_INTR_SLAVE_I2C_ADDR_MATCH |
 576:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                                          HPI_IF_INTR_SLAVE_I2C_GENERAL))
 577:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #else
 578:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             if (HPI_IF_CHECK_INTR_SLAVE_MASKED(HPI_IF_INTR_SLAVE_I2C_ADDR_MATCH))
 753              		.loc 1 578 0
 754 0150 0268     		ldr	r2, [r0]
 755 0152 5206     		lsls	r2, r2, #25
 756 0154 3ED5     		bpl	.L18
 579:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #endif /* (HPI_IF_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 580:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
 581:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* Clear externally clocked address match interrupt source when internally clocked 
 582:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_ClearI2CExtClkInterruptSource(HPI_IF_INTR_I2C_EC_WAKE_UP);
 757              		.loc 1 582 0
 758 0156 0121     		movs	r1, #1
 759 0158 734A     		ldr	r2, .L75+92
 760 015a 1160     		str	r1, [r2]
 583:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 584:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 #if (HPI_IF_I2C_CUSTOM_ADDRESS_HANDLER)
 585:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 586:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     if (NULL != HPI_IF_customAddressHandler)
 587:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 588:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Call custom address handler */
 589:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         response = HPI_IF_customAddressHandler();
 590:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 591:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     else
 592:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 593:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Read address from the RX FIFO. If there is no address underflow triggers
 594:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         * component does not use that source. */
 595:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         (void) HPI_IF_RX_FIFO_RD_REG;
 596:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         response = HPI_IF_I2C_ACK_ADDR;
 597:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 598:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 599:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Clears RX sources after address was received in the RX FIFO */
 600:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_ClearRxInterruptSource(HPI_IF_INTR_RX_ALL);
 601:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 602:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 #endif
 603:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 604:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             #if (HPI_IF_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 605:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 if (response == HPI_IF_I2C_NAK_ADDR)
 606:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 607:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 #if (!HPI_IF_CY_SCBIP_V0)
 608:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Disable write stop interrupt source as it triggers after address was NACKed.
 609:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_DISABLE_INTR_SLAVE(HPI_IF_INTR_SLAVE_I2C_WRITE_STOP);
 610:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 #endif /* (!HPI_IF_CY_SCBIP_V0) */
 611:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 612:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Clear address match and stop history */
 613:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_ClearSlaveInterruptSource(HPI_IF_INTR_SLAVE_ALL);
 614:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 615:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* ACK the address byte */
 616:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_I2C_SLAVE_GENERATE_NACK;
 617:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 618:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 else
ARM GAS  e:\temp\ccUM5GSw.s 			page 51


 619:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             #endif /* (HPI_IF_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 620:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 621:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     if(HPI_IF_CHECK_I2C_STATUS(HPI_IF_I2C_STATUS_S_READ))
 761              		.loc 1 621 0
 762 015c 734A     		ldr	r2, .L75+96
 763 015e 6049     		ldr	r1, .L75+20
 764 0160 1068     		ldr	r0, [r2]
 765 0162 1022     		movs	r2, #16
 766 0164 1042     		tst	r0, r2
 767 0166 0BD0     		beq	.L19
 622:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* TX direction: master reads from slave */
 623:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 624:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_SetTxInterruptMode(HPI_IF_INTR_TX_EMPTY);
 768              		.loc 1 624 0
 769 0168 6348     		ldr	r0, .L75+44
 770 016a 0260     		str	r2, [r0]
 625:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 626:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Set temporary index to address buffer clear from API */
 627:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_slRdBufIndexTmp = HPI_IF_slRdBufIndex;
 771              		.loc 1 627 0
 772 016c 614A     		ldr	r2, .L75+40
 773 016e 1068     		ldr	r0, [r2]
 774 0170 5D4A     		ldr	r2, .L75+28
 775 0172 1060     		str	r0, [r2]
 628:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 629:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Start master reading */
 630:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_slStatus |= (uint8) HPI_IF_I2C_SSTAT_RD_BUSY;
 776              		.loc 1 630 0
 777 0174 0220     		movs	r0, #2
 778 0176 0A78     		ldrb	r2, [r1]
 779 0178 0243     		orrs	r2, r0
 780 017a 0A70     		strb	r2, [r1]
 631:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_state     = HPI_IF_I2C_FSM_SL_RD;
 781              		.loc 1 631 0
 782 017c 1222     		movs	r2, #18
 783 017e 1DE0     		b	.L69
 784              	.L19:
 632:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 633:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     else
 634:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* RX direction: master writes into slave */
 635:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 636:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Calculate available buffer size */
 637:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         diffCount = (HPI_IF_slWrBufSize - HPI_IF_slWrBufIndex);
 785              		.loc 1 637 0
 786 0180 6B4A     		ldr	r2, .L75+100
 787 0182 6148     		ldr	r0, .L75+60
 788 0184 1268     		ldr	r2, [r2]
 789 0186 0068     		ldr	r0, [r0]
 790 0188 121A     		subs	r2, r2, r0
 791              	.LVL6:
 638:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 639:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     #if (HPI_IF_CY_SCBIP_V0)
 640:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         if(diffCount < HPI_IF_I2C_FIFO_SIZE)
 641:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Receive data: byte-by-byte */
 642:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 643:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_SetRxInterruptMode(HPI_IF_INTR_RX_NOT_EMPTY);
 644:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
ARM GAS  e:\temp\ccUM5GSw.s 			page 52


 645:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         else
 646:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Receive data: into RX FIFO */
 647:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 648:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             if(diffCount == HPI_IF_I2C_FIFO_SIZE)
 649:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 650:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 /* NACK when RX FIFO become FULL */
 651:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 HPI_IF_ENABLE_SLAVE_AUTO_DATA;
 652:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 653:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             else
 654:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 655:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 /* Stretch clock when RX FIFO becomes FULL */
 656:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 HPI_IF_ENABLE_SLAVE_AUTO_DATA_ACK;
 657:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 HPI_IF_SetRxInterruptMode(HPI_IF_INTR_RX_FULL);
 658:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 659:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 660:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 661:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     #else
 662:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         #if(HPI_IF_CHECK_I2C_ACCEPT_ADDRESS)
 663:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 664:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Enable RX.NOT_EMPTY interrupt source to receive byte by byte.
 665:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             * The byte by byte receive is always chosen for the case when an addres
 666:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             * in RX FIFO. Ticket ID#175559.
 667:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             */
 668:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_SetRxInterruptMode(HPI_IF_INTR_RX_NOT_EMPTY);
 669:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 670:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         #else
 671:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 672:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             if(diffCount < HPI_IF_I2C_FIFO_SIZE)
 673:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Receive data: byte-by-byte */
 674:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 675:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 HPI_IF_SetRxInterruptMode(HPI_IF_INTR_RX_NOT_EMPTY);
 792              		.loc 1 675 0
 793 018a 0420     		movs	r0, #4
 672:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Receive data: byte-by-byte */
 794              		.loc 1 672 0
 795 018c 072A     		cmp	r2, #7
 796 018e 0ED9     		bls	.L68
 797 0190 5C48     		ldr	r0, .L75+56
 676:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 677:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             else
 678:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Receive data: into RX FIFO */
 679:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             {
 680:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 if(diffCount == HPI_IF_I2C_FIFO_SIZE)
 798              		.loc 1 680 0
 799 0192 082A     		cmp	r2, #8
 800 0194 05D1     		bne	.L23
 681:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 {
 682:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     /* NACK when RX FIFO become FULL */
 683:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     HPI_IF_ENABLE_SLAVE_AUTO_DATA;
 801              		.loc 1 683 0
 802 0196 A024     		movs	r4, #160
 803 0198 0268     		ldr	r2, [r0]
 804              	.LVL7:
 805 019a 2402     		lsls	r4, r4, #8
 806 019c 2243     		orrs	r2, r4
 807 019e 0260     		str	r2, [r0]
 808 01a0 07E0     		b	.L22
ARM GAS  e:\temp\ccUM5GSw.s 			page 53


 809              	.LVL8:
 810              	.L23:
 684:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 }
 685:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 else
 686:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 {
 687:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     /* Stretch clock when RX FIFO becomes FULL */
 688:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     HPI_IF_ENABLE_SLAVE_AUTO_DATA_ACK;
 811              		.loc 1 688 0
 812 01a2 8024     		movs	r4, #128
 813 01a4 0268     		ldr	r2, [r0]
 814              	.LVL9:
 815 01a6 A401     		lsls	r4, r4, #6
 816 01a8 2243     		orrs	r2, r4
 817 01aa 0260     		str	r2, [r0]
 689:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                     HPI_IF_SetRxInterruptMode(HPI_IF_INTR_RX_FULL);
 818              		.loc 1 689 0
 819 01ac 0820     		movs	r0, #8
 820              	.L68:
 821 01ae 5C4A     		ldr	r2, .L75+84
 822 01b0 1060     		str	r0, [r2]
 823              	.L22:
 690:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                                 }
 691:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             }
 692:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 693:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         #endif
 694:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     #endif /* (HPI_IF_CY_SCBIP_V0) */
 695:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 696:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         /* Start master reading */
 697:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_slStatus |= (uint8) HPI_IF_I2C_SSTAT_WR_BUSY;
 824              		.loc 1 697 0
 825 01b2 2020     		movs	r0, #32
 826 01b4 0A78     		ldrb	r2, [r1]
 827 01b6 0243     		orrs	r2, r0
 828 01b8 0A70     		strb	r2, [r1]
 698:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_state     = HPI_IF_I2C_FSM_SL_WR;
 829              		.loc 1 698 0
 830 01ba 1122     		movs	r2, #17
 831              	.L69:
 699:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 700:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 701:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Clear address match and stop history */
 702:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_ClearSlaveInterruptSource(HPI_IF_INTR_SLAVE_ALL);
 703:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 704:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 #if (!HPI_IF_CY_SCBIP_V0)
 705:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Enable write stop interrupt source as it triggers after address was NACKed. 
 706:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_ENABLE_INTR_SLAVE(HPI_IF_INTR_SLAVE_I2C_WRITE_STOP);
 832              		.loc 1 706 0
 833 01bc 0821     		movs	r1, #8
 698:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_state     = HPI_IF_I2C_FSM_SL_WR;
 834              		.loc 1 698 0
 835 01be 1A70     		strb	r2, [r3]
 702:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 836              		.loc 1 702 0
 837 01c0 5C4A     		ldr	r2, .L75+104
 838 01c2 484B     		ldr	r3, .L75+24
 839 01c4 1A60     		str	r2, [r3]
 840              		.loc 1 706 0
ARM GAS  e:\temp\ccUM5GSw.s 			page 54


 841 01c6 5C4A     		ldr	r2, .L75+108
 842 01c8 1368     		ldr	r3, [r2]
 843 01ca 0B43     		orrs	r3, r1
 844 01cc 1360     		str	r3, [r2]
 707:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 #endif /* (!HPI_IF_CY_SCBIP_V0) */
 708:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 709:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* ACK the address byte */
 710:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_I2C_SLAVE_GENERATE_ACK;
 845              		.loc 1 710 0
 846 01ce 0122     		movs	r2, #1
 847 01d0 5A4B     		ldr	r3, .L75+112
 848 01d2 1A60     		str	r2, [r3]
 849              	.L18:
 711:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 712:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
 713:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 714:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             /* HPI_IF_INTR_RX_FULL:
 715:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * Get data from the RX FIFO and decide whether to ACK or NACK the following bytes
 716:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             */
 717:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             if(HPI_IF_CHECK_INTR_RX_MASKED(HPI_IF_INTR_RX_FULL))
 850              		.loc 1 717 0
 851 01d4 0821     		movs	r1, #8
 852 01d6 5A4B     		ldr	r3, .L75+116
 853 01d8 1A68     		ldr	r2, [r3]
 854 01da 0A42     		tst	r2, r1
 855 01dc 25D0     		beq	.L24
 718:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
 719:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* Calculate available buffer size to take into account that RX FIFO is FULL */
 720:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 diffCount =  HPI_IF_slWrBufSize -
 856              		.loc 1 720 0
 857 01de 544B     		ldr	r3, .L75+100
 858 01e0 494A     		ldr	r2, .L75+60
 859 01e2 1B68     		ldr	r3, [r3]
 860 01e4 1068     		ldr	r0, [r2]
 861 01e6 083B     		subs	r3, r3, #8
 862 01e8 1B1A     		subs	r3, r3, r0
 863              	.LVL10:
 721:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             (HPI_IF_slWrBufIndex + HPI_IF_I2C_FIFO_SIZE);
 722:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 723:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 if(diffCount > HPI_IF_I2C_FIFO_SIZE) /* Proceed transaction */
 724:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 725:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     diffCount   = HPI_IF_I2C_FIFO_SIZE;
 726:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 727:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 728:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 else /* End when FIFO becomes FULL again */
 729:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 730:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     endTransfer = HPI_IF_I2C_CMPLT_ANY_TRANSFER;
 864              		.loc 1 730 0
 865 01ea 0120     		movs	r0, #1
 723:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 866              		.loc 1 723 0
 867 01ec 8B42     		cmp	r3, r1
 868 01ee 01D9     		bls	.L25
 726:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 869              		.loc 1 726 0
 870 01f0 0020     		movs	r0, #0
 725:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
ARM GAS  e:\temp\ccUM5GSw.s 			page 55


 871              		.loc 1 725 0
 872 01f2 0B00     		movs	r3, r1
 873              	.LVL11:
 874              	.L25:
 731:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 732:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 733:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 for(; (0u != diffCount); diffCount--)
 734:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 735:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Put data in component buffer */
 736:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_slWrBufPtr[HPI_IF_slWrBufIndex] = (uint8) HPI_IF_RX_FIFO_RD_REG;
 875              		.loc 1 736 0 discriminator 1
 876 01f4 454C     		ldr	r4, .L75+64
 877 01f6 474D     		ldr	r5, .L75+72
 878              	.LVL12:
 879              	.L26:
 733:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 880              		.loc 1 733 0 discriminator 1
 881 01f8 002B     		cmp	r3, #0
 882 01fa 0AD0     		beq	.L73
 883              		.loc 1 736 0 discriminator 2
 884 01fc 1168     		ldr	r1, [r2]
 885 01fe 2668     		ldr	r6, [r4]
 733:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 886              		.loc 1 733 0 discriminator 2
 887 0200 013B     		subs	r3, r3, #1
 888              	.LVL13:
 889              		.loc 1 736 0 discriminator 2
 890 0202 7118     		adds	r1, r6, r1
 891 0204 2E68     		ldr	r6, [r5]
 892 0206 F6B2     		uxtb	r6, r6
 893 0208 0E70     		strb	r6, [r1]
 737:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_slWrBufIndex++;
 894              		.loc 1 737 0 discriminator 2
 895 020a 1168     		ldr	r1, [r2]
 896 020c 0131     		adds	r1, r1, #1
 897 020e 1160     		str	r1, [r2]
 898 0210 F2E7     		b	.L26
 899              	.L73:
 738:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 739:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 740:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 if(0u != endTransfer) /* End transfer sending NACK */
 900              		.loc 1 740 0
 901 0212 0028     		cmp	r0, #0
 902 0214 07D0     		beq	.L28
 741:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 742:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_ENABLE_SLAVE_AUTO_DATA_NACK;
 903              		.loc 1 742 0
 904 0216 8020     		movs	r0, #128
 905              	.LVL14:
 906 0218 3A49     		ldr	r1, .L75+56
 907 021a 0002     		lsls	r0, r0, #8
 908 021c 0A68     		ldr	r2, [r1]
 909 021e 0243     		orrs	r2, r0
 910 0220 0A60     		str	r2, [r1]
 743:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 744:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* INTR_RX_FULL triggers earlier than INTR_SLAVE_I2C_STOP:
 745:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     * disable all RX interrupt sources.
ARM GAS  e:\temp\ccUM5GSw.s 			page 56


 746:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     */
 747:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_SetRxInterruptMode(HPI_IF_NO_INTR_SOURCES);
 911              		.loc 1 747 0
 912 0222 3F4A     		ldr	r2, .L75+84
 913 0224 1360     		str	r3, [r2]
 914              	.L28:
 748:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 749:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 750:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_ClearRxInterruptSource(HPI_IF_INTR_RX_FULL);
 915              		.loc 1 750 0
 916 0226 0822     		movs	r2, #8
 917 0228 1FE0     		b	.L70
 918              	.LVL15:
 919              	.L24:
 751:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
 752:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             /* HPI_IF_INTR_RX_NOT_EMPTY:
 753:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * The buffer size is less than 8: it requires processing in byte-by-byte mode.
 754:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             */
 755:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             else if(HPI_IF_CHECK_INTR_RX_MASKED(HPI_IF_INTR_RX_NOT_EMPTY))
 920              		.loc 1 755 0
 921 022a 1B68     		ldr	r3, [r3]
 922 022c 5B07     		lsls	r3, r3, #29
 923 022e 1ED5     		bpl	.L29
 756:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
 757:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 diffCount = HPI_IF_RX_FIFO_RD_REG;
 924              		.loc 1 757 0
 925 0230 384B     		ldr	r3, .L75+72
 758:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 759:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 if(HPI_IF_slWrBufIndex < HPI_IF_slWrBufSize)
 926              		.loc 1 759 0
 927 0232 3549     		ldr	r1, .L75+60
 757:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 928              		.loc 1 757 0
 929 0234 1A68     		ldr	r2, [r3]
 930              	.LVL16:
 931              		.loc 1 759 0
 932 0236 3E4B     		ldr	r3, .L75+100
 933 0238 0C68     		ldr	r4, [r1]
 934 023a 1868     		ldr	r0, [r3]
 935 023c 3F4B     		ldr	r3, .L75+112
 936 023e 8442     		cmp	r4, r0
 937 0240 0BD2     		bcs	.L30
 760:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 761:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_I2C_SLAVE_GENERATE_ACK;
 938              		.loc 1 761 0
 939 0242 0120     		movs	r0, #1
 940 0244 1860     		str	r0, [r3]
 762:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 763:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Put data into component buffer */
 764:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_slWrBufPtr[HPI_IF_slWrBufIndex] = (uint8) diffCount;
 941              		.loc 1 764 0
 942 0246 3148     		ldr	r0, .L75+64
 943 0248 0B68     		ldr	r3, [r1]
 944 024a 0068     		ldr	r0, [r0]
 945 024c D2B2     		uxtb	r2, r2
 946              	.LVL17:
 947 024e C318     		adds	r3, r0, r3
ARM GAS  e:\temp\ccUM5GSw.s 			page 57


 948 0250 1A70     		strb	r2, [r3]
 765:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_slWrBufIndex++;
 949              		.loc 1 765 0
 950 0252 0B68     		ldr	r3, [r1]
 951 0254 0133     		adds	r3, r3, #1
 952 0256 0B60     		str	r3, [r1]
 953 0258 06E0     		b	.L31
 954              	.LVL18:
 955              	.L30:
 766:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 767:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 else /* Overflow: there is no space in write buffer */
 768:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 769:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_I2C_SLAVE_GENERATE_NACK;
 956              		.loc 1 769 0
 957 025a 0222     		movs	r2, #2
 958              	.LVL19:
 770:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 771:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     HPI_IF_slStatus |= (uint8) HPI_IF_I2C_SSTAT_WR_OVFL;
 959              		.loc 1 771 0
 960 025c 4021     		movs	r1, #64
 769:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 961              		.loc 1 769 0
 962 025e 1A60     		str	r2, [r3]
 963              		.loc 1 771 0
 964 0260 1F4A     		ldr	r2, .L75+20
 965 0262 1378     		ldrb	r3, [r2]
 966 0264 0B43     		orrs	r3, r1
 967 0266 1370     		strb	r3, [r2]
 968              	.L31:
 772:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 773:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 774:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_ClearRxInterruptSource(HPI_IF_INTR_RX_NOT_EMPTY);
 969              		.loc 1 774 0
 970 0268 0422     		movs	r2, #4
 971              	.LVL20:
 972              	.L70:
 973 026a 2C4B     		ldr	r3, .L75+80
 974 026c 1A60     		str	r2, [r3]
 975              	.L29:
 775:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
 776:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             else
 777:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
 778:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 /* Does nothing */
 779:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
 780:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 781:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 782:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             /* HPI_IF_INTR_TX_EMPTY:
 783:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * The master reads the slave: provide data to read or 0xFF in the case of the end of th
 784:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * The overflow condition must be captured, but not set until the end of transaction.
 785:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             * There is a possibility of a false overflow due to TX FIFO utilization.
 786:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             */
 787:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             if(HPI_IF_CHECK_INTR_TX_MASKED(HPI_IF_INTR_TX_EMPTY))
 976              		.loc 1 787 0
 977 026e 354B     		ldr	r3, .L75+120
 978 0270 1B68     		ldr	r3, [r3]
 979 0272 DB06     		lsls	r3, r3, #27
 980 0274 28D5     		bpl	.L1
ARM GAS  e:\temp\ccUM5GSw.s 			page 58


 788:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             {
 789:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 while(HPI_IF_I2C_FIFO_SIZE != HPI_IF_GET_TX_FIFO_ENTRIES)
 981              		.loc 1 789 0
 982 0276 1F21     		movs	r1, #31
 790:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 791:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Temporary slRdBufIndexTmp is used because the master can NACK the byte and
 792:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     * index roll-back is required in this case. The slRdBufIndex is updated at the 
 793:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     * of the read transfer.
 794:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     */
 795:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     if(HPI_IF_slRdBufIndexTmp < HPI_IF_slRdBufSize)
 796:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Data from buffer */
 797:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 798:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_TX_FIFO_WR_REG = (uint32) HPI_IF_slRdBufPtr[HPI_IF_slRdBufIndexTmp];
 799:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_slRdBufIndexTmp++;
 800:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 801:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     else
 802:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Probably Overflow */
 803:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     {
 804:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_TX_FIFO_WR_REG = HPI_IF_I2C_SLAVE_OVFL_RETURN;
 983              		.loc 1 804 0
 984 0278 FF24     		movs	r4, #255
 789:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 985              		.loc 1 789 0
 986 027a 1C48     		ldr	r0, .L75+32
 795:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Data from buffer */
 987              		.loc 1 795 0
 988 027c 1A4A     		ldr	r2, .L75+28
 989              	.L56:
 789:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 {
 990              		.loc 1 789 0
 991 027e 0368     		ldr	r3, [r0]
 992 0280 0B40     		ands	r3, r1
 993 0282 082B     		cmp	r3, #8
 994 0284 1AD0     		beq	.L74
 795:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     /* Data from buffer */
 995              		.loc 1 795 0
 996 0286 304B     		ldr	r3, .L75+124
 997 0288 1668     		ldr	r6, [r2]
 998 028a 1B68     		ldr	r3, [r3]
 999 028c 2F4D     		ldr	r5, .L75+128
 1000 028e 9E42     		cmp	r6, r3
 1001 0290 0AD2     		bcs	.L34
 798:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         HPI_IF_slRdBufIndexTmp++;
 1002              		.loc 1 798 0
 1003 0292 2F4E     		ldr	r6, .L75+132
 1004 0294 1368     		ldr	r3, [r2]
 1005 0296 3668     		ldr	r6, [r6]
 1006 0298 F318     		adds	r3, r6, r3
 1007 029a 1B78     		ldrb	r3, [r3]
 1008 029c DBB2     		uxtb	r3, r3
 1009 029e 2B60     		str	r3, [r5]
 799:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 1010              		.loc 1 799 0
 1011 02a0 1368     		ldr	r3, [r2]
 1012 02a2 0133     		adds	r3, r3, #1
 1013 02a4 1360     		str	r3, [r2]
 1014 02a6 EAE7     		b	.L56
ARM GAS  e:\temp\ccUM5GSw.s 			page 59


 1015              	.L34:
 1016              		.loc 1 804 0
 1017 02a8 2C60     		str	r4, [r5]
 805:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 806:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         if(HPI_IF_slOverFlowCount <= HPI_IF_I2C_TX_OVERFLOW_COUNT)
 1018              		.loc 1 806 0
 1019 02aa 114D     		ldr	r5, .L75+36
 1020 02ac 2B78     		ldrb	r3, [r5]
 1021 02ae 0A2B     		cmp	r3, #10
 1022 02b0 E5D8     		bhi	.L56
 807:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         {
 808:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             /* Get counter in range of overflow. */
 809:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                             HPI_IF_slOverFlowCount++;
 1023              		.loc 1 809 0
 1024 02b2 2B78     		ldrb	r3, [r5]
 1025 02b4 0133     		adds	r3, r3, #1
 1026 02b6 DBB2     		uxtb	r3, r3
 1027 02b8 2B70     		strb	r3, [r5]
 1028 02ba E0E7     		b	.L56
 1029              	.L74:
 810:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                         }
 811:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                     }
 812:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 }
 813:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 814:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****                 HPI_IF_ClearTxInterruptSource(HPI_IF_INTR_TX_EMPTY);
 1030              		.loc 1 814 0
 1031 02bc 1022     		movs	r2, #16
 1032 02be 254B     		ldr	r3, .L75+136
 1033 02c0 1A60     		str	r2, [r3]
 1034 02c2 01E0     		b	.L1
 1035              	.LVL21:
 1036              	.L9:
 815:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             }
 816:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 817:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         }  /* (HPI_IF_I2C_SLAVE) */
 818:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #endif
 819:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     }
 820:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 821:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 822:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     /* FSM EXIT:
 823:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     * Slave:  INTR_SLAVE_I2C_BUS_ERROR, INTR_SLAVE_I2C_ARB_LOST
 824:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     * Master: INTR_MASTER_I2C_BUS_ERROR, INTR_MASTER_I2C_ARB_LOST.
 825:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     */
 826:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     else
 827:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     {
 828:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         HPI_IF_I2CFwBlockReset();
 1037              		.loc 1 828 0
 1038 02c4 FFF7FEFF 		bl	HPI_IF_I2CFwBlockReset
 1039              	.LVL22:
 1040              	.L1:
 829:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         
 830:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     #ifdef HPI_IF_I2C_SLAVE_CMPLT_CALLBACK
 831:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #if(HPI_IF_I2C_SLAVE)
 832:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         {
 833:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             /* Error condition: read or write complete is set */
 834:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****             HPI_IF_I2C_SlaveCompleteCallback();
 835:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         }
ARM GAS  e:\temp\ccUM5GSw.s 			page 60


 836:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****         #endif
 837:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     #endif /* HPI_IF_I2C_SLAVE_CMPLT_CALLBACK */
 838:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     }
 839:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 840:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** #ifdef HPI_IF_I2C_ISR_EXIT_CALLBACK
 841:Generated_Source\PSoC4/HPI_IF_I2C_INT.c ****     HPI_IF_I2C_ISR_ExitCallback();
 842:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** #endif /* HPI_IF_I2C_ISR_EXIT_CALLBACK */
 843:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** 
 844:Generated_Source\PSoC4/HPI_IF_I2C_INT.c **** }
 1041              		.loc 1 844 0
 1042              		@ sp needed
 1043 02c8 F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 1044              	.L76:
 1045 02ca C046     		.align	2
 1046              	.L75:
 1047 02cc 00000000 		.word	HPI_IF_customIntrHandler
 1048 02d0 8C0E0540 		.word	1074073228
 1049 02d4 880E0540 		.word	1074073224
 1050 02d8 00000000 		.word	HPI_IF_state
 1051 02dc 4C0F0540 		.word	1074073420
 1052 02e0 00000000 		.word	HPI_IF_slStatus
 1053 02e4 400F0540 		.word	1074073408
 1054 02e8 00000000 		.word	HPI_IF_slRdBufIndexTmp
 1055 02ec 08020540 		.word	1074070024
 1056 02f0 00000000 		.word	HPI_IF_slOverFlowCount
 1057 02f4 00000000 		.word	HPI_IF_slRdBufIndex
 1058 02f8 880F0540 		.word	1074073480
 1059 02fc 04020540 		.word	1074070020
 1060 0300 FFFFFEFF 		.word	-65537
 1061 0304 60000540 		.word	1074069600
 1062 0308 00000000 		.word	HPI_IF_slWrBufIndex
 1063 030c 00000000 		.word	HPI_IF_slWrBufPtr
 1064 0310 08030540 		.word	1074070280
 1065 0314 40030540 		.word	1074070336
 1066 0318 FF5FFFFF 		.word	-40961
 1067 031c C00F0540 		.word	1074073536
 1068 0320 C80F0540 		.word	1074073544
 1069 0324 ED0F0000 		.word	4077
 1070 0328 800E0540 		.word	1074073216
 1071 032c 64000540 		.word	1074069604
 1072 0330 00000000 		.word	HPI_IF_slWrBufSize
 1073 0334 FF0F0000 		.word	4095
 1074 0338 480F0540 		.word	1074073416
 1075 033c 6C000540 		.word	1074069612
 1076 0340 CC0F0540 		.word	1074073548
 1077 0344 8C0F0540 		.word	1074073484
 1078 0348 00000000 		.word	HPI_IF_slRdBufSize
 1079 034c 40020540 		.word	1074070080
 1080 0350 00000000 		.word	HPI_IF_slRdBufPtr
 1081 0354 800F0540 		.word	1074073472
 1082              		.cfi_endproc
 1083              	.LFE0:
 1084              		.size	HPI_IF_I2C_ISR, .-HPI_IF_I2C_ISR
 1085              		.text
 1086              	.Letext0:
 1087              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 1088              		.file 3 "Generated_Source\\PSoC4\\HPI_IF_PVT.h"
ARM GAS  e:\temp\ccUM5GSw.s 			page 61


 1089              		.file 4 "Generated_Source\\PSoC4\\HPI_IF_I2C_PVT.h"
 1090              		.section	.debug_info,"",%progbits
 1091              	.Ldebug_info0:
 1092 0000 93010000 		.4byte	0x193
 1093 0004 0400     		.2byte	0x4
 1094 0006 00000000 		.4byte	.Ldebug_abbrev0
 1095 000a 04       		.byte	0x4
 1096 000b 01       		.uleb128 0x1
 1097 000c DC010000 		.4byte	.LASF31
 1098 0010 0C       		.byte	0xc
 1099 0011 06000000 		.4byte	.LASF32
 1100 0015 5F000000 		.4byte	.LASF33
 1101 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1102 001d 00000000 		.4byte	0
 1103 0021 00000000 		.4byte	.Ldebug_line0
 1104 0025 02       		.uleb128 0x2
 1105 0026 01       		.byte	0x1
 1106 0027 06       		.byte	0x6
 1107 0028 04030000 		.4byte	.LASF0
 1108 002c 02       		.uleb128 0x2
 1109 002d 01       		.byte	0x1
 1110 002e 08       		.byte	0x8
 1111 002f F3000000 		.4byte	.LASF1
 1112 0033 02       		.uleb128 0x2
 1113 0034 02       		.byte	0x2
 1114 0035 05       		.byte	0x5
 1115 0036 C1020000 		.4byte	.LASF2
 1116 003a 02       		.uleb128 0x2
 1117 003b 02       		.byte	0x2
 1118 003c 07       		.byte	0x7
 1119 003d 2E000000 		.4byte	.LASF3
 1120 0041 02       		.uleb128 0x2
 1121 0042 04       		.byte	0x4
 1122 0043 05       		.byte	0x5
 1123 0044 D8020000 		.4byte	.LASF4
 1124 0048 02       		.uleb128 0x2
 1125 0049 04       		.byte	0x4
 1126 004a 07       		.byte	0x7
 1127 004b 01010000 		.4byte	.LASF5
 1128 004f 02       		.uleb128 0x2
 1129 0050 08       		.byte	0x8
 1130 0051 05       		.byte	0x5
 1131 0052 AE020000 		.4byte	.LASF6
 1132 0056 02       		.uleb128 0x2
 1133 0057 08       		.byte	0x8
 1134 0058 07       		.byte	0x7
 1135 0059 AE010000 		.4byte	.LASF7
 1136 005d 03       		.uleb128 0x3
 1137 005e 04       		.byte	0x4
 1138 005f 05       		.byte	0x5
 1139 0060 696E7400 		.ascii	"int\000"
 1140 0064 02       		.uleb128 0x2
 1141 0065 04       		.byte	0x4
 1142 0066 07       		.byte	0x7
 1143 0067 A1010000 		.4byte	.LASF8
 1144 006b 04       		.uleb128 0x4
 1145 006c 1D010000 		.4byte	.LASF9
ARM GAS  e:\temp\ccUM5GSw.s 			page 62


 1146 0070 02       		.byte	0x2
 1147 0071 E401     		.2byte	0x1e4
 1148 0073 2C000000 		.4byte	0x2c
 1149 0077 04       		.uleb128 0x4
 1150 0078 8B010000 		.4byte	.LASF10
 1151 007c 02       		.byte	0x2
 1152 007d E601     		.2byte	0x1e6
 1153 007f 48000000 		.4byte	0x48
 1154 0083 02       		.uleb128 0x2
 1155 0084 04       		.byte	0x4
 1156 0085 04       		.byte	0x4
 1157 0086 ED000000 		.4byte	.LASF11
 1158 008a 02       		.uleb128 0x2
 1159 008b 08       		.byte	0x8
 1160 008c 04       		.byte	0x4
 1161 008d 4E010000 		.4byte	.LASF12
 1162 0091 02       		.uleb128 0x2
 1163 0092 01       		.byte	0x1
 1164 0093 08       		.byte	0x8
 1165 0094 BC020000 		.4byte	.LASF13
 1166 0098 05       		.uleb128 0x5
 1167 0099 6B000000 		.4byte	0x6b
 1168 009d 04       		.uleb128 0x4
 1169 009e 00000000 		.4byte	.LASF14
 1170 00a2 02       		.byte	0x2
 1171 00a3 9002     		.2byte	0x290
 1172 00a5 A9000000 		.4byte	0xa9
 1173 00a9 05       		.uleb128 0x5
 1174 00aa 77000000 		.4byte	0x77
 1175 00ae 04       		.uleb128 0x4
 1176 00af 98020000 		.4byte	.LASF15
 1177 00b3 02       		.byte	0x2
 1178 00b4 A002     		.2byte	0x2a0
 1179 00b6 BA000000 		.4byte	0xba
 1180 00ba 06       		.uleb128 0x6
 1181 00bb 04       		.byte	0x4
 1182 00bc C0000000 		.4byte	0xc0
 1183 00c0 07       		.uleb128 0x7
 1184 00c1 02       		.uleb128 0x2
 1185 00c2 08       		.byte	0x8
 1186 00c3 04       		.byte	0x4
 1187 00c4 F8020000 		.4byte	.LASF16
 1188 00c8 02       		.uleb128 0x2
 1189 00c9 04       		.byte	0x4
 1190 00ca 07       		.byte	0x7
 1191 00cb A5020000 		.4byte	.LASF17
 1192 00cf 08       		.uleb128 0x8
 1193 00d0 92010000 		.4byte	.LASF34
 1194 00d4 01       		.byte	0x1
 1195 00d5 1F       		.byte	0x1f
 1196 00d6 00000000 		.4byte	.LFB0
 1197 00da 58030000 		.4byte	.LFE0-.LFB0
 1198 00de 01       		.uleb128 0x1
 1199 00df 9C       		.byte	0x9c
 1200 00e0 0C010000 		.4byte	0x10c
 1201 00e4 09       		.uleb128 0x9
 1202 00e5 13010000 		.4byte	.LASF18
ARM GAS  e:\temp\ccUM5GSw.s 			page 63


 1203 00e9 01       		.byte	0x1
 1204 00ea 21       		.byte	0x21
 1205 00eb 77000000 		.4byte	0x77
 1206 00ef 00000000 		.4byte	.LLST0
 1207 00f3 09       		.uleb128 0x9
 1208 00f4 53000000 		.4byte	.LASF19
 1209 00f8 01       		.byte	0x1
 1210 00f9 22       		.byte	0x22
 1211 00fa 77000000 		.4byte	0x77
 1212 00fe 60000000 		.4byte	.LLST1
 1213 0102 0A       		.uleb128 0xa
 1214 0103 C8020000 		.4byte	.LVL22
 1215 0107 8B010000 		.4byte	0x18b
 1216 010b 00       		.byte	0
 1217 010c 0B       		.uleb128 0xb
 1218 010d 10030000 		.4byte	.LASF20
 1219 0111 03       		.byte	0x3
 1220 0112 3B       		.byte	0x3b
 1221 0113 AE000000 		.4byte	0xae
 1222 0117 0B       		.uleb128 0xb
 1223 0118 CB020000 		.4byte	.LASF21
 1224 011c 04       		.byte	0x4
 1225 011d 1E       		.byte	0x1e
 1226 011e 98000000 		.4byte	0x98
 1227 0122 0B       		.uleb128 0xb
 1228 0123 7B010000 		.4byte	.LASF22
 1229 0127 04       		.byte	0x4
 1230 0128 21       		.byte	0x21
 1231 0129 98000000 		.4byte	0x98
 1232 012d 0B       		.uleb128 0xb
 1233 012e 69010000 		.4byte	.LASF23
 1234 0132 04       		.byte	0x4
 1235 0133 24       		.byte	0x24
 1236 0134 38010000 		.4byte	0x138
 1237 0138 06       		.uleb128 0x6
 1238 0139 04       		.byte	0x4
 1239 013a 98000000 		.4byte	0x98
 1240 013e 0B       		.uleb128 0xb
 1241 013f DA000000 		.4byte	.LASF24
 1242 0143 04       		.byte	0x4
 1243 0144 25       		.byte	0x25
 1244 0145 A9000000 		.4byte	0xa9
 1245 0149 0B       		.uleb128 0xb
 1246 014a 55010000 		.4byte	.LASF25
 1247 014e 04       		.byte	0x4
 1248 014f 26       		.byte	0x26
 1249 0150 A9000000 		.4byte	0xa9
 1250 0154 0B       		.uleb128 0xb
 1251 0155 41000000 		.4byte	.LASF26
 1252 0159 04       		.byte	0x4
 1253 015a 29       		.byte	0x29
 1254 015b 38010000 		.4byte	0x138
 1255 015f 0B       		.uleb128 0xb
 1256 0160 29030000 		.4byte	.LASF27
 1257 0164 04       		.byte	0x4
 1258 0165 2A       		.byte	0x2a
 1259 0166 A9000000 		.4byte	0xa9
ARM GAS  e:\temp\ccUM5GSw.s 			page 64


 1260 016a 0B       		.uleb128 0xb
 1261 016b 3A010000 		.4byte	.LASF28
 1262 016f 04       		.byte	0x4
 1263 0170 2B       		.byte	0x2b
 1264 0171 A9000000 		.4byte	0xa9
 1265 0175 0B       		.uleb128 0xb
 1266 0176 23010000 		.4byte	.LASF29
 1267 017a 04       		.byte	0x4
 1268 017b 2C       		.byte	0x2c
 1269 017c A9000000 		.4byte	0xa9
 1270 0180 0B       		.uleb128 0xb
 1271 0181 E1020000 		.4byte	.LASF30
 1272 0185 04       		.byte	0x4
 1273 0186 2D       		.byte	0x2d
 1274 0187 98000000 		.4byte	0x98
 1275 018b 0C       		.uleb128 0xc
 1276 018c C5010000 		.4byte	.LASF35
 1277 0190 C5010000 		.4byte	.LASF35
 1278 0194 04       		.byte	0x4
 1279 0195 4D       		.byte	0x4d
 1280 0196 00       		.byte	0
 1281              		.section	.debug_abbrev,"",%progbits
 1282              	.Ldebug_abbrev0:
 1283 0000 01       		.uleb128 0x1
 1284 0001 11       		.uleb128 0x11
 1285 0002 01       		.byte	0x1
 1286 0003 25       		.uleb128 0x25
 1287 0004 0E       		.uleb128 0xe
 1288 0005 13       		.uleb128 0x13
 1289 0006 0B       		.uleb128 0xb
 1290 0007 03       		.uleb128 0x3
 1291 0008 0E       		.uleb128 0xe
 1292 0009 1B       		.uleb128 0x1b
 1293 000a 0E       		.uleb128 0xe
 1294 000b 55       		.uleb128 0x55
 1295 000c 17       		.uleb128 0x17
 1296 000d 11       		.uleb128 0x11
 1297 000e 01       		.uleb128 0x1
 1298 000f 10       		.uleb128 0x10
 1299 0010 17       		.uleb128 0x17
 1300 0011 00       		.byte	0
 1301 0012 00       		.byte	0
 1302 0013 02       		.uleb128 0x2
 1303 0014 24       		.uleb128 0x24
 1304 0015 00       		.byte	0
 1305 0016 0B       		.uleb128 0xb
 1306 0017 0B       		.uleb128 0xb
 1307 0018 3E       		.uleb128 0x3e
 1308 0019 0B       		.uleb128 0xb
 1309 001a 03       		.uleb128 0x3
 1310 001b 0E       		.uleb128 0xe
 1311 001c 00       		.byte	0
 1312 001d 00       		.byte	0
 1313 001e 03       		.uleb128 0x3
 1314 001f 24       		.uleb128 0x24
 1315 0020 00       		.byte	0
 1316 0021 0B       		.uleb128 0xb
ARM GAS  e:\temp\ccUM5GSw.s 			page 65


 1317 0022 0B       		.uleb128 0xb
 1318 0023 3E       		.uleb128 0x3e
 1319 0024 0B       		.uleb128 0xb
 1320 0025 03       		.uleb128 0x3
 1321 0026 08       		.uleb128 0x8
 1322 0027 00       		.byte	0
 1323 0028 00       		.byte	0
 1324 0029 04       		.uleb128 0x4
 1325 002a 16       		.uleb128 0x16
 1326 002b 00       		.byte	0
 1327 002c 03       		.uleb128 0x3
 1328 002d 0E       		.uleb128 0xe
 1329 002e 3A       		.uleb128 0x3a
 1330 002f 0B       		.uleb128 0xb
 1331 0030 3B       		.uleb128 0x3b
 1332 0031 05       		.uleb128 0x5
 1333 0032 49       		.uleb128 0x49
 1334 0033 13       		.uleb128 0x13
 1335 0034 00       		.byte	0
 1336 0035 00       		.byte	0
 1337 0036 05       		.uleb128 0x5
 1338 0037 35       		.uleb128 0x35
 1339 0038 00       		.byte	0
 1340 0039 49       		.uleb128 0x49
 1341 003a 13       		.uleb128 0x13
 1342 003b 00       		.byte	0
 1343 003c 00       		.byte	0
 1344 003d 06       		.uleb128 0x6
 1345 003e 0F       		.uleb128 0xf
 1346 003f 00       		.byte	0
 1347 0040 0B       		.uleb128 0xb
 1348 0041 0B       		.uleb128 0xb
 1349 0042 49       		.uleb128 0x49
 1350 0043 13       		.uleb128 0x13
 1351 0044 00       		.byte	0
 1352 0045 00       		.byte	0
 1353 0046 07       		.uleb128 0x7
 1354 0047 15       		.uleb128 0x15
 1355 0048 00       		.byte	0
 1356 0049 27       		.uleb128 0x27
 1357 004a 19       		.uleb128 0x19
 1358 004b 00       		.byte	0
 1359 004c 00       		.byte	0
 1360 004d 08       		.uleb128 0x8
 1361 004e 2E       		.uleb128 0x2e
 1362 004f 01       		.byte	0x1
 1363 0050 3F       		.uleb128 0x3f
 1364 0051 19       		.uleb128 0x19
 1365 0052 03       		.uleb128 0x3
 1366 0053 0E       		.uleb128 0xe
 1367 0054 3A       		.uleb128 0x3a
 1368 0055 0B       		.uleb128 0xb
 1369 0056 3B       		.uleb128 0x3b
 1370 0057 0B       		.uleb128 0xb
 1371 0058 27       		.uleb128 0x27
 1372 0059 19       		.uleb128 0x19
 1373 005a 11       		.uleb128 0x11
ARM GAS  e:\temp\ccUM5GSw.s 			page 66


 1374 005b 01       		.uleb128 0x1
 1375 005c 12       		.uleb128 0x12
 1376 005d 06       		.uleb128 0x6
 1377 005e 40       		.uleb128 0x40
 1378 005f 18       		.uleb128 0x18
 1379 0060 9642     		.uleb128 0x2116
 1380 0062 19       		.uleb128 0x19
 1381 0063 01       		.uleb128 0x1
 1382 0064 13       		.uleb128 0x13
 1383 0065 00       		.byte	0
 1384 0066 00       		.byte	0
 1385 0067 09       		.uleb128 0x9
 1386 0068 34       		.uleb128 0x34
 1387 0069 00       		.byte	0
 1388 006a 03       		.uleb128 0x3
 1389 006b 0E       		.uleb128 0xe
 1390 006c 3A       		.uleb128 0x3a
 1391 006d 0B       		.uleb128 0xb
 1392 006e 3B       		.uleb128 0x3b
 1393 006f 0B       		.uleb128 0xb
 1394 0070 49       		.uleb128 0x49
 1395 0071 13       		.uleb128 0x13
 1396 0072 02       		.uleb128 0x2
 1397 0073 17       		.uleb128 0x17
 1398 0074 00       		.byte	0
 1399 0075 00       		.byte	0
 1400 0076 0A       		.uleb128 0xa
 1401 0077 898201   		.uleb128 0x4109
 1402 007a 00       		.byte	0
 1403 007b 11       		.uleb128 0x11
 1404 007c 01       		.uleb128 0x1
 1405 007d 31       		.uleb128 0x31
 1406 007e 13       		.uleb128 0x13
 1407 007f 00       		.byte	0
 1408 0080 00       		.byte	0
 1409 0081 0B       		.uleb128 0xb
 1410 0082 34       		.uleb128 0x34
 1411 0083 00       		.byte	0
 1412 0084 03       		.uleb128 0x3
 1413 0085 0E       		.uleb128 0xe
 1414 0086 3A       		.uleb128 0x3a
 1415 0087 0B       		.uleb128 0xb
 1416 0088 3B       		.uleb128 0x3b
 1417 0089 0B       		.uleb128 0xb
 1418 008a 49       		.uleb128 0x49
 1419 008b 13       		.uleb128 0x13
 1420 008c 3F       		.uleb128 0x3f
 1421 008d 19       		.uleb128 0x19
 1422 008e 3C       		.uleb128 0x3c
 1423 008f 19       		.uleb128 0x19
 1424 0090 00       		.byte	0
 1425 0091 00       		.byte	0
 1426 0092 0C       		.uleb128 0xc
 1427 0093 2E       		.uleb128 0x2e
 1428 0094 00       		.byte	0
 1429 0095 3F       		.uleb128 0x3f
 1430 0096 19       		.uleb128 0x19
ARM GAS  e:\temp\ccUM5GSw.s 			page 67


 1431 0097 3C       		.uleb128 0x3c
 1432 0098 19       		.uleb128 0x19
 1433 0099 6E       		.uleb128 0x6e
 1434 009a 0E       		.uleb128 0xe
 1435 009b 03       		.uleb128 0x3
 1436 009c 0E       		.uleb128 0xe
 1437 009d 3A       		.uleb128 0x3a
 1438 009e 0B       		.uleb128 0xb
 1439 009f 3B       		.uleb128 0x3b
 1440 00a0 0B       		.uleb128 0xb
 1441 00a1 00       		.byte	0
 1442 00a2 00       		.byte	0
 1443 00a3 00       		.byte	0
 1444              		.section	.debug_loc,"",%progbits
 1445              	.Ldebug_loc0:
 1446              	.LLST0:
 1447 0000 8C000000 		.4byte	.LVL2
 1448 0004 96000000 		.4byte	.LVL3
 1449 0008 0100     		.2byte	0x1
 1450 000a 52       		.byte	0x52
 1451 000b 9C000000 		.4byte	.LVL4
 1452 000f A2000000 		.4byte	.LVL5
 1453 0013 0100     		.2byte	0x1
 1454 0015 52       		.byte	0x52
 1455 0016 8A010000 		.4byte	.LVL6
 1456 001a 9A010000 		.4byte	.LVL7
 1457 001e 0100     		.2byte	0x1
 1458 0020 52       		.byte	0x52
 1459 0021 A2010000 		.4byte	.LVL8
 1460 0025 A6010000 		.4byte	.LVL9
 1461 0029 0100     		.2byte	0x1
 1462 002b 52       		.byte	0x52
 1463 002c EA010000 		.4byte	.LVL10
 1464 0030 F4010000 		.4byte	.LVL11
 1465 0034 0100     		.2byte	0x1
 1466 0036 53       		.byte	0x53
 1467 0037 F8010000 		.4byte	.LVL12
 1468 003b 2A020000 		.4byte	.LVL15
 1469 003f 0100     		.2byte	0x1
 1470 0041 53       		.byte	0x53
 1471 0042 36020000 		.4byte	.LVL16
 1472 0046 4E020000 		.4byte	.LVL17
 1473 004a 0100     		.2byte	0x1
 1474 004c 52       		.byte	0x52
 1475 004d 5A020000 		.4byte	.LVL18
 1476 0051 5C020000 		.4byte	.LVL19
 1477 0055 0100     		.2byte	0x1
 1478 0057 52       		.byte	0x52
 1479 0058 00000000 		.4byte	0
 1480 005c 00000000 		.4byte	0
 1481              	.LLST1:
 1482 0060 00000000 		.4byte	.LVL0
 1483 0064 F8010000 		.4byte	.LVL12
 1484 0068 0200     		.2byte	0x2
 1485 006a 30       		.byte	0x30
 1486 006b 9F       		.byte	0x9f
 1487 006c F8010000 		.4byte	.LVL12
ARM GAS  e:\temp\ccUM5GSw.s 			page 68


 1488 0070 18020000 		.4byte	.LVL14
 1489 0074 0100     		.2byte	0x1
 1490 0076 50       		.byte	0x50
 1491 0077 2A020000 		.4byte	.LVL15
 1492 007b 6A020000 		.4byte	.LVL20
 1493 007f 0200     		.2byte	0x2
 1494 0081 30       		.byte	0x30
 1495 0082 9F       		.byte	0x9f
 1496 0083 C4020000 		.4byte	.LVL21
 1497 0087 C8020000 		.4byte	.LVL22
 1498 008b 0200     		.2byte	0x2
 1499 008d 30       		.byte	0x30
 1500 008e 9F       		.byte	0x9f
 1501 008f 00000000 		.4byte	0
 1502 0093 00000000 		.4byte	0
 1503              		.section	.debug_aranges,"",%progbits
 1504 0000 1C000000 		.4byte	0x1c
 1505 0004 0200     		.2byte	0x2
 1506 0006 00000000 		.4byte	.Ldebug_info0
 1507 000a 04       		.byte	0x4
 1508 000b 00       		.byte	0
 1509 000c 0000     		.2byte	0
 1510 000e 0000     		.2byte	0
 1511 0010 00000000 		.4byte	.LFB0
 1512 0014 58030000 		.4byte	.LFE0-.LFB0
 1513 0018 00000000 		.4byte	0
 1514 001c 00000000 		.4byte	0
 1515              		.section	.debug_ranges,"",%progbits
 1516              	.Ldebug_ranges0:
 1517 0000 00000000 		.4byte	.LFB0
 1518 0004 58030000 		.4byte	.LFE0
 1519 0008 00000000 		.4byte	0
 1520 000c 00000000 		.4byte	0
 1521              		.section	.debug_line,"",%progbits
 1522              	.Ldebug_line0:
 1523 0000 3A010000 		.section	.debug_str,"MS",%progbits,1
 1523      02006F00 
 1523      00000201 
 1523      FB0E0D00 
 1523      01010101 
 1524              	.LASF14:
 1525 0000 72656733 		.ascii	"reg32\000"
 1525      3200
 1526              	.LASF32:
 1527 0006 47656E65 		.ascii	"Generated_Source\\PSoC4\\HPI_IF_I2C_INT.c\000"
 1527      72617465 
 1527      645F536F 
 1527      75726365 
 1527      5C50536F 
 1528              	.LASF3:
 1529 002e 73686F72 		.ascii	"short unsigned int\000"
 1529      7420756E 
 1529      7369676E 
 1529      65642069 
 1529      6E7400
 1530              	.LASF26:
 1531 0041 4850495F 		.ascii	"HPI_IF_slRdBufPtr\000"
ARM GAS  e:\temp\ccUM5GSw.s 			page 69


 1531      49465F73 
 1531      6C526442 
 1531      75665074 
 1531      7200
 1532              	.LASF19:
 1533 0053 656E6454 		.ascii	"endTransfer\000"
 1533      72616E73 
 1533      66657200 
 1534              	.LASF33:
 1535 005f 433A5C55 		.ascii	"C:\\Users\\Admin\\Desktop\\_FIRMWARE\\DBARLite\\CYP"
 1535      73657273 
 1535      5C41646D 
 1535      696E5C44 
 1535      65736B74 
 1536 008c 44353232 		.ascii	"D5225\\CYPD5225-96BZXI_notebook\\CYPD5225-96BZXI_no"
 1536      355C4359 
 1536      50443532 
 1536      32352D39 
 1536      36425A58 
 1537 00bd 7465626F 		.ascii	"tebook.cydsn\\backup_fw.cydsn\000"
 1537      6F6B2E63 
 1537      7964736E 
 1537      5C626163 
 1537      6B75705F 
 1538              	.LASF24:
 1539 00da 4850495F 		.ascii	"HPI_IF_slWrBufSize\000"
 1539      49465F73 
 1539      6C577242 
 1539      75665369 
 1539      7A6500
 1540              	.LASF11:
 1541 00ed 666C6F61 		.ascii	"float\000"
 1541      7400
 1542              	.LASF1:
 1543 00f3 756E7369 		.ascii	"unsigned char\000"
 1543      676E6564 
 1543      20636861 
 1543      7200
 1544              	.LASF5:
 1545 0101 6C6F6E67 		.ascii	"long unsigned int\000"
 1545      20756E73 
 1545      69676E65 
 1545      6420696E 
 1545      7400
 1546              	.LASF18:
 1547 0113 64696666 		.ascii	"diffCount\000"
 1547      436F756E 
 1547      7400
 1548              	.LASF9:
 1549 011d 75696E74 		.ascii	"uint8\000"
 1549      3800
 1550              	.LASF29:
 1551 0123 4850495F 		.ascii	"HPI_IF_slRdBufIndexTmp\000"
 1551      49465F73 
 1551      6C526442 
 1551      7566496E 
 1551      64657854 
ARM GAS  e:\temp\ccUM5GSw.s 			page 70


 1552              	.LASF28:
 1553 013a 4850495F 		.ascii	"HPI_IF_slRdBufIndex\000"
 1553      49465F73 
 1553      6C526442 
 1553      7566496E 
 1553      64657800 
 1554              	.LASF12:
 1555 014e 646F7562 		.ascii	"double\000"
 1555      6C6500
 1556              	.LASF25:
 1557 0155 4850495F 		.ascii	"HPI_IF_slWrBufIndex\000"
 1557      49465F73 
 1557      6C577242 
 1557      7566496E 
 1557      64657800 
 1558              	.LASF23:
 1559 0169 4850495F 		.ascii	"HPI_IF_slWrBufPtr\000"
 1559      49465F73 
 1559      6C577242 
 1559      75665074 
 1559      7200
 1560              	.LASF22:
 1561 017b 4850495F 		.ascii	"HPI_IF_slStatus\000"
 1561      49465F73 
 1561      6C537461 
 1561      74757300 
 1562              	.LASF10:
 1563 018b 75696E74 		.ascii	"uint32\000"
 1563      333200
 1564              	.LASF34:
 1565 0192 4850495F 		.ascii	"HPI_IF_I2C_ISR\000"
 1565      49465F49 
 1565      32435F49 
 1565      535200
 1566              	.LASF8:
 1567 01a1 756E7369 		.ascii	"unsigned int\000"
 1567      676E6564 
 1567      20696E74 
 1567      00
 1568              	.LASF7:
 1569 01ae 6C6F6E67 		.ascii	"long long unsigned int\000"
 1569      206C6F6E 
 1569      6720756E 
 1569      7369676E 
 1569      65642069 
 1570              	.LASF35:
 1571 01c5 4850495F 		.ascii	"HPI_IF_I2CFwBlockReset\000"
 1571      49465F49 
 1571      32434677 
 1571      426C6F63 
 1571      6B526573 
 1572              	.LASF31:
 1573 01dc 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1573      43313120 
 1573      352E342E 
 1573      31203230 
 1573      31363036 
ARM GAS  e:\temp\ccUM5GSw.s 			page 71


 1574 020f 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 1574      20726576 
 1574      6973696F 
 1574      6E203233 
 1574      37373135 
 1575 0242 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects -finline-fu"
 1575      66756E63 
 1575      74696F6E 
 1575      2D736563 
 1575      74696F6E 
 1576 0275 6E637469 		.ascii	"nctions -flto -fno-strict-aliasing\000"
 1576      6F6E7320 
 1576      2D666C74 
 1576      6F202D66 
 1576      6E6F2D73 
 1577              	.LASF15:
 1578 0298 63796973 		.ascii	"cyisraddress\000"
 1578      72616464 
 1578      72657373 
 1578      00
 1579              	.LASF17:
 1580 02a5 73697A65 		.ascii	"sizetype\000"
 1580      74797065 
 1580      00
 1581              	.LASF6:
 1582 02ae 6C6F6E67 		.ascii	"long long int\000"
 1582      206C6F6E 
 1582      6720696E 
 1582      7400
 1583              	.LASF13:
 1584 02bc 63686172 		.ascii	"char\000"
 1584      00
 1585              	.LASF2:
 1586 02c1 73686F72 		.ascii	"short int\000"
 1586      7420696E 
 1586      7400
 1587              	.LASF21:
 1588 02cb 4850495F 		.ascii	"HPI_IF_state\000"
 1588      49465F73 
 1588      74617465 
 1588      00
 1589              	.LASF4:
 1590 02d8 6C6F6E67 		.ascii	"long int\000"
 1590      20696E74 
 1590      00
 1591              	.LASF30:
 1592 02e1 4850495F 		.ascii	"HPI_IF_slOverFlowCount\000"
 1592      49465F73 
 1592      6C4F7665 
 1592      72466C6F 
 1592      77436F75 
 1593              	.LASF16:
 1594 02f8 6C6F6E67 		.ascii	"long double\000"
 1594      20646F75 
 1594      626C6500 
 1595              	.LASF0:
 1596 0304 7369676E 		.ascii	"signed char\000"
ARM GAS  e:\temp\ccUM5GSw.s 			page 72


 1596      65642063 
 1596      68617200 
 1597              	.LASF20:
 1598 0310 4850495F 		.ascii	"HPI_IF_customIntrHandler\000"
 1598      49465F63 
 1598      7573746F 
 1598      6D496E74 
 1598      7248616E 
 1599              	.LASF27:
 1600 0329 4850495F 		.ascii	"HPI_IF_slRdBufSize\000"
 1600      49465F73 
 1600      6C526442 
 1600      75665369 
 1600      7A6500
 1601              		.comm	__gnu_lto_v1,1,1
 1602              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
