ARM GAS  e:\temp\cc2tFLyS.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CyLib.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CySysClkImoStart,"ax",%progbits
  20              		.align	2
  21              		.global	CySysClkImoStart
  22              		.code	16
  23              		.thumb_func
  24              		.type	CySysClkImoStart, %function
  25              	CySysClkImoStart:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC4\\CyLib.c"
   1:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CyLib.c **** * \file CyLib.c
   3:Generated_Source\PSoC4/CyLib.c **** * \version 5.70
   4:Generated_Source\PSoC4/CyLib.c **** *
   5:Generated_Source\PSoC4/CyLib.c **** * \brief Provides a system API for the Clocking, Interrupts, SysTick, and
   6:Generated_Source\PSoC4/CyLib.c **** * Voltage Detect.
   7:Generated_Source\PSoC4/CyLib.c **** *
   8:Generated_Source\PSoC4/CyLib.c **** * \note Documentation of the API's in this file is located in the PSoC 4 System
   9:Generated_Source\PSoC4/CyLib.c **** * Reference Guide provided with PSoC Creator.
  10:Generated_Source\PSoC4/CyLib.c **** *
  11:Generated_Source\PSoC4/CyLib.c **** ********************************************************************************
  12:Generated_Source\PSoC4/CyLib.c **** * \copyright
  13:Generated_Source\PSoC4/CyLib.c **** * Copyright 2010-2018, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/CyLib.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/CyLib.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/CyLib.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/CyLib.c **** 
  19:Generated_Source\PSoC4/CyLib.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/CyLib.c **** 
  21:Generated_Source\PSoC4/CyLib.c **** /* CySysClkWriteImoFreq() || CySysClkImoEnableWcoLock() */
  22:Generated_Source\PSoC4/CyLib.c **** #if ((CY_IP_SRSSV2 && CY_IP_FMLT) || CY_IP_IMO_TRIMMABLE_BY_WCO)
  23:Generated_Source\PSoC4/CyLib.c ****     #include "CyFlash.h"
  24:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_FMLT) */
  25:Generated_Source\PSoC4/CyLib.c **** 
  26:Generated_Source\PSoC4/CyLib.c **** /* Do not use these definitions directly in your application */
  27:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqHz  = CYDEV_BCLK__SYSCLK__HZ;
  28:Generated_Source\PSoC4/CyLib.c **** uint32 cydelayFreqKhz = (CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRE
  29:Generated_Source\PSoC4/CyLib.c **** uint8  cydelayFreqMhz = (uint8)((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY
  30:Generated_Source\PSoC4/CyLib.c **** uint32 cydelay32kMs   = CY_DELAY_MS_OVERFLOW * ((CYDEV_BCLK__SYSCLK__HZ + CY_DELAY_1K_MINUS_1_THRES
ARM GAS  e:\temp\cc2tFLyS.s 			page 2


  31:Generated_Source\PSoC4/CyLib.c ****                         CY_DELAY_1K_THRESHOLD);
  32:Generated_Source\PSoC4/CyLib.c **** 
  33:Generated_Source\PSoC4/CyLib.c **** 
  34:Generated_Source\PSoC4/CyLib.c **** static cySysTickCallback CySysTickCallbacks[CY_SYS_SYST_NUM_OF_CALLBACKS];
  35:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void);
  36:Generated_Source\PSoC4/CyLib.c **** 
  37:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_PLL)
  38:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll);
  39:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll);
  40:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_PLL) */
  41:Generated_Source\PSoC4/CyLib.c **** 
  42:Generated_Source\PSoC4/CyLib.c **** 
  43:Generated_Source\PSoC4/CyLib.c **** /***************************************************************************//**
  44:Generated_Source\PSoC4/CyLib.c **** * Indicates whether or not the SysTick has been initialized. The variable is
  45:Generated_Source\PSoC4/CyLib.c **** * initialized to 0 and set to 1 the first time CySysTickStart() is called.
  46:Generated_Source\PSoC4/CyLib.c **** *
  47:Generated_Source\PSoC4/CyLib.c **** * This allows the component to restart without reinitialization after the first
  48:Generated_Source\PSoC4/CyLib.c **** * call to the CySysTickStart() routine.
  49:Generated_Source\PSoC4/CyLib.c **** *
  50:Generated_Source\PSoC4/CyLib.c **** * If reinitialization of the SysTick is required, call CySysTickInit() before
  51:Generated_Source\PSoC4/CyLib.c **** * calling CySysTickStart(). Alternatively, the SysTick can be reinitialized by
  52:Generated_Source\PSoC4/CyLib.c **** * calling the CySysTickInit() and CySysTickEnable() functions.
  53:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
  54:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickInitVar = 0u;
  55:Generated_Source\PSoC4/CyLib.c **** 
  56:Generated_Source\PSoC4/CyLib.c **** 
  57:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
  58:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between CySysClkWriteImoFreq() parameter and register's value */
  59:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_FREQ_TABLE_SIZE] = {
  60:Generated_Source\PSoC4/CyLib.c ****             /*  3 MHz */ 0x03u,  /*  4 MHz */ 0x04u,  /*  5 MHz */ 0x05u,  /*  6 MHz */ 0x06u,
  61:Generated_Source\PSoC4/CyLib.c ****             /*  7 MHz */ 0x07u,  /*  8 MHz */ 0x08u,  /*  9 MHz */ 0x09u,  /* 10 MHz */ 0x0Au,
  62:Generated_Source\PSoC4/CyLib.c ****             /* 11 MHz */ 0x0Bu,  /* 12 MHz */ 0x0Cu,  /* 13 MHz */ 0x0Eu,  /* 14 MHz */ 0x0Fu,
  63:Generated_Source\PSoC4/CyLib.c ****             /* 15 MHz */ 0x10u,  /* 16 MHz */ 0x11u,  /* 17 MHz */ 0x12u,  /* 18 MHz */ 0x13u,
  64:Generated_Source\PSoC4/CyLib.c ****             /* 19 MHz */ 0x14u,  /* 20 MHz */ 0x15u,  /* 21 MHz */ 0x16u,  /* 22 MHz */ 0x17u,
  65:Generated_Source\PSoC4/CyLib.c ****             /* 23 MHz */ 0x18u,  /* 24 MHz */ 0x19u,  /* 25 MHz */ 0x1Bu,  /* 26 MHz */ 0x1Cu,
  66:Generated_Source\PSoC4/CyLib.c ****             /* 27 MHz */ 0x1Du,  /* 28 MHz */ 0x1Eu,  /* 29 MHz */ 0x1Fu,  /* 30 MHz */ 0x20u,
  67:Generated_Source\PSoC4/CyLib.c ****             /* 31 MHz */ 0x21u,  /* 32 MHz */ 0x22u,  /* 33 MHz */ 0x23u,  /* 34 MHz */ 0x25u,
  68:Generated_Source\PSoC4/CyLib.c ****             /* 35 MHz */ 0x26u,  /* 36 MHz */ 0x27u,  /* 37 MHz */ 0x28u,  /* 38 MHz */ 0x29u,
  69:Generated_Source\PSoC4/CyLib.c ****             /* 39 MHz */ 0x2Au,  /* 40 MHz */ 0x2Bu,  /* 41 MHz */ 0x2Eu,  /* 42 MHz */ 0x2Fu,
  70:Generated_Source\PSoC4/CyLib.c ****             /* 43 MHz */ 0x30u,  /* 44 MHz */ 0x31u,  /* 45 MHz */ 0x32u,  /* 46 MHz */ 0x33u,
  71:Generated_Source\PSoC4/CyLib.c ****             /* 47 MHz */ 0x34u,  /* 48 MHz */ 0x35u };
  72:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
  73:Generated_Source\PSoC4/CyLib.c **** 
  74:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
  75:Generated_Source\PSoC4/CyLib.c ****         /* Conversion between IMO frequency and WCO DPLL max offset steps */
  76:Generated_Source\PSoC4/CyLib.c ****         const uint8 cyImoFreqMhz2DpllOffset[CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_SIZE] = {
  77:Generated_Source\PSoC4/CyLib.c ****             /* 26 MHz */  238u, /* 27 MHz */  219u, /* 28 MHz */  201u, /* 29 MHz */  185u,
  78:Generated_Source\PSoC4/CyLib.c ****             /* 30 MHz */  170u, /* 31 MHz */  155u, /* 32 MHz */  142u, /* 33 MHz */  130u,
  79:Generated_Source\PSoC4/CyLib.c ****             /* 34 MHz */  118u, /* 35 MHz */  107u, /* 36 MHz */   96u, /* 37 MHz */  86u,
  80:Generated_Source\PSoC4/CyLib.c ****             /* 38 MHz */   77u, /* 39 MHz */   68u, /* 40 MHz */   59u, /* 41 MHz */  51u,
  81:Generated_Source\PSoC4/CyLib.c ****             /* 42 MHz */   44u, /* 43 MHz */   36u, /* 44 MHz */   29u, /* 45 MHz */  23u,
  82:Generated_Source\PSoC4/CyLib.c ****             /* 46 MHz */   16u, /* 47 MHz */   10u, /* 48 MHz */   4u };
  83:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
  84:Generated_Source\PSoC4/CyLib.c **** 
  85:Generated_Source\PSoC4/CyLib.c **** /* Stored CY_SYS_CLK_IMO_TRIM4_REG when modified for USB lock */
  86:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2)
  87:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoTrim4 = 0u;
ARM GAS  e:\temp\cc2tFLyS.s 			page 3


  88:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoTrim5 = 0u;
  89:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_USB && CY_IP_SRSSV2) */
  90:Generated_Source\PSoC4/CyLib.c **** 
  91:Generated_Source\PSoC4/CyLib.c **** /* Stored PUMP_SEL configuration during disable (IMO output by default) */
  92:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkPumpConfig = CY_SYS_CLK_PUMP_ENABLE;
  93:Generated_Source\PSoC4/CyLib.c **** 
  94:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
  95:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStart
  96:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
  97:Generated_Source\PSoC4/CyLib.c **** *
  98:Generated_Source\PSoC4/CyLib.c **** * Enables the IMO.
  99:Generated_Source\PSoC4/CyLib.c **** *
 100:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4000S / PSoC 4100S / PSoC Analog 
 101:Generated_Source\PSoC4/CyLib.c **** * Coprocessor devices, this function will also enable WCO lock if selected in 
 102:Generated_Source\PSoC4/CyLib.c **** * the Design Wide Resources tab.
 103:Generated_Source\PSoC4/CyLib.c **** *
 104:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L devices, this function will also enable USB lock if selected
 105:Generated_Source\PSoC4/CyLib.c **** * in the Design Wide Resources tab.
 106:Generated_Source\PSoC4/CyLib.c **** *
 107:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 108:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStart(void)
 109:Generated_Source\PSoC4/CyLib.c **** {
  28              		.loc 1 109 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 110:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG |= CY_SYS_CLK_IMO_CONFIG_ENABLE;
  33              		.loc 1 110 0
  34 0000 034A     		ldr	r2, .L2
  35 0002 1368     		ldr	r3, [r2]
  36 0004 8021     		movs	r1, #128
  37 0006 0906     		lsls	r1, r1, #24
  38 0008 0B43     		orrs	r3, r1
  39 000a 1360     		str	r3, [r2]
 111:Generated_Source\PSoC4/CyLib.c **** 
 112:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 113:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_WCO == 1u)
 114:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableWcoLock();
 115:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_WCO == 1u) */
 116:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 117:Generated_Source\PSoC4/CyLib.c **** 
 118:Generated_Source\PSoC4/CyLib.c **** 
 119:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 120:Generated_Source\PSoC4/CyLib.c ****         #if (CYDEV_IMO_TRIMMED_BY_USB == 1u)
 121:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoEnableUsbLock();
 122:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 1u) */
 123:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 124:Generated_Source\PSoC4/CyLib.c **** 
 125:Generated_Source\PSoC4/CyLib.c **** }
  40              		.loc 1 125 0
  41              		@ sp needed
  42 000c 7047     		bx	lr
  43              	.L3:
  44 000e C046     		.align	2
  45              	.L2:
  46 0010 30000340 		.word	1073938480
ARM GAS  e:\temp\cc2tFLyS.s 			page 4


  47              		.cfi_endproc
  48              	.LFE0:
  49              		.size	CySysClkImoStart, .-CySysClkImoStart
  50              		.section	.text.CySysClkImoStop,"ax",%progbits
  51              		.align	2
  52              		.global	CySysClkImoStop
  53              		.code	16
  54              		.thumb_func
  55              		.type	CySysClkImoStop, %function
  56              	CySysClkImoStop:
  57              	.LFB1:
 126:Generated_Source\PSoC4/CyLib.c **** 
 127:Generated_Source\PSoC4/CyLib.c **** 
 128:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 129:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkImoStop
 130:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 131:Generated_Source\PSoC4/CyLib.c **** *
 132:Generated_Source\PSoC4/CyLib.c **** * Disables the IMO.
 133:Generated_Source\PSoC4/CyLib.c **** *
 134:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4100M / PSoC 4200M / PSoC 4200L / PSoC 4000S / PSoC 4100S / 
 135:Generated_Source\PSoC4/CyLib.c **** * PSoC Analog Coprocessor devices, this function will also disable WCO lock.
 136:Generated_Source\PSoC4/CyLib.c **** *
 137:Generated_Source\PSoC4/CyLib.c **** * For PSoC PSoC 4200L devices, this function will also disable USB lock.
 138:Generated_Source\PSoC4/CyLib.c **** *
 139:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 140:Generated_Source\PSoC4/CyLib.c **** void CySysClkImoStop(void)
 141:Generated_Source\PSoC4/CyLib.c **** {
  58              		.loc 1 141 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
 142:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 143:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableWcoLock();
 144:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 145:Generated_Source\PSoC4/CyLib.c **** 
 146:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 147:Generated_Source\PSoC4/CyLib.c ****         CySysClkImoDisableUsbLock();
 148:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 149:Generated_Source\PSoC4/CyLib.c **** 
 150:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_IMO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_IMO_CONFIG_ENABLE);
  63              		.loc 1 150 0
  64 0000 024A     		ldr	r2, .L5
  65 0002 1368     		ldr	r3, [r2]
  66 0004 5B00     		lsls	r3, r3, #1
  67 0006 5B08     		lsrs	r3, r3, #1
  68 0008 1360     		str	r3, [r2]
 151:Generated_Source\PSoC4/CyLib.c **** }
  69              		.loc 1 151 0
  70              		@ sp needed
  71 000a 7047     		bx	lr
  72              	.L6:
  73              		.align	2
  74              	.L5:
  75 000c 30000340 		.word	1073938480
  76              		.cfi_endproc
  77              	.LFE1:
ARM GAS  e:\temp\cc2tFLyS.s 			page 5


  78              		.size	CySysClkImoStop, .-CySysClkImoStop
  79              		.section	.text.CySysClkWriteHfclkDirect,"ax",%progbits
  80              		.align	2
  81              		.global	CySysClkWriteHfclkDirect
  82              		.code	16
  83              		.thumb_func
  84              		.type	CySysClkWriteHfclkDirect, %function
  85              	CySysClkWriteHfclkDirect:
  86              	.LFB2:
 152:Generated_Source\PSoC4/CyLib.c **** 
 153:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 154:Generated_Source\PSoC4/CyLib.c **** 
 155:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 156:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableWcoLock
 157:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 158:Generated_Source\PSoC4/CyLib.c ****     *
 159:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to WCO lock feature. This function works only if the WCO is
 160:Generated_Source\PSoC4/CyLib.c ****     * already enabled. If the WCO is not enabled then this function returns
 161:Generated_Source\PSoC4/CyLib.c ****     * without enabling the lock feature.
 162:Generated_Source\PSoC4/CyLib.c ****     *
 163:Generated_Source\PSoC4/CyLib.c ****     * It takes up to 20 ms for the IMO to stabilize. The delay is implemented with
 164:Generated_Source\PSoC4/CyLib.c ****     * CyDelay() function. The delay interval is measured based on the system
 165:Generated_Source\PSoC4/CyLib.c ****     * frequency defined by PSoC Creator at build time. If System clock frequency
 166:Generated_Source\PSoC4/CyLib.c ****     * is changed in runtime, the CyDelayFreq() with the appropriate parameter
 167:Generated_Source\PSoC4/CyLib.c ****     * should be called.
 168:Generated_Source\PSoC4/CyLib.c ****     *
 169:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 170:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 171:Generated_Source\PSoC4/CyLib.c ****     *
 172:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 173:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC Analog Coprocessor / PSoC 4200L.
 174:Generated_Source\PSoC4/CyLib.c ****     *
 175:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 176:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableWcoLock(void)
 177:Generated_Source\PSoC4/CyLib.c ****     {
 178:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 179:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 180:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 181:Generated_Source\PSoC4/CyLib.c **** 
 182:Generated_Source\PSoC4/CyLib.c ****         uint32 freq;
 183:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 184:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
 185:Generated_Source\PSoC4/CyLib.c ****         uint32 lfLimit = 0u;
 186:Generated_Source\PSoC4/CyLib.c ****         volatile uint32 flashCtlReg;
 187:Generated_Source\PSoC4/CyLib.c **** 
 188:Generated_Source\PSoC4/CyLib.c ****         if (0u != CySysClkWcoEnabled())
 189:Generated_Source\PSoC4/CyLib.c ****         {
 190:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 191:Generated_Source\PSoC4/CyLib.c **** 
 192:Generated_Source\PSoC4/CyLib.c ****             /* Set oscillator interface control port to WCO */
 193:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 194:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_OSCINTF_CTL_REG =
 195:Generated_Source\PSoC4/CyLib.c ****                     (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_MASK) |
 196:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_WCO;
 197:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 198:Generated_Source\PSoC4/CyLib.c **** 
 199:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
ARM GAS  e:\temp\cc2tFLyS.s 			page 6


 200:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 201:Generated_Source\PSoC4/CyLib.c ****                 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
 202:Generated_Source\PSoC4/CyLib.c ****                 for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 203:Generated_Source\PSoC4/CyLib.c ****                 {
 204:Generated_Source\PSoC4/CyLib.c ****                     if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImo
 205:Generated_Source\PSoC4/CyLib.c ****                     {
 206:Generated_Source\PSoC4/CyLib.c ****                         freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 207:Generated_Source\PSoC4/CyLib.c ****                         break;
 208:Generated_Source\PSoC4/CyLib.c ****                     }
 209:Generated_Source\PSoC4/CyLib.c ****                 }
 210:Generated_Source\PSoC4/CyLib.c ****             #else
 211:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate frequency by shifting register field value and adding constant. */
 212:Generated_Source\PSoC4/CyLib.c ****                 #if(CY_IP_SRSSLT)
 213:Generated_Source\PSoC4/CyLib.c ****                     freq = (((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT
 214:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ
 215:Generated_Source\PSoC4/CyLib.c ****                                       ((CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)
 216:Generated_Source\PSoC4/CyLib.c ****                                        (uint32) CY_SYS_CLK_SELECT_HFCLK_DIV_MASK));
 217:Generated_Source\PSoC4/CyLib.c ****                 #else
 218:Generated_Source\PSoC4/CyLib.c ****                     freq = ((uint32) ((CY_SYS_CLK_IMO_SELECT_REG & ((uint32) CY_SYS_CLK_IMO_SELECT_
 219:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_IMO_SELECT_FREQ_SHIFT) + CY_SYS_CLK_IMO_MIN_FREQ_
 220:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CY_IP_SRSSLT) */
 221:Generated_Source\PSoC4/CyLib.c **** 
 222:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_SRSSV2) */
 223:Generated_Source\PSoC4/CyLib.c **** 
 224:Generated_Source\PSoC4/CyLib.c ****             /* For the WCO locking mode, the IMO gain needs to be CY_SYS_CLK_IMO_TRIM4_GAIN */
 225:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
 226:Generated_Source\PSoC4/CyLib.c ****                 if ((CY_SYS_CLK_IMO_TRIM4_REG & CY_SYS_CLK_IMO_TRIM4_GAIN_MASK) == 0u)
 227:Generated_Source\PSoC4/CyLib.c ****                 {
 228:Generated_Source\PSoC4/CyLib.c **** 			         CY_SYS_CLK_IMO_TRIM4_REG = (CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_G
 229:Generated_Source\PSoC4/CyLib.c **** 			                  				     CY_SYS_CLK_IMO_TRIM4_WCO_GAIN;
 230:Generated_Source\PSoC4/CyLib.c ****                 }
 231:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_SRSSV2) */
 232:Generated_Source\PSoC4/CyLib.c **** 
 233:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_WCO_DPLL_REG & ~(CY_SYS_CLK_WCO_DPLL_MULT_MASK |
 234:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN_MASK |
 235:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN_MASK |
 236:Generated_Source\PSoC4/CyLib.c ****                                                   CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MASK);
 237:Generated_Source\PSoC4/CyLib.c **** 
 238:Generated_Source\PSoC4/CyLib.c ****             /* Set multiplier to determine IMO frequency in multiples of the WCO frequency */
 239:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_DPLL_MULT_VALUE(freq) & CY_SYS_CLK_WCO_DPLL_MULT_MASK);
 240:Generated_Source\PSoC4/CyLib.c **** 
 241:Generated_Source\PSoC4/CyLib.c ****             /* Set DPLL Loop Filter Integral and Proportional Gains Setting */
 242:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_IGAIN | CY_SYS_CLK_WCO_CONFIG_DPLL_LF_PGAIN);
 243:Generated_Source\PSoC4/CyLib.c **** 
 244:Generated_Source\PSoC4/CyLib.c ****             /* Set maximum allowed IMO offset */
 245:Generated_Source\PSoC4/CyLib.c ****             if (freq < CY_SYS_CLK_IMO_FREQ_WCO_DPLL_SAFE_POINT)
 246:Generated_Source\PSoC4/CyLib.c ****             {
 247:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX << CY_SYS_CLK_WCO_CONFIG_DPLL_LF
 248:Generated_Source\PSoC4/CyLib.c ****             }
 249:Generated_Source\PSoC4/CyLib.c ****             else
 250:Generated_Source\PSoC4/CyLib.c ****             {
 251:Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (uint32) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) +
 252:Generated_Source\PSoC4/CyLib.c ****                     cyImoFreqMhz2DpllOffset[freq - CY_SYS_CLK_IMO_FREQ_WCO_DPLL_TABLE_OFFSET];
 253:Generated_Source\PSoC4/CyLib.c **** 
 254:Generated_Source\PSoC4/CyLib.c ****                 lfLimit = (lfLimit > CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX) ?
 255:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_MAX : lfLimit;
 256:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  e:\temp\cc2tFLyS.s 			page 7


 257:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= (lfLimit << CY_SYS_CLK_WCO_CONFIG_DPLL_LF_LIMIT_SHIFT);
 258:Generated_Source\PSoC4/CyLib.c ****             }
 259:Generated_Source\PSoC4/CyLib.c **** 
 260:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_DPLL_REG = regTmp;
 261:Generated_Source\PSoC4/CyLib.c **** 
 262:Generated_Source\PSoC4/CyLib.c ****             flashCtlReg = CY_FLASH_CTL_REG;
 263:Generated_Source\PSoC4/CyLib.c ****             CySysFlashSetWaitCycles(CY_SYS_CLK_IMO_MAX_FREQ_MHZ);
 264:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 265:Generated_Source\PSoC4/CyLib.c ****             CyDelay(CY_SYS_CLK_WCO_IMO_TIMEOUT_MS);
 266:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CTL_REG = flashCtlReg;
 267:Generated_Source\PSoC4/CyLib.c **** 
 268:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
 269:Generated_Source\PSoC4/CyLib.c ****         }
 270:Generated_Source\PSoC4/CyLib.c ****     }
 271:Generated_Source\PSoC4/CyLib.c **** 
 272:Generated_Source\PSoC4/CyLib.c **** 
 273:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 274:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableWcoLock
 275:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 276:Generated_Source\PSoC4/CyLib.c ****     *
 277:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to WCO lock feature.
 278:Generated_Source\PSoC4/CyLib.c ****     *
 279:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L devices, note that the IMO can lock to either WCO or USB
 280:Generated_Source\PSoC4/CyLib.c ****     * but not both.
 281:Generated_Source\PSoC4/CyLib.c ****     *
 282:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 283:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC Analog Coprocessor / PSoC 4200L.
 284:Generated_Source\PSoC4/CyLib.c ****     *
 285:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 286:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableWcoLock(void)
 287:Generated_Source\PSoC4/CyLib.c ****     {
 288:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE;
 289:Generated_Source\PSoC4/CyLib.c ****     }
 290:Generated_Source\PSoC4/CyLib.c **** 
 291:Generated_Source\PSoC4/CyLib.c **** 
 292:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 293:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetWcoLock
 294:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 295:Generated_Source\PSoC4/CyLib.c ****     *
 296:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to WCO lock enable state.
 297:Generated_Source\PSoC4/CyLib.c ****     *
 298:Generated_Source\PSoC4/CyLib.c ****     * This function is applicable for PSoC 4100M / PSoC 4200M / PSoC 4000S /
 299:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100S / PSoC Analog Coprocessor / PSoC 4200L.
 300:Generated_Source\PSoC4/CyLib.c ****     *
 301:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to WCO lock is enabled.
 302:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to WCO lock is disabled.
 303:Generated_Source\PSoC4/CyLib.c ****     *
 304:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 305:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetWcoLock(void)
 306:Generated_Source\PSoC4/CyLib.c ****     {
 307:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_DPLL_ENABLE)) ?
 308:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 309:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 310:Generated_Source\PSoC4/CyLib.c ****     }
 311:Generated_Source\PSoC4/CyLib.c **** 
 312:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 313:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  e:\temp\cc2tFLyS.s 			page 8


 314:Generated_Source\PSoC4/CyLib.c **** 
 315:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 316:Generated_Source\PSoC4/CyLib.c **** 
 317:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 318:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoEnableUsbLock
 319:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 320:Generated_Source\PSoC4/CyLib.c ****     *
 321:Generated_Source\PSoC4/CyLib.c ****     * Enables the IMO to USB lock feature.
 322:Generated_Source\PSoC4/CyLib.c ****     *
 323:Generated_Source\PSoC4/CyLib.c ****     * This function must be called before CySysClkWriteImoFreq().
 324:Generated_Source\PSoC4/CyLib.c ****     *
 325:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStart() function if USB lock
 326:Generated_Source\PSoC4/CyLib.c ****     * selected in the Design Wide Resources tab.
 327:Generated_Source\PSoC4/CyLib.c ****     *
 328:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 329:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 330:Generated_Source\PSoC4/CyLib.c ****     *
 331:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 332:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoEnableUsbLock(void)
 333:Generated_Source\PSoC4/CyLib.c ****     {
 334:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 335:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 336:Generated_Source\PSoC4/CyLib.c ****             
 337:Generated_Source\PSoC4/CyLib.c ****             /* Check for new trim algorithm */
 338:Generated_Source\PSoC4/CyLib.c ****             uint32 CySysClkUsbCuSortTrim = ((CY_SFLASH_S1_TESTPGM_OLD_REV < (CY_SFLASH_S1_TESTPGM_R
 339:Generated_Source\PSoC4/CyLib.c ****                                                                             CY_SFLASH_S1_TESTPGM_RE
 340:Generated_Source\PSoC4/CyLib.c **** 
 341:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 342:Generated_Source\PSoC4/CyLib.c ****             uint32 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;
 343:Generated_Source\PSoC4/CyLib.c **** 
 344:Generated_Source\PSoC4/CyLib.c ****             for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 345:Generated_Source\PSoC4/CyLib.c ****             {
 346:Generated_Source\PSoC4/CyLib.c ****                 if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImoFreq
 347:Generated_Source\PSoC4/CyLib.c ****                 {
 348:Generated_Source\PSoC4/CyLib.c ****                     freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 349:Generated_Source\PSoC4/CyLib.c ****                     break;
 350:Generated_Source\PSoC4/CyLib.c ****                 }
 351:Generated_Source\PSoC4/CyLib.c ****             }
 352:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 353:Generated_Source\PSoC4/CyLib.c ****         
 354:Generated_Source\PSoC4/CyLib.c ****         /* Set oscillator interface control port to USB */
 355:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB)
 356:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_OSCINTF_CTL_REG = (CY_SYS_CLK_OSCINTF_CTL_REG & (uint32) ~CY_SYS_CLK_OSCINTF
 357:Generated_Source\PSoC4/CyLib.c ****                                           CY_SYS_CLK_OSCINTF_CTL_PORT_SEL_USB;
 358:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_IMO_TRIMMABLE_BY_WCO && CY_IP_IMO_TRIMMABLE_BY_USB) */
 359:Generated_Source\PSoC4/CyLib.c **** 
 360:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 361:Generated_Source\PSoC4/CyLib.c ****            
 362:Generated_Source\PSoC4/CyLib.c ****             /* Save CY_SYS_CLK_IMO_TRIM4_REG and set IMO gain for USB lock */
 363:Generated_Source\PSoC4/CyLib.c ****             CySysClkImoTrim4 = CY_SYS_CLK_IMO_TRIM4_REG;
 364:Generated_Source\PSoC4/CyLib.c ****             
 365:Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkUsbCuSortTrim)
 366:Generated_Source\PSoC4/CyLib.c ****             {
 367:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoTrim5 = CY_PWR_BG_TRIM5_REG;
 368:Generated_Source\PSoC4/CyLib.c ****                 
 369:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM4_REG = (CySysClkImoTrim4 & (uint32) ~CY_SYS_CLK_IMO_TRIM4_GAIN_
 370:Generated_Source\PSoC4/CyLib.c ****                                             CY_SFLASH_USBMODE_IMO_GAIN_TRIM_REG;
ARM GAS  e:\temp\cc2tFLyS.s 			page 9


 371:Generated_Source\PSoC4/CyLib.c ****                 CY_PWR_BG_TRIM5_REG = CY_SFLASH_USBMODE_IMO_TEMPCO_REG;
 372:Generated_Source\PSoC4/CyLib.c ****                 
 373:Generated_Source\PSoC4/CyLib.c ****             }
 374:Generated_Source\PSoC4/CyLib.c ****             else
 375:Generated_Source\PSoC4/CyLib.c ****             {
 376:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM4_REG = (CySysClkImoTrim4 & (uint32) ~CY_SYS_CLK_IMO_TRIM4_GAIN_
 377:Generated_Source\PSoC4/CyLib.c ****                                             CY_SYS_CLK_IMO_TRIM4_USB_GAIN;
 378:Generated_Source\PSoC4/CyLib.c **** 
 379:Generated_Source\PSoC4/CyLib.c ****             }
 380:Generated_Source\PSoC4/CyLib.c **** 
 381:Generated_Source\PSoC4/CyLib.c ****             if (48u == freq)
 382:Generated_Source\PSoC4/CyLib.c ****             {
 383:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM1_REG = (0u != CySysClkUsbCuSortTrim) ? 
 384:Generated_Source\PSoC4/CyLib.c ****                                            (uint32)CY_SFLASH_CU_IMO_TRIM_USBMODE_48_REG :
 385:Generated_Source\PSoC4/CyLib.c ****                                            (uint32)CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 386:Generated_Source\PSoC4/CyLib.c ****             }
 387:Generated_Source\PSoC4/CyLib.c ****             else if (24u == freq)
 388:Generated_Source\PSoC4/CyLib.c ****             {
 389:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM1_REG = (0u != CySysClkUsbCuSortTrim) ? 
 390:Generated_Source\PSoC4/CyLib.c ****                                            (uint32)CY_SFLASH_CU_IMO_TRIM_USBMODE_24_REG :
 391:Generated_Source\PSoC4/CyLib.c ****                                            (uint32)CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 392:Generated_Source\PSoC4/CyLib.c ****             }
 393:Generated_Source\PSoC4/CyLib.c ****             else
 394:Generated_Source\PSoC4/CyLib.c ****             {
 395:Generated_Source\PSoC4/CyLib.c ****                 /* Do nothing */
 396:Generated_Source\PSoC4/CyLib.c ****             }
 397:Generated_Source\PSoC4/CyLib.c ****             
 398:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 399:Generated_Source\PSoC4/CyLib.c **** 
 400:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG |= CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 401:Generated_Source\PSoC4/CyLib.c ****     }
 402:Generated_Source\PSoC4/CyLib.c **** 
 403:Generated_Source\PSoC4/CyLib.c **** 
 404:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 405:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoDisableUsbLock
 406:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 407:Generated_Source\PSoC4/CyLib.c ****     *
 408:Generated_Source\PSoC4/CyLib.c ****     * Disables the IMO to USB lock feature.
 409:Generated_Source\PSoC4/CyLib.c ****     *
 410:Generated_Source\PSoC4/CyLib.c ****     * This function is called from CySysClkImoStop() function if USB lock selected
 411:Generated_Source\PSoC4/CyLib.c ****     * in the Design Wide Resources tab.
 412:Generated_Source\PSoC4/CyLib.c ****     *
 413:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 414:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 415:Generated_Source\PSoC4/CyLib.c ****     *
 416:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 417:Generated_Source\PSoC4/CyLib.c ****     void CySysClkImoDisableUsbLock(void)
 418:Generated_Source\PSoC4/CyLib.c ****     {
 419:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 420:Generated_Source\PSoC4/CyLib.c ****             uint32 i;
 421:Generated_Source\PSoC4/CyLib.c ****             
 422:Generated_Source\PSoC4/CyLib.c ****             /* Check for new trim algorithm */
 423:Generated_Source\PSoC4/CyLib.c ****             uint32 CySysClkUsbCuSortTrim = ((CY_SFLASH_S1_TESTPGM_OLD_REV < (CY_SFLASH_S1_TESTPGM_R
 424:Generated_Source\PSoC4/CyLib.c ****                                                                             CY_SFLASH_S1_TESTPGM_RE
 425:Generated_Source\PSoC4/CyLib.c **** 
 426:Generated_Source\PSoC4/CyLib.c ****             /* Get current IMO frequency based on the register value */
 427:Generated_Source\PSoC4/CyLib.c ****             uint32 freq = CY_SYS_CLK_IMO_MIN_FREQ_MHZ;;
ARM GAS  e:\temp\cc2tFLyS.s 			page 10


 428:Generated_Source\PSoC4/CyLib.c **** 
 429:Generated_Source\PSoC4/CyLib.c ****             for(i = 0u; i < CY_SYS_CLK_IMO_FREQ_TABLE_SIZE; i++)
 430:Generated_Source\PSoC4/CyLib.c ****             {
 431:Generated_Source\PSoC4/CyLib.c ****                 if ((uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS_MASK) == cyImoFreq
 432:Generated_Source\PSoC4/CyLib.c ****                 {
 433:Generated_Source\PSoC4/CyLib.c ****                     freq = i + CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET;
 434:Generated_Source\PSoC4/CyLib.c ****                     break;
 435:Generated_Source\PSoC4/CyLib.c ****                 }
 436:Generated_Source\PSoC4/CyLib.c ****             }           
 437:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 438:Generated_Source\PSoC4/CyLib.c ****         
 439:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_USBDEVv2_CR1_REG &= (uint32) ~CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK;
 440:Generated_Source\PSoC4/CyLib.c **** 
 441:Generated_Source\PSoC4/CyLib.c ****         #if(CY_IP_SRSSV2)
 442:Generated_Source\PSoC4/CyLib.c ****             /* Restore CY_SYS_CLK_IMO_TRIM4_REG */
 443:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM4_REG = ((CY_SYS_CLK_IMO_TRIM4_REG & (uint32) ~CY_SYS_CLK_IMO_TRIM4_
 444:Generated_Source\PSoC4/CyLib.c ****                                         (CySysClkImoTrim4 & CY_SYS_CLK_IMO_TRIM4_GAIN_MASK));
 445:Generated_Source\PSoC4/CyLib.c **** 
 446:Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkUsbCuSortTrim)
 447:Generated_Source\PSoC4/CyLib.c ****             {
 448:Generated_Source\PSoC4/CyLib.c ****                 CY_PWR_BG_TRIM5_REG = CySysClkImoTrim5;
 449:Generated_Source\PSoC4/CyLib.c ****             }
 450:Generated_Source\PSoC4/CyLib.c ****             
 451:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 452:Generated_Source\PSoC4/CyLib.c ****             
 453:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_SRSSV2) */
 454:Generated_Source\PSoC4/CyLib.c ****     }
 455:Generated_Source\PSoC4/CyLib.c **** 
 456:Generated_Source\PSoC4/CyLib.c **** 
 457:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
 458:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkImoGetUsbLock
 459:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
 460:Generated_Source\PSoC4/CyLib.c ****     *
 461:Generated_Source\PSoC4/CyLib.c ****     * Reports the IMO to USB lock enable state.
 462:Generated_Source\PSoC4/CyLib.c ****     *
 463:Generated_Source\PSoC4/CyLib.c ****     * This is applicable for PSoC 4200L family of devices only. For PSoC 4200L
 464:Generated_Source\PSoC4/CyLib.c ****     * devices, the IMO can lock to either WCO or USB, but not both.
 465:Generated_Source\PSoC4/CyLib.c ****     *
 466:Generated_Source\PSoC4/CyLib.c ****     * \return 1 if IMO to USB lock is enabled.
 467:Generated_Source\PSoC4/CyLib.c ****     * \return 0 if IMO to USB lock is disabled.
 468:Generated_Source\PSoC4/CyLib.c ****     *
 469:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
 470:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkImoGetUsbLock(void)
 471:Generated_Source\PSoC4/CyLib.c ****     {
 472:Generated_Source\PSoC4/CyLib.c ****         return ((0u != (CY_SYS_CLK_USBDEVv2_CR1_REG & CY_SYS_CLK_USBDEVv2_CR1_ENABLE_LOCK)) ?
 473:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 1u :
 474:Generated_Source\PSoC4/CyLib.c ****                 (uint32) 0u);
 475:Generated_Source\PSoC4/CyLib.c ****     }
 476:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 477:Generated_Source\PSoC4/CyLib.c **** 
 478:Generated_Source\PSoC4/CyLib.c **** 
 479:Generated_Source\PSoC4/CyLib.c **** 
 480:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 481:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteHfclkDirect
 482:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 483:Generated_Source\PSoC4/CyLib.c **** *
 484:Generated_Source\PSoC4/CyLib.c **** * Selects the direct source for the HFCLK.
ARM GAS  e:\temp\cc2tFLyS.s 			page 11


 485:Generated_Source\PSoC4/CyLib.c **** *
 486:Generated_Source\PSoC4/CyLib.c **** * The new source must be running and stable before calling this function.
 487:Generated_Source\PSoC4/CyLib.c **** *
 488:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000:
 489:Generated_Source\PSoC4/CyLib.c **** * The SYSCLK has a maximum speed of 16 MHz, so HFCLK and SYSCLK dividers should
 490:Generated_Source\PSoC4/CyLib.c **** * be selected in a way to not to exceed 16 MHz for the System clock.
 491:Generated_Source\PSoC4/CyLib.c **** *
 492:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during device operation, call
 493:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
 494:Generated_Source\PSoC4/CyLib.c **** * of clock cycles the cache will wait before sampling data comes back from
 495:Generated_Source\PSoC4/CyLib.c **** * Flash. If the SYSCLK clock frequency decreases, you can call
 496:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() to improve the CPU performance. See
 497:Generated_Source\PSoC4/CyLib.c **** * CySysFlashSetWaitCycles() description for more information.
 498:Generated_Source\PSoC4/CyLib.c **** *
 499:Generated_Source\PSoC4/CyLib.c **** * Do not select PLL as the source for HFCLK if PLL output frequency exceeds
 500:Generated_Source\PSoC4/CyLib.c **** * maximum permissible value for HFCLK.
 501:Generated_Source\PSoC4/CyLib.c **** *
 502:Generated_Source\PSoC4/CyLib.c **** * \param clkSelect One of the available HFCLK direct sources.
 503:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_IMO     IMO.
 504:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_EXTCLK  External clock pin.
 505:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_ECO     External crystal oscillator. Applicable for
 506:Generated_Source\PSoC4/CyLib.c **** *                          PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L /
 507:Generated_Source\PSoC4/CyLib.c **** *                          4100S with ECO.
 508:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL0    PLL#0. Applicable for PSoC 4200L /
 509:Generated_Source\PSoC4/CyLib.c **** *                          4100S with PLL.
 510:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_HFCLK_PLL1    PLL#1. Applicable for PSoC 4200L.
 511:Generated_Source\PSoC4/CyLib.c **** *
 512:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 513:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteHfclkDirect(uint32 clkSelect)
 514:Generated_Source\PSoC4/CyLib.c **** {
  87              		.loc 1 514 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              	.LVL0:
  92 0000 10B5     		push	{r4, lr}
  93              		.cfi_def_cfa_offset 8
  94              		.cfi_offset 4, -8
  95              		.cfi_offset 14, -4
  96 0002 0400     		movs	r4, r0
 515:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 516:Generated_Source\PSoC4/CyLib.c ****     uint32 tmpReg;
 517:Generated_Source\PSoC4/CyLib.c ****     
 518:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_SRSSLT && CY_IP_PLL)
 519:Generated_Source\PSoC4/CyLib.c ****         uint8 i = 0u;
 520:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_IP_SRSSLT && CY_IP_PLL) */
 521:Generated_Source\PSoC4/CyLib.c **** 
 522:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
  97              		.loc 1 522 0
  98 0004 FFF7FEFF 		bl	CyEnterCriticalSection
  99              	.LVL1:
 523:Generated_Source\PSoC4/CyLib.c **** 
 524:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSLT && CY_IP_PLL)
 525:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_HFCLK_PLL0 == clkSelect) || (CY_SYS_CLK_HFCLK_ECO == clkSelect))
 526:Generated_Source\PSoC4/CyLib.c ****     {
 527:Generated_Source\PSoC4/CyLib.c ****         tmpReg = CY_SYS_CLK_SELECT_REG & ~CY_SYS_CLK_SELECT_DIRECT_SEL_MASK;
 528:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= CY_SYS_CLK_HFCLK_IMO;
ARM GAS  e:\temp\cc2tFLyS.s 			page 12


 529:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_SELECT_REG = tmpReg;        
 530:Generated_Source\PSoC4/CyLib.c ****         
 531:Generated_Source\PSoC4/CyLib.c ****         /* SRSSLT block does not have registers to select PLL. It is part of EXCO */ 
 532:Generated_Source\PSoC4/CyLib.c ****         tmpReg = CY_SYS_ECO_CLK_SELECT_REG & ~CY_SYS_ECO_CLK_SELECT_ECO_PLL_MASK;
 533:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= ((clkSelect & CY_SYS_CLK_SELECT_HFCLK_SEL_PLL_MASK) >> CY_SYS_CLK_SELECT_HFCLK_PL
 534:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_ECO_CLK_SELECT_REG = tmpReg;
 535:Generated_Source\PSoC4/CyLib.c ****         
 536:Generated_Source\PSoC4/CyLib.c ****         /* Generate clock sequence to change clock source in CY_SYS_ECO_CLK_SELECT_REG */
 537:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_EXCO_PGM_CLK_REG |= CY_SYS_EXCO_PGM_CLK_ENABLE_MASK;
 538:Generated_Source\PSoC4/CyLib.c ****         
 539:Generated_Source\PSoC4/CyLib.c ****         for(i = 0u; i < CY_SYS_EXCO_PGM_CLK_SEQ_GENERATOR; i++)
 540:Generated_Source\PSoC4/CyLib.c ****         {
 541:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_EXCO_PGM_CLK_REG |= CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK;
 542:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_EXCO_PGM_CLK_REG &= ~CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK;
 543:Generated_Source\PSoC4/CyLib.c ****         }
 544:Generated_Source\PSoC4/CyLib.c ****         
 545:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_EXCO_PGM_CLK_REG &= ~CY_SYS_EXCO_PGM_CLK_ENABLE_MASK;    
 546:Generated_Source\PSoC4/CyLib.c ****     }
 547:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSLT && CY_IP_PLL) */
 548:Generated_Source\PSoC4/CyLib.c **** 
 549:Generated_Source\PSoC4/CyLib.c ****     tmpReg = CY_SYS_CLK_SELECT_REG & ~(CY_SYS_CLK_SELECT_DIRECT_SEL_MASK |
 100              		.loc 1 549 0
 101 0008 044A     		ldr	r2, .L8
 102 000a 1368     		ldr	r3, [r2]
 103 000c 0321     		movs	r1, #3
 104 000e 8B43     		bics	r3, r1
 105              	.LVL2:
 550:Generated_Source\PSoC4/CyLib.c ****                                        CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 551:Generated_Source\PSoC4/CyLib.c **** 
 552:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 553:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_HFCLK_PLL0 == clkSelect) || (CY_SYS_CLK_HFCLK_PLL1 == clkSelect))
 554:Generated_Source\PSoC4/CyLib.c ****     {
 555:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 556:Generated_Source\PSoC4/CyLib.c ****     }
 557:Generated_Source\PSoC4/CyLib.c ****     else
 558:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 559:Generated_Source\PSoC4/CyLib.c ****     {
 560:Generated_Source\PSoC4/CyLib.c ****         tmpReg |= (clkSelect & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 106              		.loc 1 560 0
 107 0010 0C40     		ands	r4, r1
 108              	.LVL3:
 109 0012 1C43     		orrs	r4, r3
 110              	.LVL4:
 561:Generated_Source\PSoC4/CyLib.c ****     }   
 562:Generated_Source\PSoC4/CyLib.c ****     
 563:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = tmpReg;
 111              		.loc 1 563 0
 112 0014 1460     		str	r4, [r2]
 564:Generated_Source\PSoC4/CyLib.c ****     
 565:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 113              		.loc 1 565 0
 114 0016 FFF7FEFF 		bl	CyExitCriticalSection
 115              	.LVL5:
 566:Generated_Source\PSoC4/CyLib.c **** }
 116              		.loc 1 566 0
 117              		@ sp needed
 118              	.LVL6:
ARM GAS  e:\temp\cc2tFLyS.s 			page 13


 119 001a 10BD     		pop	{r4, pc}
 120              	.L9:
 121              		.align	2
 122              	.L8:
 123 001c 28000340 		.word	1073938472
 124              		.cfi_endproc
 125              	.LFE2:
 126              		.size	CySysClkWriteHfclkDirect, .-CySysClkWriteHfclkDirect
 127              		.section	.text.CySysEnablePumpClock,"ax",%progbits
 128              		.align	2
 129              		.global	CySysEnablePumpClock
 130              		.code	16
 131              		.thumb_func
 132              		.type	CySysEnablePumpClock, %function
 133              	CySysEnablePumpClock:
 134              	.LFB3:
 567:Generated_Source\PSoC4/CyLib.c **** 
 568:Generated_Source\PSoC4/CyLib.c **** 
 569:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 570:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysEnablePumpClock
 571:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 572:Generated_Source\PSoC4/CyLib.c **** *
 573:Generated_Source\PSoC4/CyLib.c **** * Enables / disables the pump clock.
 574:Generated_Source\PSoC4/CyLib.c **** *
 575:Generated_Source\PSoC4/CyLib.c **** * \param enable  
 576:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_DISABLE - Disables the pump clock
 577:Generated_Source\PSoC4/CyLib.c **** * CY_SYS_CLK_PUMP_ENABLE - Enables and restores the operating source of 
 578:Generated_Source\PSoC4/CyLib.c **** * the pump clock.
 579:Generated_Source\PSoC4/CyLib.c **** *
 580:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
 581:Generated_Source\PSoC4/CyLib.c **** *  Enabling/disabling the pump clock does not guarantee glitch free operation 
 582:Generated_Source\PSoC4/CyLib.c **** *  when changing the IMO parameters or clock divider settings.
 583:Generated_Source\PSoC4/CyLib.c **** *
 584:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 585:Generated_Source\PSoC4/CyLib.c **** void CySysEnablePumpClock(uint32 enable)
 586:Generated_Source\PSoC4/CyLib.c **** {
 135              		.loc 1 586 0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		@ link register save eliminated.
 140              	.LVL7:
 587:Generated_Source\PSoC4/CyLib.c ****     #if(CY_IP_SRSSV2)
 588:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 589:Generated_Source\PSoC4/CyLib.c ****         {
 590:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG |= (CySysClkPumpConfig << CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIF
 591:Generated_Source\PSoC4/CyLib.c ****         }
 592:Generated_Source\PSoC4/CyLib.c ****         else
 593:Generated_Source\PSoC4/CyLib.c ****         {
 594:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_IMO_CONFIG_REG >> CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_SHIFT
 595:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK;
 596:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_CONFIG_REG &= ~(CY_SYS_CLK_IMO_CONFIG_PUMP_SEL_MASK << CY_SYS_CLK_IMO_CO
 597:Generated_Source\PSoC4/CyLib.c ****         }
 598:Generated_Source\PSoC4/CyLib.c ****     #else /* CY_IP_SRSSLT */
 599:Generated_Source\PSoC4/CyLib.c ****         if (0u != (CY_SYS_CLK_PUMP_ENABLE & enable))
 141              		.loc 1 599 0
 142 0000 C307     		lsls	r3, r0, #31
ARM GAS  e:\temp\cc2tFLyS.s 			page 14


 143 0002 07D5     		bpl	.L11
 600:Generated_Source\PSoC4/CyLib.c ****         {
 601:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG |= (CySysClkPumpConfig << CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT);
 144              		.loc 1 601 0
 145 0004 094A     		ldr	r2, .L13
 146 0006 1168     		ldr	r1, [r2]
 147 0008 094B     		ldr	r3, .L13+4
 148 000a 1B68     		ldr	r3, [r3]
 149 000c 1B01     		lsls	r3, r3, #4
 150 000e 0B43     		orrs	r3, r1
 151 0010 1360     		str	r3, [r2]
 152 0012 0AE0     		b	.L10
 153              	.L11:
 602:Generated_Source\PSoC4/CyLib.c ****         }
 603:Generated_Source\PSoC4/CyLib.c ****         else
 604:Generated_Source\PSoC4/CyLib.c ****         {
 605:Generated_Source\PSoC4/CyLib.c ****             CySysClkPumpConfig = (CY_SYS_CLK_SELECT_REG >> CY_SYS_CLK_SELECT_PUMP_SEL_SHIFT) & 
 154              		.loc 1 605 0
 155 0014 054A     		ldr	r2, .L13
 156 0016 1368     		ldr	r3, [r2]
 157 0018 1B09     		lsrs	r3, r3, #4
 158 001a 0321     		movs	r1, #3
 159 001c 0B40     		ands	r3, r1
 160 001e 0449     		ldr	r1, .L13+4
 161 0020 0B60     		str	r3, [r1]
 606:Generated_Source\PSoC4/CyLib.c ****                                   CY_SYS_CLK_SELECT_PUMP_SEL_MASK;
 607:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_SELECT_REG &= ~(CY_SYS_CLK_SELECT_PUMP_SEL_MASK << CY_SYS_CLK_SELECT_PUMP_SE
 162              		.loc 1 607 0
 163 0022 1368     		ldr	r3, [r2]
 164 0024 3021     		movs	r1, #48
 165 0026 8B43     		bics	r3, r1
 166 0028 1360     		str	r3, [r2]
 167              	.L10:
 608:Generated_Source\PSoC4/CyLib.c ****         }
 609:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (CY_IP_SRSSV2) */
 610:Generated_Source\PSoC4/CyLib.c **** }
 168              		.loc 1 610 0
 169              		@ sp needed
 170 002a 7047     		bx	lr
 171              	.L14:
 172              		.align	2
 173              	.L13:
 174 002c 28000340 		.word	1073938472
 175 0030 00000000 		.word	.LANCHOR0
 176              		.cfi_endproc
 177              	.LFE3:
 178              		.size	CySysEnablePumpClock, .-CySysEnablePumpClock
 179              		.section	.text.CySysClkGetSysclkSource,"ax",%progbits
 180              		.align	2
 181              		.global	CySysClkGetSysclkSource
 182              		.code	16
 183              		.thumb_func
 184              		.type	CySysClkGetSysclkSource, %function
 185              	CySysClkGetSysclkSource:
 186              	.LFB4:
 611:Generated_Source\PSoC4/CyLib.c **** 
 612:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  e:\temp\cc2tFLyS.s 			page 15


 613:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 614:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkGetSysclkSource
 615:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 616:Generated_Source\PSoC4/CyLib.c **** *
 617:Generated_Source\PSoC4/CyLib.c **** * Returns the source of the System clock.
 618:Generated_Source\PSoC4/CyLib.c **** *
 619:Generated_Source\PSoC4/CyLib.c **** * \return The same as \ref CySysClkWriteHfclkDirect() function parameters.
 620:Generated_Source\PSoC4/CyLib.c **** *
 621:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 622:Generated_Source\PSoC4/CyLib.c **** uint32 CySysClkGetSysclkSource(void)
 623:Generated_Source\PSoC4/CyLib.c **** {
 187              		.loc 1 623 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191 0000 10B5     		push	{r4, lr}
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 4, -8
 194              		.cfi_offset 14, -4
 624:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 625:Generated_Source\PSoC4/CyLib.c ****     uint32 sysclkSource;
 626:Generated_Source\PSoC4/CyLib.c **** 
 627:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 195              		.loc 1 627 0
 196 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 197              	.LVL8:
 628:Generated_Source\PSoC4/CyLib.c **** 
 629:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_SRSSV2 && CY_IP_PLL)
 630:Generated_Source\PSoC4/CyLib.c ****     if ((CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK) != 0u)
 631:Generated_Source\PSoC4/CyLib.c ****     {
 632:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_HFCLK_SEL_MASK);
 633:Generated_Source\PSoC4/CyLib.c ****     }
 634:Generated_Source\PSoC4/CyLib.c ****     else
 635:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2 && CY_IP_PLL) */
 636:Generated_Source\PSoC4/CyLib.c ****     {
 637:Generated_Source\PSoC4/CyLib.c ****         sysclkSource = (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK);
 198              		.loc 1 637 0
 199 0006 044B     		ldr	r3, .L16
 200 0008 1B68     		ldr	r3, [r3]
 201 000a 0324     		movs	r4, #3
 202 000c 1C40     		ands	r4, r3
 203              	.LVL9:
 638:Generated_Source\PSoC4/CyLib.c **** 
 639:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_SRSSLT && CY_IP_PLL)
 640:Generated_Source\PSoC4/CyLib.c ****         sysclkSource |= (((uint32)(CY_SYS_ECO_CLK_SELECT_REG & CY_SYS_ECO_CLK_SELECT_ECO_PLL_MASK))
 641:Generated_Source\PSoC4/CyLib.c ****                          CY_SYS_CLK_SELECT_HFCLK_PLL_SHIFT);
 642:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_IP_SRSSLT && CY_IP_PLL) */
 643:Generated_Source\PSoC4/CyLib.c ****         
 644:Generated_Source\PSoC4/CyLib.c ****     }
 645:Generated_Source\PSoC4/CyLib.c **** 
 646:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 204              		.loc 1 646 0
 205 000e FFF7FEFF 		bl	CyExitCriticalSection
 206              	.LVL10:
 647:Generated_Source\PSoC4/CyLib.c **** 
 648:Generated_Source\PSoC4/CyLib.c ****     return (sysclkSource);
 649:Generated_Source\PSoC4/CyLib.c **** }
ARM GAS  e:\temp\cc2tFLyS.s 			page 16


 207              		.loc 1 649 0
 208 0012 2000     		movs	r0, r4
 209              		@ sp needed
 210              	.LVL11:
 211 0014 10BD     		pop	{r4, pc}
 212              	.L17:
 213 0016 C046     		.align	2
 214              	.L16:
 215 0018 28000340 		.word	1073938472
 216              		.cfi_endproc
 217              	.LFE4:
 218              		.size	CySysClkGetSysclkSource, .-CySysClkGetSysclkSource
 219              		.section	.text.CySysClkWriteSysclkDiv,"ax",%progbits
 220              		.align	2
 221              		.global	CySysClkWriteSysclkDiv
 222              		.code	16
 223              		.thumb_func
 224              		.type	CySysClkWriteSysclkDiv, %function
 225              	CySysClkWriteSysclkDiv:
 226              	.LFB5:
 650:Generated_Source\PSoC4/CyLib.c **** 
 651:Generated_Source\PSoC4/CyLib.c **** 
 652:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 653:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteSysclkDiv
 654:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 655:Generated_Source\PSoC4/CyLib.c **** *
 656:Generated_Source\PSoC4/CyLib.c **** * Selects the prescaler divide amount for SYSCLK from HFCLK.
 657:Generated_Source\PSoC4/CyLib.c **** *
 658:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 659:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 660:Generated_Source\PSoC4/CyLib.c **** *
 661:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 662:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 663:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 664:Generated_Source\PSoC4/CyLib.c **** *
 665:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 666:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 667:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 668:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 669:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 670:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 671:Generated_Source\PSoC4/CyLib.c **** *
 672:Generated_Source\PSoC4/CyLib.c **** * \param divider Power of 2 prescaler selection
 673:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV1        SYSCLK = HFCLK / 1
 674:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV2        SYSCLK = HFCLK / 2
 675:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV4        SYSCLK = HFCLK / 4
 676:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV8        SYSCLK = HFCLK / 8
 677:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV16       SYSCLK = HFCLK / 16  (N/A for 4000 Family)
 678:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV32       SYSCLK = HFCLK / 32  (N/A for 4000 Family)
 679:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV64       SYSCLK = HFCLK / 64  (N/A for 4000 Family)
 680:Generated_Source\PSoC4/CyLib.c **** *  CY_SYS_CLK_SYSCLK_DIV128      SYSCLK = HFCLK / 128 (N/A for 4000 Family)
 681:Generated_Source\PSoC4/CyLib.c **** *
 682:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 683:Generated_Source\PSoC4/CyLib.c **** void CySysClkWriteSysclkDiv(uint32 divider)
 684:Generated_Source\PSoC4/CyLib.c **** {
 227              		.loc 1 684 0
 228              		.cfi_startproc
ARM GAS  e:\temp\cc2tFLyS.s 			page 17


 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              	.LVL12:
 232 0000 10B5     		push	{r4, lr}
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 4, -8
 235              		.cfi_offset 14, -4
 236 0002 0400     		movs	r4, r0
 685:Generated_Source\PSoC4/CyLib.c ****     uint8  interruptState;
 686:Generated_Source\PSoC4/CyLib.c **** 
 687:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
 237              		.loc 1 687 0
 238 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 239              	.LVL13:
 688:Generated_Source\PSoC4/CyLib.c **** 
 689:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_CLK_SELECT_REG = ((uint32)(((uint32)divider & CY_SYS_CLK_SELECT_SYSCLK_DIV_MASK) <<
 240              		.loc 1 689 0
 241 0008 A401     		lsls	r4, r4, #6
 242              	.LVL14:
 243 000a FF23     		movs	r3, #255
 244 000c 2340     		ands	r3, r4
 690:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 691:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_CLK_SELECT_REG & ((uint32)(~(uint32)(CY_SYS_CLK_SELECT_SYSCLK_D
 245              		.loc 1 691 0
 246 000e 0449     		ldr	r1, .L19
 247 0010 0A68     		ldr	r2, [r1]
 248 0012 C024     		movs	r4, #192
 249 0014 A243     		bics	r2, r4
 690:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 250              		.loc 1 690 0
 251 0016 1343     		orrs	r3, r2
 689:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT)) |
 252              		.loc 1 689 0
 253 0018 0B60     		str	r3, [r1]
 692:Generated_Source\PSoC4/CyLib.c ****                                     CY_SYS_CLK_SELECT_SYSCLK_DIV_SHIFT))));
 693:Generated_Source\PSoC4/CyLib.c **** 
 694:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
 254              		.loc 1 694 0
 255 001a FFF7FEFF 		bl	CyExitCriticalSection
 256              	.LVL15:
 695:Generated_Source\PSoC4/CyLib.c **** }
 257              		.loc 1 695 0
 258              		@ sp needed
 259 001e 10BD     		pop	{r4, pc}
 260              	.L20:
 261              		.align	2
 262              	.L19:
 263 0020 28000340 		.word	1073938472
 264              		.cfi_endproc
 265              	.LFE5:
 266              		.size	CySysClkWriteSysclkDiv, .-CySysClkWriteSysclkDiv
 267              		.section	.text.CySysClkWriteHfclkDiv,"ax",%progbits
 268              		.align	2
 269              		.global	CySysClkWriteHfclkDiv
 270              		.code	16
 271              		.thumb_func
 272              		.type	CySysClkWriteHfclkDiv, %function
ARM GAS  e:\temp\cc2tFLyS.s 			page 18


 273              	CySysClkWriteHfclkDiv:
 274              	.LFB7:
 696:Generated_Source\PSoC4/CyLib.c **** 
 697:Generated_Source\PSoC4/CyLib.c **** 
 698:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysClkWriteImoFreq
 700:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
 701:Generated_Source\PSoC4/CyLib.c **** *
 702:Generated_Source\PSoC4/CyLib.c **** * Sets the frequency of the IMO.
 703:Generated_Source\PSoC4/CyLib.c **** *
 704:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
 705:Generated_Source\PSoC4/CyLib.c **** * should be selected in a way, not to exceed 16 MHz for SYSCLK.
 706:Generated_Source\PSoC4/CyLib.c **** *
 707:Generated_Source\PSoC4/CyLib.c **** * PSoC 4100 \ PSoC 4100 BLE \ PSoC 4100M: The SYSCLK has the speed of 24 MHz,
 708:Generated_Source\PSoC4/CyLib.c **** * so HFCLK and SYSCLK dividers should be selected in a way, not to exceed 24 MHz
 709:Generated_Source\PSoC4/CyLib.c **** * for SYSCLK.
 710:Generated_Source\PSoC4/CyLib.c **** *
 711:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200M and PSoC 4200L device families, if WCO lock feature is enabled
 712:Generated_Source\PSoC4/CyLib.c **** * then this API will disable the lock, write the new IMO frequency and then
 713:Generated_Source\PSoC4/CyLib.c **** * re-enable the lock.
 714:Generated_Source\PSoC4/CyLib.c **** *
 715:Generated_Source\PSoC4/CyLib.c **** * For PSoC 4200L device families, this function enables the USB lock when 24 or
 716:Generated_Source\PSoC4/CyLib.c **** * 48 MHz passed as a parameter if the USB lock option is enabled in Design Wide
 717:Generated_Source\PSoC4/CyLib.c **** * Resources tab or CySysClkImoEnableUsbLock() was called before. Note the USB
 718:Generated_Source\PSoC4/CyLib.c **** * lock is disabled during IMO frequency change.
 719:Generated_Source\PSoC4/CyLib.c **** *
 720:Generated_Source\PSoC4/CyLib.c **** * The CPU is halted if new frequency is invalid and project is compiled
 721:Generated_Source\PSoC4/CyLib.c **** * in debug mode.
 722:Generated_Source\PSoC4/CyLib.c **** *
 723:Generated_Source\PSoC4/CyLib.c **** * If the SYSCLK clock frequency increases during the device operation, call
 724:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
 725:Generated_Source\PSoC4/CyLib.c **** * number of clock cycles the cache will wait before sampling data comes back
 726:Generated_Source\PSoC4/CyLib.c **** * from Flash. If the SYSCLK clock frequency decreases, you can call
 727:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
 728:Generated_Source\PSoC4/CyLib.c **** * \ref CySysFlashSetWaitCycles() description for more information.
 729:Generated_Source\PSoC4/CyLib.c **** *
 730:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000: The System Clock (SYSCLK) has maximum speed of 16 MHz, so HFCLK
 731:Generated_Source\PSoC4/CyLib.c **** * and SYSCLK dividers should be selected in a way, to not to exceed 16 MHz for
 732:Generated_Source\PSoC4/CyLib.c **** * the System clock.
 733:Generated_Source\PSoC4/CyLib.c **** *
 734:Generated_Source\PSoC4/CyLib.c **** * \param freq All PSoC 4 families excluding the following: Valid range [3-48]
 735:Generated_Source\PSoC4/CyLib.c **** * with step size equals 1. PSoC 4000: Valid values are 24, 32, and 48.
 736:Generated_Source\PSoC4/CyLib.c **** * PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor: Valid range [24-48] with 
 737:Generated_Source\PSoC4/CyLib.c **** * step size equals 4.
 738:Generated_Source\PSoC4/CyLib.c **** *
 739:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
 740:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
 741:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 742:Generated_Source\PSoC4/CyLib.c ****     {
 743:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 744:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   parameters[2u];
 745:Generated_Source\PSoC4/CyLib.c ****             volatile uint32   regValues[4u];
 746:Generated_Source\PSoC4/CyLib.c ****         #else
 747:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim4;
 748:Generated_Source\PSoC4/CyLib.c ****             uint8  bgTrim5;
 749:Generated_Source\PSoC4/CyLib.c ****             uint8  newImoTrim2Value;
 750:Generated_Source\PSoC4/CyLib.c ****             uint8  currentImoTrim2Value;
ARM GAS  e:\temp\cc2tFLyS.s 			page 19


 751:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FM) */
 752:Generated_Source\PSoC4/CyLib.c **** 
 753:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 754:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 755:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 756:Generated_Source\PSoC4/CyLib.c **** 
 757:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 758:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 759:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 760:Generated_Source\PSoC4/CyLib.c **** 
 761:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 762:Generated_Source\PSoC4/CyLib.c **** 
 763:Generated_Source\PSoC4/CyLib.c **** 
 764:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 765:Generated_Source\PSoC4/CyLib.c **** 
 766:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 767:Generated_Source\PSoC4/CyLib.c ****             if(0u != CySysClkImoGetWcoLock())
 768:Generated_Source\PSoC4/CyLib.c ****             {
 769:Generated_Source\PSoC4/CyLib.c ****                 wcoLock = 1u;
 770:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoDisableWcoLock();
 771:Generated_Source\PSoC4/CyLib.c ****             }
 772:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 773:Generated_Source\PSoC4/CyLib.c **** 
 774:Generated_Source\PSoC4/CyLib.c **** 
 775:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 776:Generated_Source\PSoC4/CyLib.c **** 
 777:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 778:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetUsbLock())
 779:Generated_Source\PSoC4/CyLib.c ****                 {
 780:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 781:Generated_Source\PSoC4/CyLib.c **** 
 782:Generated_Source\PSoC4/CyLib.c ****                 if ((24u == freq) || (48u == freq))
 783:Generated_Source\PSoC4/CyLib.c ****                 {
 784:Generated_Source\PSoC4/CyLib.c ****                     usbLock = 1u;
 785:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableUsbLock();
 786:Generated_Source\PSoC4/CyLib.c ****                 }
 787:Generated_Source\PSoC4/CyLib.c **** 
 788:Generated_Source\PSoC4/CyLib.c ****             #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 789:Generated_Source\PSoC4/CyLib.c ****                 }
 790:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 791:Generated_Source\PSoC4/CyLib.c **** 
 792:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 793:Generated_Source\PSoC4/CyLib.c **** 
 794:Generated_Source\PSoC4/CyLib.c **** 
 795:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_FMLT)
 796:Generated_Source\PSoC4/CyLib.c **** 
 797:Generated_Source\PSoC4/CyLib.c ****             /* FM-Lite Clock Restore */
 798:Generated_Source\PSoC4/CyLib.c ****             regValues[0u] = CY_SYS_CLK_IMO_CONFIG_REG;
 799:Generated_Source\PSoC4/CyLib.c ****             regValues[1u] = CY_SYS_CLK_SELECT_REG;
 800:Generated_Source\PSoC4/CyLib.c ****             regValues[2u] = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 801:Generated_Source\PSoC4/CyLib.c ****             regValues[3u] = CY_FLASH_CTL_REG;
 802:Generated_Source\PSoC4/CyLib.c **** 
 803:Generated_Source\PSoC4/CyLib.c ****             parameters[0u] =
 804:Generated_Source\PSoC4/CyLib.c ****                 (uint32) ((CY_FLASH_KEY_TWO(CY_FLASH_API_OPCODE_CLK_RESTORE) <<  CY_FLASH_PARAM_KEY
 805:Generated_Source\PSoC4/CyLib.c ****                             CY_FLASH_KEY_ONE);
 806:Generated_Source\PSoC4/CyLib.c ****             parameters[1u] = (uint32) &regValues[0u];
 807:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  e:\temp\cc2tFLyS.s 			page 20


 808:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSARG_REG = (uint32) &parameters[0u];
 809:Generated_Source\PSoC4/CyLib.c ****             CY_FLASH_CPUSS_SYSREQ_REG = CY_FLASH_CPUSS_REQ_START | CY_FLASH_API_OPCODE_CLK_RESTORE;
 810:Generated_Source\PSoC4/CyLib.c ****             (void) CY_FLASH_CPUSS_SYSARG_REG;
 811:Generated_Source\PSoC4/CyLib.c **** 
 812:Generated_Source\PSoC4/CyLib.c ****         #else /* (CY_IP_FM) */
 813:Generated_Source\PSoC4/CyLib.c **** 
 814:Generated_Source\PSoC4/CyLib.c ****         if ((freq >= CY_SYS_CLK_IMO_MIN_FREQ_MHZ) && (freq <= CY_SYS_CLK_IMO_MAX_FREQ_MHZ))
 815:Generated_Source\PSoC4/CyLib.c ****         {
 816:Generated_Source\PSoC4/CyLib.c ****             if(freq <= CY_SFLASH_IMO_MAXF0_REG)
 817:Generated_Source\PSoC4/CyLib.c ****             {
 818:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS0_REG;
 819:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO0_REG;
 820:Generated_Source\PSoC4/CyLib.c ****             }
 821:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF1_REG)
 822:Generated_Source\PSoC4/CyLib.c ****             {
 823:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS1_REG;
 824:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO1_REG;
 825:Generated_Source\PSoC4/CyLib.c ****             }
 826:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF2_REG)
 827:Generated_Source\PSoC4/CyLib.c ****             {
 828:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS2_REG;
 829:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO2_REG;
 830:Generated_Source\PSoC4/CyLib.c ****             }
 831:Generated_Source\PSoC4/CyLib.c ****             else if(freq <= CY_SFLASH_IMO_MAXF3_REG)
 832:Generated_Source\PSoC4/CyLib.c ****             {
 833:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS3_REG;
 834:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO3_REG;
 835:Generated_Source\PSoC4/CyLib.c ****             }
 836:Generated_Source\PSoC4/CyLib.c ****             else
 837:Generated_Source\PSoC4/CyLib.c ****             {
 838:Generated_Source\PSoC4/CyLib.c ****                 bgTrim4 = CY_SFLASH_IMO_ABS4_REG;
 839:Generated_Source\PSoC4/CyLib.c ****                 bgTrim5 = CY_SFLASH_IMO_TMPCO4_REG;
 840:Generated_Source\PSoC4/CyLib.c ****             }
 841:Generated_Source\PSoC4/CyLib.c **** 
 842:Generated_Source\PSoC4/CyLib.c ****             /* Get IMO_TRIM2 value for the new frequency */
 843:Generated_Source\PSoC4/CyLib.c ****             newImoTrim2Value = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET];
 844:Generated_Source\PSoC4/CyLib.c **** 
 845:Generated_Source\PSoC4/CyLib.c **** 
 846:Generated_Source\PSoC4/CyLib.c ****             /****************************************************************************
 847:Generated_Source\PSoC4/CyLib.c ****             * The IMO can have a different trim per frequency. To avoid possible corner
 848:Generated_Source\PSoC4/CyLib.c ****             * cases where a trim change can exceed the maximum frequency, the trim must
 849:Generated_Source\PSoC4/CyLib.c ****             * be applied at a frequency that is low enough.
 850:Generated_Source\PSoC4/CyLib.c ****             *
 851:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 852:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 853:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 854:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 855:Generated_Source\PSoC4/CyLib.c ****             if ((newImoTrim2Value >= CY_SYS_CLK_IMO_BOUNDARY_FREQ_TRIM2) && (freq >= CY_SYS_CLK_IMO
 856:Generated_Source\PSoC4/CyLib.c ****             {
 857:Generated_Source\PSoC4/CyLib.c ****                 /* Set boundary IMO frequency: safe for IMO above 48 MHZ trimming */
 858:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = (uint32) cyImoFreqMhz2Reg[CY_SYS_CLK_IMO_TEMP_FREQ_MHZ -
 859:Generated_Source\PSoC4/CyLib.c ****                                                                      CY_SYS_CLK_IMO_FREQ_TABLE_OFFS
 860:Generated_Source\PSoC4/CyLib.c **** 
 861:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 862:Generated_Source\PSoC4/CyLib.c **** 
 863:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = CY_SYS_CLK_IMO_TEMP_FREQ_TRIM2;
 864:Generated_Source\PSoC4/CyLib.c ****             }
ARM GAS  e:\temp\cc2tFLyS.s 			page 21


 865:Generated_Source\PSoC4/CyLib.c ****             else
 866:Generated_Source\PSoC4/CyLib.c ****             {
 867:Generated_Source\PSoC4/CyLib.c ****                 currentImoTrim2Value = (uint8) (CY_SYS_CLK_IMO_TRIM2_REG & CY_SYS_CLK_IMO_FREQ_BITS
 868:Generated_Source\PSoC4/CyLib.c ****             }
 869:Generated_Source\PSoC4/CyLib.c **** 
 870:Generated_Source\PSoC4/CyLib.c **** 
 871:Generated_Source\PSoC4/CyLib.c ****             /***************************************************************************
 872:Generated_Source\PSoC4/CyLib.c ****             * A trim change needs to be allowed to settle (within 5us) before the Freq
 873:Generated_Source\PSoC4/CyLib.c ****             * can be changed to a new frequency.
 874:Generated_Source\PSoC4/CyLib.c ****             *
 875:Generated_Source\PSoC4/CyLib.c ****             * Comparing IMO_TRIM2 values for the current and new frequencies, since
 876:Generated_Source\PSoC4/CyLib.c ****             * IMO_TRIM2 value as a function of IMO frequency is a strictly increasing
 877:Generated_Source\PSoC4/CyLib.c ****             * function and is time-invariant.
 878:Generated_Source\PSoC4/CyLib.c ****             ***************************************************************************/
 879:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value < currentImoTrim2Value)
 880:Generated_Source\PSoC4/CyLib.c ****             {
 881:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 882:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 883:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 884:Generated_Source\PSoC4/CyLib.c ****             }
 885:Generated_Source\PSoC4/CyLib.c **** 
 886:Generated_Source\PSoC4/CyLib.c ****             /* Set trims for the new IMO frequency */
 887:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_FREQ_T
 888:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM4_REG  = bgTrim4;
 889:Generated_Source\PSoC4/CyLib.c ****             CY_PWR_BG_TRIM5_REG  = bgTrim5;
 890:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_IMO_TRIM_TIMEOUT_US);
 891:Generated_Source\PSoC4/CyLib.c **** 
 892:Generated_Source\PSoC4/CyLib.c ****             if (newImoTrim2Value > currentImoTrim2Value)
 893:Generated_Source\PSoC4/CyLib.c ****             {
 894:Generated_Source\PSoC4/CyLib.c ****                 /* Set new IMO frequency */
 895:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_TRIM2_REG = cyImoFreqMhz2Reg[freq - CY_SYS_CLK_IMO_FREQ_TABLE_OFFSET
 896:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_FREQ_TIMEOUT_CYCLES);
 897:Generated_Source\PSoC4/CyLib.c ****             }
 898:Generated_Source\PSoC4/CyLib.c ****         }
 899:Generated_Source\PSoC4/CyLib.c ****         else
 900:Generated_Source\PSoC4/CyLib.c ****         {
 901:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
 902:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
 903:Generated_Source\PSoC4/CyLib.c ****         }
 904:Generated_Source\PSoC4/CyLib.c **** 
 905:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_FMLT) */
 906:Generated_Source\PSoC4/CyLib.c **** 
 907:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 908:Generated_Source\PSoC4/CyLib.c ****             if (1u == wcoLock)
 909:Generated_Source\PSoC4/CyLib.c ****             {
 910:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableWcoLock();
 911:Generated_Source\PSoC4/CyLib.c ****             }
 912:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 913:Generated_Source\PSoC4/CyLib.c **** 
 914:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 915:Generated_Source\PSoC4/CyLib.c ****             if (1u == usbLock)
 916:Generated_Source\PSoC4/CyLib.c ****             {
 917:Generated_Source\PSoC4/CyLib.c ****                 CySysClkImoEnableUsbLock();
 918:Generated_Source\PSoC4/CyLib.c ****             }
 919:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 920:Generated_Source\PSoC4/CyLib.c **** 
 921:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
ARM GAS  e:\temp\cc2tFLyS.s 			page 22


 922:Generated_Source\PSoC4/CyLib.c ****     }
 923:Generated_Source\PSoC4/CyLib.c **** 
 924:Generated_Source\PSoC4/CyLib.c **** #else
 925:Generated_Source\PSoC4/CyLib.c **** 
 926:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteImoFreq(uint32 freq)
 927:Generated_Source\PSoC4/CyLib.c ****     {
 928:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 929:Generated_Source\PSoC4/CyLib.c ****         uint8  imoTrim1Value;
 930:Generated_Source\PSoC4/CyLib.c **** 
 931:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 932:Generated_Source\PSoC4/CyLib.c ****             uint32 wcoLock = 0u;
 933:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */        
 934:Generated_Source\PSoC4/CyLib.c ****         
 935:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 936:Generated_Source\PSoC4/CyLib.c ****             uint32 usbLock = 0u;
 937:Generated_Source\PSoC4/CyLib.c ****         #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 938:Generated_Source\PSoC4/CyLib.c **** 
 939:Generated_Source\PSoC4/CyLib.c ****         #if (CY_PSOC4_4000)
 940:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 32u) || (freq == 48u))
 941:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_CCG3)
 942:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 36u) || (freq == 48u))
 943:Generated_Source\PSoC4/CyLib.c ****         #else
 944:Generated_Source\PSoC4/CyLib.c ****             if ((freq == 24u) || (freq == 28u) || (freq == 32u) ||
 945:Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
 946:Generated_Source\PSoC4/CyLib.c ****                 (freq == 48u))
 947:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_PSOC4_4000) */
 948:Generated_Source\PSoC4/CyLib.c ****         {
 949:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
 950:Generated_Source\PSoC4/CyLib.c **** 
 951:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
 952:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkImoGetWcoLock())
 953:Generated_Source\PSoC4/CyLib.c ****                 {
 954:Generated_Source\PSoC4/CyLib.c ****                     wcoLock = 1u;
 955:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoDisableWcoLock();
 956:Generated_Source\PSoC4/CyLib.c ****                 }
 957:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
 958:Generated_Source\PSoC4/CyLib.c **** 
 959:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 960:Generated_Source\PSoC4/CyLib.c **** 
 961:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 962:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkImoGetUsbLock())
 963:Generated_Source\PSoC4/CyLib.c ****                     {
 964:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 965:Generated_Source\PSoC4/CyLib.c **** 
 966:Generated_Source\PSoC4/CyLib.c ****                     if (48u == freq)
 967:Generated_Source\PSoC4/CyLib.c ****                     {
 968:Generated_Source\PSoC4/CyLib.c ****                         usbLock = 1u;
 969:Generated_Source\PSoC4/CyLib.c ****                         CySysClkImoDisableUsbLock();
 970:Generated_Source\PSoC4/CyLib.c ****                     }
 971:Generated_Source\PSoC4/CyLib.c **** 
 972:Generated_Source\PSoC4/CyLib.c ****                 #if (CYDEV_IMO_TRIMMED_BY_USB == 0u)
 973:Generated_Source\PSoC4/CyLib.c ****                     }
 974:Generated_Source\PSoC4/CyLib.c ****                 #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 975:Generated_Source\PSoC4/CyLib.c **** 
 976:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CYDEV_IMO_TRIMMED_BY_USB == 0u) */
 977:Generated_Source\PSoC4/CyLib.c **** 
 978:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  e:\temp\cc2tFLyS.s 			page 23


 979:Generated_Source\PSoC4/CyLib.c ****             /* Set IMO to 24 MHz - CLK_IMO_SELECT.FREQ = 0 */
 980:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_SELECT_REG &= ((uint32) ~CY_SYS_CLK_IMO_SELECT_FREQ_MASK);
 981:Generated_Source\PSoC4/CyLib.c **** 
 982:Generated_Source\PSoC4/CyLib.c **** 
 983:Generated_Source\PSoC4/CyLib.c ****             /* Apply coarse trim */
 984:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
 985:Generated_Source\PSoC4/CyLib.c ****                 if ((1u == usbLock) && (48u == freq))
 986:Generated_Source\PSoC4/CyLib.c ****                 {
 987:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_48_REG;
 988:Generated_Source\PSoC4/CyLib.c ****                 }
 989:Generated_Source\PSoC4/CyLib.c ****                 else if ((1u == usbLock) && (24u == freq))
 990:Generated_Source\PSoC4/CyLib.c ****                 {
 991:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = CY_SFLASH_IMO_TRIM_USBMODE_24_REG;
 992:Generated_Source\PSoC4/CyLib.c ****                 }
 993:Generated_Source\PSoC4/CyLib.c ****                 else
 994:Generated_Source\PSoC4/CyLib.c ****                 {
 995:Generated_Source\PSoC4/CyLib.c ****                     imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_M
 996:Generated_Source\PSoC4/CyLib.c ****                 }
 997:Generated_Source\PSoC4/CyLib.c ****             #else
 998:Generated_Source\PSoC4/CyLib.c ****                 imoTrim1Value = (uint8) CY_SFLASH_IMO_TRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ);
 999:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
1000:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM1_REG = (uint32) imoTrim1Value;
1001:Generated_Source\PSoC4/CyLib.c **** 
1002:Generated_Source\PSoC4/CyLib.c ****             /* Zero out fine trim */
1003:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM2_REG = CY_SYS_CLK_IMO_TRIM2_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM2_F
1004:Generated_Source\PSoC4/CyLib.c **** 
1005:Generated_Source\PSoC4/CyLib.c ****             /* Apply TC trim */
1006:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_IMO_TRIM3_REG = (CY_SYS_CLK_IMO_TRIM3_REG & ((uint32) ~CY_SYS_CLK_IMO_TRIM3_
1007:Generated_Source\PSoC4/CyLib.c ****                 (CY_SFLASH_IMO_TCTRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) & CY_SYS_CLK_IMO_TRIM
1008:Generated_Source\PSoC4/CyLib.c **** 
1009:Generated_Source\PSoC4/CyLib.c ****             CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
1010:Generated_Source\PSoC4/CyLib.c **** 
1011:Generated_Source\PSoC4/CyLib.c ****             if (freq > CY_SYS_CLK_IMO_MIN_FREQ_MHZ)
1012:Generated_Source\PSoC4/CyLib.c ****             {
1013:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
1014:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
1015:Generated_Source\PSoC4/CyLib.c ****                     (((freq - 4u - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ
1016:Generated_Source\PSoC4/CyLib.c **** 
1017:Generated_Source\PSoC4/CyLib.c ****                 CyDelayCycles(CY_SYS_CLK_IMO_TRIM_DELAY_CYCLES);
1018:Generated_Source\PSoC4/CyLib.c **** 
1019:Generated_Source\PSoC4/CyLib.c ****                 /* Make small step to final frequency */
1020:Generated_Source\PSoC4/CyLib.c ****                 /* Select nearby intermediate frequency */
1021:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_IMO_SELECT_REG = (CY_SYS_CLK_IMO_SELECT_REG & ((uint32) ~CY_SYS_CLK_IMO_
1022:Generated_Source\PSoC4/CyLib.c ****                     (((freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ_MASK
1023:Generated_Source\PSoC4/CyLib.c ****             }
1024:Generated_Source\PSoC4/CyLib.c **** 
1025:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_WCO)
1026:Generated_Source\PSoC4/CyLib.c ****                 if (1u == wcoLock)
1027:Generated_Source\PSoC4/CyLib.c ****                 {
1028:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableWcoLock();
1029:Generated_Source\PSoC4/CyLib.c ****                 }
1030:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_WCO) */
1031:Generated_Source\PSoC4/CyLib.c ****         
1032:Generated_Source\PSoC4/CyLib.c ****         
1033:Generated_Source\PSoC4/CyLib.c ****             #if (CY_IP_IMO_TRIMMABLE_BY_USB)
1034:Generated_Source\PSoC4/CyLib.c ****                 if (1u == usbLock)
1035:Generated_Source\PSoC4/CyLib.c ****                 {
ARM GAS  e:\temp\cc2tFLyS.s 			page 24


1036:Generated_Source\PSoC4/CyLib.c ****                     CySysClkImoEnableUsbLock();
1037:Generated_Source\PSoC4/CyLib.c ****                 }
1038:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
1039:Generated_Source\PSoC4/CyLib.c **** 
1040:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1041:Generated_Source\PSoC4/CyLib.c ****         }
1042:Generated_Source\PSoC4/CyLib.c ****         else
1043:Generated_Source\PSoC4/CyLib.c ****         {
1044:Generated_Source\PSoC4/CyLib.c ****             /* Halt CPU in debug mode if new frequency is invalid */
1045:Generated_Source\PSoC4/CyLib.c ****             CYASSERT(0u != 0u);
1046:Generated_Source\PSoC4/CyLib.c ****         }
1047:Generated_Source\PSoC4/CyLib.c ****     }
1048:Generated_Source\PSoC4/CyLib.c **** 
1049:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
1050:Generated_Source\PSoC4/CyLib.c **** 
1051:Generated_Source\PSoC4/CyLib.c **** 
1052:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSLT)
1053:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1054:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkWriteHfclkDiv
1055:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1056:Generated_Source\PSoC4/CyLib.c ****     *
1057:Generated_Source\PSoC4/CyLib.c ****     * Selects the pre-scaler divider value for HFCLK from IMO.
1058:Generated_Source\PSoC4/CyLib.c ****     *
1059:Generated_Source\PSoC4/CyLib.c ****     * The HFCLK predivider allows the device to divide the HFCLK selection mux
1060:Generated_Source\PSoC4/CyLib.c ****     * input before use as HFCLK. The predivider is capable of dividing the HFCLK by
1061:Generated_Source\PSoC4/CyLib.c ****     * powers of 2 between 1 and 8.
1062:Generated_Source\PSoC4/CyLib.c ****     *
1063:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4000: The SYSCLK has the speed of 16 MHz, so HFCLK and SYSCLK dividers
1064:Generated_Source\PSoC4/CyLib.c ****     * should be selected in a way, not to exceed 16 MHz for SYSCLK.
1065:Generated_Source\PSoC4/CyLib.c ****     *
1066:Generated_Source\PSoC4/CyLib.c ****     * If the SYSCLK clock frequency increases during the device operation, call
1067:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() with the appropriate parameter to adjust the
1068:Generated_Source\PSoC4/CyLib.c ****     * number of clock cycles the cache will wait before sampling data comes back
1069:Generated_Source\PSoC4/CyLib.c ****     * from Flash. If the SYSCLK clock frequency decreases, you can call
1070:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() to improve the CPU performance. See
1071:Generated_Source\PSoC4/CyLib.c ****     * \ref CySysFlashSetWaitCycles() description for more information.
1072:Generated_Source\PSoC4/CyLib.c ****     *
1073:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_NODIV    Transparent mode (w/o dividing)
1074:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_2        Divide selected clock source by 2
1075:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_4        Divide selected clock source by 4
1076:Generated_Source\PSoC4/CyLib.c ****     * \param \ref CY_SYS_CLK_HFCLK_DIV_8        Divide selected clock source by 8
1077:Generated_Source\PSoC4/CyLib.c ****     *
1078:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1079:Generated_Source\PSoC4/CyLib.c ****     void CySysClkWriteHfclkDiv(uint32 divider)
1080:Generated_Source\PSoC4/CyLib.c ****     {
 275              		.loc 1 1080 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              	.LVL16:
 280 0000 70B5     		push	{r4, r5, r6, lr}
 281              		.cfi_def_cfa_offset 16
 282              		.cfi_offset 4, -16
 283              		.cfi_offset 5, -12
 284              		.cfi_offset 6, -8
 285              		.cfi_offset 14, -4
 286 0002 0400     		movs	r4, r0
ARM GAS  e:\temp\cc2tFLyS.s 			page 25


1081:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1082:Generated_Source\PSoC4/CyLib.c **** 
1083:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
 287              		.loc 1 1083 0
 288 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 289              	.LVL17:
1084:Generated_Source\PSoC4/CyLib.c **** 
1085:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & ((uint32) (~(CY_SYS_CLK_SELECT_HFCLK_DIV_
 290              		.loc 1 1085 0
 291 0008 0549     		ldr	r1, .L22
 292 000a 0A68     		ldr	r2, [r1]
 293 000c 0C25     		movs	r5, #12
 294 000e AA43     		bics	r2, r5
1086:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)))) |
1087:Generated_Source\PSoC4/CyLib.c ****                     ((uint32)((divider & CY_SYS_CLK_SELECT_HFCLK_DIV_MASK) << CY_SYS_CLK_SELECT_HFC
 295              		.loc 1 1087 0
 296 0010 A300     		lsls	r3, r4, #2
 297 0012 2C00     		movs	r4, r5
 298              	.LVL18:
 299 0014 1C40     		ands	r4, r3
1086:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)))) |
 300              		.loc 1 1086 0
 301 0016 1443     		orrs	r4, r2
1085:Generated_Source\PSoC4/CyLib.c ****                                         CY_SYS_CLK_SELECT_HFCLK_DIV_SHIFT)))) |
 302              		.loc 1 1085 0
 303 0018 0C60     		str	r4, [r1]
1088:Generated_Source\PSoC4/CyLib.c **** 
1089:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
 304              		.loc 1 1089 0
 305 001a FFF7FEFF 		bl	CyExitCriticalSection
 306              	.LVL19:
1090:Generated_Source\PSoC4/CyLib.c ****     }
 307              		.loc 1 1090 0
 308              		@ sp needed
 309 001e 70BD     		pop	{r4, r5, r6, pc}
 310              	.L23:
 311              		.align	2
 312              	.L22:
 313 0020 28000340 		.word	1073938472
 314              		.cfi_endproc
 315              	.LFE7:
 316              		.size	CySysClkWriteHfclkDiv, .-CySysClkWriteHfclkDiv
 317              		.section	.text.CySysGetResetReason,"ax",%progbits
 318              		.align	2
 319              		.global	CySysGetResetReason
 320              		.code	16
 321              		.thumb_func
 322              		.type	CySysGetResetReason, %function
 323              	CySysGetResetReason:
 324              	.LFB8:
1091:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSLT) */
1092:Generated_Source\PSoC4/CyLib.c **** 
1093:Generated_Source\PSoC4/CyLib.c **** 
1094:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_ECO)
1095:Generated_Source\PSoC4/CyLib.c **** 
1096:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1097:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStart
ARM GAS  e:\temp\cc2tFLyS.s 			page 26


1098:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1099:Generated_Source\PSoC4/CyLib.c ****     *
1100:Generated_Source\PSoC4/CyLib.c ****     * Starts the External Crystal Oscillator (ECO). Refer to the device datasheet
1101:Generated_Source\PSoC4/CyLib.c ****     * for the ECO startup time.
1102:Generated_Source\PSoC4/CyLib.c ****     *
1103:Generated_Source\PSoC4/CyLib.c ****     * The timeout interval is measured based on the system frequency defined by
1104:Generated_Source\PSoC4/CyLib.c ****     * PSoC Creator at build time. If System clock frequency is changed in
1105:Generated_Source\PSoC4/CyLib.c ****     * runtime, the \ref CyDelayFreq() with the appropriate parameter should be
1106:Generated_Source\PSoC4/CyLib.c ****     * called.
1107:Generated_Source\PSoC4/CyLib.c ****     *
1108:Generated_Source\PSoC4/CyLib.c ****     * PSoC 4100 BLE / PSoC 4200 BLE: The WCO must be enabled prior to enabling ECO.
1109:Generated_Source\PSoC4/CyLib.c ****     *
1110:Generated_Source\PSoC4/CyLib.c ****     * \param timeoutUs Timeout in microseconds.
1111:Generated_Source\PSoC4/CyLib.c ****     *
1112:Generated_Source\PSoC4/CyLib.c ****     * If zero is specified, the function does not wait for timeout and returns
1113:Generated_Source\PSoC4/CyLib.c ****     * CYRET_SUCCESS. If non-zero is specified, the function waits for the timeout.
1114:Generated_Source\PSoC4/CyLib.c ****     *
1115:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS Completed successfully. The ECO is oscillating and
1116:Generated_Source\PSoC4/CyLib.c ****     * amplitude reached 60% and it does not mean 24 MHz crystal is within 50 ppm.
1117:Generated_Source\PSoC4/CyLib.c ****     *
1118:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_TIMEOUT Timeout occurred. If the crystal is not oscillating
1119:Generated_Source\PSoC4/CyLib.c ****     * or amplitude didn't reach 60% after specified amount of time, CYRET_TIMEOUT
1120:Generated_Source\PSoC4/CyLib.c ****     * is returned.
1121:Generated_Source\PSoC4/CyLib.c ****     *
1122:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1123:Generated_Source\PSoC4/CyLib.c ****     *
1124:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1125:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkEcoStart(uint32 timeoutUs)
1126:Generated_Source\PSoC4/CyLib.c ****     {
1127:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1128:Generated_Source\PSoC4/CyLib.c **** 
1129:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_ECO_BLESS)
1130:Generated_Source\PSoC4/CyLib.c ****             /* Enable the RF oscillator band gap */
1131:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG |= CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
1132:Generated_Source\PSoC4/CyLib.c **** 
1133:Generated_Source\PSoC4/CyLib.c ****             /* Update trimming register */
1134:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_BB_XO_REG = CY_SYS_XTAL_BLERD_BB_XO_TRIM;
1135:Generated_Source\PSoC4/CyLib.c **** 
1136:Generated_Source\PSoC4/CyLib.c ****             /* Enable the Crystal */
1137:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG |= CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
1138:Generated_Source\PSoC4/CyLib.c ****         
1139:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1140:Generated_Source\PSoC4/CyLib.c ****             uint32 regConfig;
1141:Generated_Source\PSoC4/CyLib.c ****             uint32 intrRegMaskStore = 0u;
1142:Generated_Source\PSoC4/CyLib.c ****             
1143:Generated_Source\PSoC4/CyLib.c ****             if (0u != (CY_SYS_BLESS_MT_CFG_REG & (CY_SYS_BLESS_MT_CFG_ENABLE_BLERD <<  CYFLD_BLE_BL
1144:Generated_Source\PSoC4/CyLib.c ****             {
1145:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG |= (CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_D
1146:Generated_Source\PSoC4/CyLib.c ****             }
1147:Generated_Source\PSoC4/CyLib.c ****             else
1148:Generated_Source\PSoC4/CyLib.c ****             {
1149:Generated_Source\PSoC4/CyLib.c ****                 /* Init BLE core */
1150:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG_REG = CY_SYS_BLESS_MT_DELAY_CFG_INIT;
1151:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG2_REG = CY_SYS_BLESS_MT_DELAY_CFG2_INIT;
1152:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_DELAY_CFG3_REG = CY_SYS_BLESS_MT_DELAY_CFG3_INIT;
1153:Generated_Source\PSoC4/CyLib.c ****             
1154:Generated_Source\PSoC4/CyLib.c ****                 /* RCB init */
ARM GAS  e:\temp\cc2tFLyS.s 			page 27


1155:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_CTRL_REG;
1156:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_RCB_CTRL_CLEAR;
1157:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_RCB_CTRL_INIT;
1158:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_CTRL_REG = regConfig;
1159:Generated_Source\PSoC4/CyLib.c ****                 
1160:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1161:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1162:Generated_Source\PSoC4/CyLib.c ****                 {
1163:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1164:Generated_Source\PSoC4/CyLib.c ****                 }
1165:Generated_Source\PSoC4/CyLib.c ****                 
1166:Generated_Source\PSoC4/CyLib.c ****                 /* Enable BLE core */
1167:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_BLESS_MT_CFG_REG;
1168:Generated_Source\PSoC4/CyLib.c ****                 regConfig &= CY_SYS_BLESS_MT_CFG_CLEAR;
1169:Generated_Source\PSoC4/CyLib.c ****                 regConfig |= CY_SYS_BLESS_MT_CFG_INIT;
1170:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_BLESS_MT_CFG_REG = regConfig;
1171:Generated_Source\PSoC4/CyLib.c **** 
1172:Generated_Source\PSoC4/CyLib.c ****                 while(0u == ((CY_SYS_BLESS_BLERD_ACTIVE_INTR_STAT & CY_SYS_BLESS_INTR_STAT_REG)))
1173:Generated_Source\PSoC4/CyLib.c ****                 {
1174:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until BLERD55 moves to active state */
1175:Generated_Source\PSoC4/CyLib.c ****                 }
1176:Generated_Source\PSoC4/CyLib.c **** 
1177:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK & intrRegMaskStore))
1178:Generated_Source\PSoC4/CyLib.c ****                 {
1179:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= CY_SYS_BLESS_BLERD_ACTIVE_INTR_MASK;
1180:Generated_Source\PSoC4/CyLib.c ****                 }
1181:Generated_Source\PSoC4/CyLib.c ****                 
1182:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1183:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_NRST_SET;
1184:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_DIG_CLK_SET;
1185:Generated_Source\PSoC4/CyLib.c ****                 
1186:Generated_Source\PSoC4/CyLib.c ****                 #if (CY_SYS_BLE_CLK_ECO_FREQ_32MHZ == CYDEV_ECO_CLK_MHZ)
1187:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_DIV_SET;
1188:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | CY_SYS_RCB_RBUS_
1189:Generated_Source\PSoC4/CyLib.c ****                 #else
1190:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_RCB_TX_FIFO_WR_REG = CY_SYS_RCB_RBUS_FREQ_XTAL_NODIV_SET;
1191:Generated_Source\PSoC4/CyLib.c ****                 #endif
1192:Generated_Source\PSoC4/CyLib.c ****                 
1193:Generated_Source\PSoC4/CyLib.c ****                 intrRegMaskStore = CY_SYS_BLESS_INTR_MASK_REG;
1194:Generated_Source\PSoC4/CyLib.c ****                 if(0u != (CY_SYS_RCB_INTR_RCB_DONE & intrRegMaskStore))
1195:Generated_Source\PSoC4/CyLib.c ****                 {
1196:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG &= ~(CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_
1197:Generated_Source\PSoC4/CyLib.c ****                 }
1198:Generated_Source\PSoC4/CyLib.c ****                 
1199:Generated_Source\PSoC4/CyLib.c ****                 /* Send read commands to RBUS */
1200:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RD_CMD | 
1201:Generated_Source\PSoC4/CyLib.c ****                                             (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET & ~CY_SYS_RCB_RBUS_VAL
1202:Generated_Source\PSoC4/CyLib.c ****                                             
1203:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY & CY_SYS_RCB_INTR_REG))
1204:Generated_Source\PSoC4/CyLib.c ****                 {
1205:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RX_FIFO_NOT_EMPTY state */
1206:Generated_Source\PSoC4/CyLib.c ****                 }
1207:Generated_Source\PSoC4/CyLib.c **** 
1208:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG |= CY_SYS_RCB_INTR_RCB_DONE;
1209:Generated_Source\PSoC4/CyLib.c ****                 
1210:Generated_Source\PSoC4/CyLib.c ****                 regConfig = CY_SYS_RCB_RX_FIFO_RD_REG & CY_SYS_RCB_RBUS_TRIM_MASK;
1211:Generated_Source\PSoC4/CyLib.c ****                 
ARM GAS  e:\temp\cc2tFLyS.s 			page 28


1212:Generated_Source\PSoC4/CyLib.c ****                 /* Send write commands to RBUS */
1213:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_TX_FIFO_WR_REG = (CY_SYS_RCB_RBUS_RF_DCXO_CFG_SET | regConfig | CY_SYS_R
1214:Generated_Source\PSoC4/CyLib.c ****                 
1215:Generated_Source\PSoC4/CyLib.c ****                 while (0u == (CY_SYS_RCB_INTR_RCB_DONE & CY_SYS_RCB_INTR_REG))
1216:Generated_Source\PSoC4/CyLib.c ****                 {
1217:Generated_Source\PSoC4/CyLib.c ****                     /* Wait until RCB_DONE state */
1218:Generated_Source\PSoC4/CyLib.c ****                 }
1219:Generated_Source\PSoC4/CyLib.c ****                 
1220:Generated_Source\PSoC4/CyLib.c ****                 /* Clear Interrupt */
1221:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_RCB_INTR_REG = CY_SYS_RCB_INTR_CLEAR;
1222:Generated_Source\PSoC4/CyLib.c ****                 
1223:Generated_Source\PSoC4/CyLib.c ****                 if(0u != ((CY_SYS_RCB_INTR_RCB_DONE | CY_SYS_RCB_INTR_RCB_RX_FIFO_NOT_EMPTY) & intr
1224:Generated_Source\PSoC4/CyLib.c ****                 {
1225:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_BLESS_INTR_MASK_REG |= intrRegMaskStore;
1226:Generated_Source\PSoC4/CyLib.c ****                 }
1227:Generated_Source\PSoC4/CyLib.c ****                 
1228:Generated_Source\PSoC4/CyLib.c ****             }
1229:Generated_Source\PSoC4/CyLib.c ****         #else /* CY_IP_ECO_SRSSV2 || CY_IP_ECO_SRSSLT */
1230:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_ENABLE;
1231:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_ECO_CONFIG_CLK_EN_TIMEOUT_US);
1232:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_CLK_EN;
1233:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_ECO_BLESS) */
1234:Generated_Source\PSoC4/CyLib.c **** 
1235:Generated_Source\PSoC4/CyLib.c ****         if(timeoutUs > 0u)
1236:Generated_Source\PSoC4/CyLib.c ****         {
1237:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_TIMEOUT;
1238:Generated_Source\PSoC4/CyLib.c **** 
1239:Generated_Source\PSoC4/CyLib.c ****             for( ; timeoutUs > 0u; timeoutUs--)
1240:Generated_Source\PSoC4/CyLib.c ****             {
1241:Generated_Source\PSoC4/CyLib.c ****                 CyDelayUs(1u);
1242:Generated_Source\PSoC4/CyLib.c **** 
1243:Generated_Source\PSoC4/CyLib.c ****                 if(0u != CySysClkEcoReadStatus())
1244:Generated_Source\PSoC4/CyLib.c ****                 {
1245:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_SUCCESS;
1246:Generated_Source\PSoC4/CyLib.c ****                     break;
1247:Generated_Source\PSoC4/CyLib.c ****                 }
1248:Generated_Source\PSoC4/CyLib.c ****             }
1249:Generated_Source\PSoC4/CyLib.c **** 
1250:Generated_Source\PSoC4/CyLib.c ****         }
1251:Generated_Source\PSoC4/CyLib.c **** 
1252:Generated_Source\PSoC4/CyLib.c ****         return(returnStatus);
1253:Generated_Source\PSoC4/CyLib.c ****     }
1254:Generated_Source\PSoC4/CyLib.c **** 
1255:Generated_Source\PSoC4/CyLib.c **** 
1256:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1257:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoStop
1258:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1259:Generated_Source\PSoC4/CyLib.c ****     *
1260:Generated_Source\PSoC4/CyLib.c ****     * Stops the megahertz crystal.
1261:Generated_Source\PSoC4/CyLib.c ****     *
1262:Generated_Source\PSoC4/CyLib.c ****     * If ECO is disabled when it is sourcing HFCLK, the CPU will halt. In addition,
1263:Generated_Source\PSoC4/CyLib.c ****     * for PSoC 4100 BLE / PSoC 4200 BLE devices, the BLE sub-system will stop
1264:Generated_Source\PSoC4/CyLib.c ****     * functioning.
1265:Generated_Source\PSoC4/CyLib.c ****     *
1266:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1267:Generated_Source\PSoC4/CyLib.c ****     void CySysClkEcoStop(void)
1268:Generated_Source\PSoC4/CyLib.c ****     {
ARM GAS  e:\temp\cc2tFLyS.s 			page 29


1269:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1270:Generated_Source\PSoC4/CyLib.c ****             /* Disable the RF oscillator band gap */
1271:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLESS_RF_CONFIG_REG &= (uint32) ~CY_SYS_XTAL_BLESS_RF_CONFIG_RF_ENABLE;
1272:Generated_Source\PSoC4/CyLib.c **** 
1273:Generated_Source\PSoC4/CyLib.c ****             /* Disable the Crystal */
1274:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_XTAL_BLERD_DBUS_REG &= (uint32) ~CY_SYS_XTAL_BLERD_DBUS_XTAL_ENABLE;
1275:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1276:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_BLESS_MT_CFG_REG &= ~(CY_SYS_BLESS_MT_CFG_DPSLP_ECO_ON  <<  CYFLD_BLE_BLESS_DPSL
1277:Generated_Source\PSoC4/CyLib.c ****         #else
1278:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~(CY_SYS_CLK_ECO_CONFIG_ENABLE | CY_SYS_CLK_ECO_C
1279:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1280:Generated_Source\PSoC4/CyLib.c ****     }
1281:Generated_Source\PSoC4/CyLib.c **** 
1282:Generated_Source\PSoC4/CyLib.c **** 
1283:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1284:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkEcoReadStatus
1285:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1286:Generated_Source\PSoC4/CyLib.c ****     *
1287:Generated_Source\PSoC4/CyLib.c ****     * Reads the status bit for the megahertz crystal.
1288:Generated_Source\PSoC4/CyLib.c ****     *
1289:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4100 BLE / PSoC 4200 BLE devices, the status bit is the
1290:Generated_Source\PSoC4/CyLib.c ****     * XO_AMP_DETECT bit in FSM register.
1291:Generated_Source\PSoC4/CyLib.c ****     *
1292:Generated_Source\PSoC4/CyLib.c ****     * For PSoC 4200L / 4100S with ECO devices, the error status bit is the 
1293:Generated_Source\PSoC4/CyLib.c ****     * WATCHDOG_ERROR bit in ECO_STATUS register.
1294:Generated_Source\PSoC4/CyLib.c ****     *
1295:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4100 BLE/PSoC 4200 BLE: Non-zero indicates that ECO output
1296:Generated_Source\PSoC4/CyLib.c ****     * reached 50 ppm and is oscillating in valid range.
1297:Generated_Source\PSoC4/CyLib.c ****     *
1298:Generated_Source\PSoC4/CyLib.c ****     * \return PSoC 4200L / 4100S with ECO: Non-zero indicates that ECO is running.
1299:Generated_Source\PSoC4/CyLib.c ****     *
1300:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1301:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkEcoReadStatus(void)
1302:Generated_Source\PSoC4/CyLib.c ****     {
1303:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1304:Generated_Source\PSoC4/CyLib.c **** 
1305:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_WCO_BLESS)
1306:Generated_Source\PSoC4/CyLib.c ****             returnValue = CY_SYS_XTAL_BLERD_FSM_REG & CY_SYS_XTAL_BLERD_FSM_XO_AMP_DETECT;
1307:Generated_Source\PSoC4/CyLib.c ****         #elif (CY_IP_ECO_BLESSV3)
1308:Generated_Source\PSoC4/CyLib.c ****             returnValue = (CY_SYS_BLESS_MT_STATUS_REG & CY_SYS_BLESS_MT_STATUS_CURR_STATE_MASK) >> 
1309:Generated_Source\PSoC4/CyLib.c **** 
1310:Generated_Source\PSoC4/CyLib.c ****             returnValue =  ((CY_SYS_BLESS_MT_STATUS_BLERD_IDLE == returnValue) || 
1311:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_SWITCH_EN  == returnValue) ||
1312:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ACTIVE  ==  returnValue) ||
1313:Generated_Source\PSoC4/CyLib.c ****                             (CY_SYS_BLESS_MT_STATUS_ISOLATE == returnValue));
1314:Generated_Source\PSoC4/CyLib.c ****         #else
1315:Generated_Source\PSoC4/CyLib.c ****             returnValue = (0u != (CY_SYS_CLK_ECO_STATUS_REG & CY_SYS_CLK_ECO_STATUS_WATCHDOG_ERROR)
1316:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_WCO_BLESS) */
1317:Generated_Source\PSoC4/CyLib.c **** 
1318:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1319:Generated_Source\PSoC4/CyLib.c ****     }
1320:Generated_Source\PSoC4/CyLib.c **** 
1321:Generated_Source\PSoC4/CyLib.c ****     #if (CY_IP_ECO_BLESS || CY_IP_ECO_BLESSV3)
1322:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1323:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkWriteEcoDiv
1324:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1325:Generated_Source\PSoC4/CyLib.c ****         *
ARM GAS  e:\temp\cc2tFLyS.s 			page 30


1326:Generated_Source\PSoC4/CyLib.c ****         * Selects value for the ECO divider.
1327:Generated_Source\PSoC4/CyLib.c ****         *
1328:Generated_Source\PSoC4/CyLib.c ****         * The ECO must not be the HFCLK clock source when this function is called.
1329:Generated_Source\PSoC4/CyLib.c ****         * The HFCLK source can be changed to the other clock source by call to the
1330:Generated_Source\PSoC4/CyLib.c ****         * CySysClkWriteHfclkDirect() function. If the ECO sources the HFCLK this
1331:Generated_Source\PSoC4/CyLib.c ****         * function will not have any effect if compiler in release mode, and halt the
1332:Generated_Source\PSoC4/CyLib.c ****         * CPU when compiler in debug mode.
1333:Generated_Source\PSoC4/CyLib.c ****         *
1334:Generated_Source\PSoC4/CyLib.c ****         * If the SYSCLK clock frequency increases during the device operation, call
1335:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() with the appropriate parameter to adjust the number
1336:Generated_Source\PSoC4/CyLib.c ****         * of clock cycles the cache will wait before sampling data comes back from
1337:Generated_Source\PSoC4/CyLib.c ****         * Flash. If the SYSCLK clock frequency decreases, you can call
1338:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() to improve the CPU performance. See
1339:Generated_Source\PSoC4/CyLib.c ****         * CySysFlashSetWaitCycles() description for more information.
1340:Generated_Source\PSoC4/CyLib.c ****         *
1341:Generated_Source\PSoC4/CyLib.c ****         * \param divider Power of 2 divider selection.
1342:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV1
1343:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV2
1344:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV4
1345:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_DIV8
1346:Generated_Source\PSoC4/CyLib.c ****         *
1347:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1348:Generated_Source\PSoC4/CyLib.c ****         void CySysClkWriteEcoDiv(uint32 divider)
1349:Generated_Source\PSoC4/CyLib.c ****         {
1350:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
1351:Generated_Source\PSoC4/CyLib.c **** 
1352:Generated_Source\PSoC4/CyLib.c ****             if (CY_SYS_CLK_HFCLK_ECO != (CY_SYS_CLK_SELECT_REG & CY_SYS_CLK_SELECT_DIRECT_SEL_MASK)
1353:Generated_Source\PSoC4/CyLib.c ****             {
1354:Generated_Source\PSoC4/CyLib.c ****                 interruptState = CyEnterCriticalSection();
1355:Generated_Source\PSoC4/CyLib.c **** 
1356:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG =  (divider & CY_SYS_CLK_XTAL_CLK_DIV_MASK) |
1357:Generated_Source\PSoC4/CyLib.c ****                                                       (CY_SYS_CLK_XTAL_CLK_DIV_CONFIG_REG & ((uint3
1358:Generated_Source\PSoC4/CyLib.c **** 
1359:Generated_Source\PSoC4/CyLib.c ****                 CyExitCriticalSection(interruptState);
1360:Generated_Source\PSoC4/CyLib.c ****             }
1361:Generated_Source\PSoC4/CyLib.c ****             else
1362:Generated_Source\PSoC4/CyLib.c ****             {
1363:Generated_Source\PSoC4/CyLib.c ****                 /* Halt CPU in debug mode if ECO sources HFCLK */
1364:Generated_Source\PSoC4/CyLib.c ****                 CYASSERT(0u != 0u);
1365:Generated_Source\PSoC4/CyLib.c ****             }
1366:Generated_Source\PSoC4/CyLib.c ****         }
1367:Generated_Source\PSoC4/CyLib.c **** 
1368:Generated_Source\PSoC4/CyLib.c ****     #else
1369:Generated_Source\PSoC4/CyLib.c **** 
1370:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1371:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoTrim
1372:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1373:Generated_Source\PSoC4/CyLib.c ****         *
1374:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO. This API is available only for PSoC
1375:Generated_Source\PSoC4/CyLib.c ****         * 4200L / 4100S with ECO devices only.
1376:Generated_Source\PSoC4/CyLib.c ****         *
1377:Generated_Source\PSoC4/CyLib.c ****         * The following parameters can be trimmed for ECO. The affected registers are
1378:Generated_Source\PSoC4/CyLib.c ****         * ECO_TRIM0 and ECO_TRIM1.
1379:Generated_Source\PSoC4/CyLib.c ****         *
1380:Generated_Source\PSoC4/CyLib.c ****         * Watchdog trim - This bit field sets the error threshold below the steady
1381:Generated_Source\PSoC4/CyLib.c ****         * state amplitude level.
1382:Generated_Source\PSoC4/CyLib.c ****         *
ARM GAS  e:\temp\cc2tFLyS.s 			page 31


1383:Generated_Source\PSoC4/CyLib.c ****         * Amplitude trim - This bit field is to set the crystal drive level when
1384:Generated_Source\PSoC4/CyLib.c ****         * ECO_CONFIG.AGC_EN = 1. WARNING: use care when setting this field because
1385:Generated_Source\PSoC4/CyLib.c ****         * driving a crystal beyond its rated limit can permanently damage the crystal.
1386:Generated_Source\PSoC4/CyLib.c ****         *
1387:Generated_Source\PSoC4/CyLib.c ****         * Filter frequency trim - This bit field sets LPF frequency trim and affects
1388:Generated_Source\PSoC4/CyLib.c ****         * the 3rd harmonic content.
1389:Generated_Source\PSoC4/CyLib.c ****         *
1390:Generated_Source\PSoC4/CyLib.c ****         * Feedback resistor trim - This bit field sets the feedback resistor trim and
1391:Generated_Source\PSoC4/CyLib.c ****         * impacts the oscillation amplitude.
1392:Generated_Source\PSoC4/CyLib.c ****         *
1393:Generated_Source\PSoC4/CyLib.c ****         * Amplifier gain trim - This bit field sets the amplifier gain trim and affects
1394:Generated_Source\PSoC4/CyLib.c ****         * the startup time of the crystal.
1395:Generated_Source\PSoC4/CyLib.c ****         *
1396:Generated_Source\PSoC4/CyLib.c ****         * Use care when setting the amplitude trim field because driving a crystal
1397:Generated_Source\PSoC4/CyLib.c ****         * beyond its rated limit can permanently damage the crystal.
1398:Generated_Source\PSoC4/CyLib.c ****         *
1399:Generated_Source\PSoC4/CyLib.c ****         * \param wDTrim: Watchdog trim
1400:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM0      Error threshold is 0.05 V
1401:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM1      Error threshold is 0.10 V
1402:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM2      Error threshold is 0.15 V
1403:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_WDTRIM3      Error threshold is 0.20 V
1404:Generated_Source\PSoC4/CyLib.c ****         *
1405:Generated_Source\PSoC4/CyLib.c ****         * \param aTrim: Amplitude trim
1406:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM0       Amplitude is 0.3 Vpp
1407:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM1       Amplitude is 0.4 Vpp
1408:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM2       Amplitude is 0.5 Vpp
1409:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM3       Amplitude is 0.6 Vpp
1410:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM4       Amplitude is 0.7 Vpp
1411:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM5       Amplitude is 0.8 Vpp
1412:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM6       Amplitude is 0.9 Vpp
1413:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_ATRIM7       Amplitude is 1.0 Vpp
1414:Generated_Source\PSoC4/CyLib.c ****         *
1415:Generated_Source\PSoC4/CyLib.c ****         * \param fTrim: Filter frequency trim
1416:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM0       Crystal frequency > 30 MHz
1417:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM1       24 MHz < Crystal frequency <= 30 MHz
1418:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM2       17 MHz < Crystal frequency <= 24 MHz
1419:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_FTRIM3       Crystal frequency <= 17 MHz
1420:Generated_Source\PSoC4/CyLib.c ****         *
1421:Generated_Source\PSoC4/CyLib.c ****         * \param rTrim: Feedback resistor trim
1422:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM0       Crystal frequency > 30 MHz
1423:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM1       24 MHz < Crystal frequency <= 30 MHz
1424:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM2       17 MHz < Crystal frequency <= 24 MHz
1425:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_RTRIM3       Crystal frequency <= 17 MHz
1426:Generated_Source\PSoC4/CyLib.c ****         *
1427:Generated_Source\PSoC4/CyLib.c ****         * \param gTrim: Amplifier gain trim. Calculate the minimum required gm
1428:Generated_Source\PSoC4/CyLib.c ****         * (trans-conductance value). Divide the calculated gm value by 4.5 to
1429:Generated_Source\PSoC4/CyLib.c ****         * obtain an integer value 'result'. For more information please refer
1430:Generated_Source\PSoC4/CyLib.c ****         * to the device TRM.
1431:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM0       If result = 1
1432:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM1       If result = 0
1433:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 2
1434:Generated_Source\PSoC4/CyLib.c ****         * - \ref CY_SYS_CLK_ECO_GTRIM2       If result = 3
1435:Generated_Source\PSoC4/CyLib.c ****         *
1436:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1437:Generated_Source\PSoC4/CyLib.c ****         void CySysClkConfigureEcoTrim(uint32 wDTrim, uint32 aTrim, uint32 fTrim, uint32 rTrim, uint
1438:Generated_Source\PSoC4/CyLib.c ****         {
1439:Generated_Source\PSoC4/CyLib.c ****             uint8  interruptState;
ARM GAS  e:\temp\cc2tFLyS.s 			page 32


1440:Generated_Source\PSoC4/CyLib.c ****             uint32 regTmp;
1441:Generated_Source\PSoC4/CyLib.c **** 
1442:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1443:Generated_Source\PSoC4/CyLib.c **** 
1444:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM0_REG & ~(CY_SYS_CLK_ECO_TRIM0_WDTRIM_MASK | CY_SYS_CLK_EC
1445:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (wDTrim << CY_SYS_CLK_ECO_TRIM0_WDTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM
1446:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (aTrim << CY_SYS_CLK_ECO_TRIM0_ATRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM0_
1447:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM0_REG = regTmp;
1448:Generated_Source\PSoC4/CyLib.c **** 
1449:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_ECO_TRIM1_REG & ~(CY_SYS_CLK_ECO_TRIM1_FTRIM_MASK |
1450:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_RTRIM_MASK |
1451:Generated_Source\PSoC4/CyLib.c ****                                                    CY_SYS_CLK_ECO_TRIM1_GTRIM_MASK);
1452:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (fTrim << CY_SYS_CLK_ECO_TRIM1_FTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1453:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (rTrim << CY_SYS_CLK_ECO_TRIM1_RTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1454:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((uint32) (gTrim << CY_SYS_CLK_ECO_TRIM1_GTRIM_SHIFT) & CY_SYS_CLK_ECO_TRIM1_
1455:Generated_Source\PSoC4/CyLib.c **** 
1456:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_ECO_TRIM1_REG = regTmp;
1457:Generated_Source\PSoC4/CyLib.c **** 
1458:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1459:Generated_Source\PSoC4/CyLib.c ****         }
1460:Generated_Source\PSoC4/CyLib.c **** 
1461:Generated_Source\PSoC4/CyLib.c **** 
1462:Generated_Source\PSoC4/CyLib.c ****         /*******************************************************************************
1463:Generated_Source\PSoC4/CyLib.c ****         * Function Name: CySysClkConfigureEcoDrive
1464:Generated_Source\PSoC4/CyLib.c ****         ****************************************************************************//**
1465:Generated_Source\PSoC4/CyLib.c ****         *
1466:Generated_Source\PSoC4/CyLib.c ****         * Selects trim setting values for ECO based on crystal parameters. Use care
1467:Generated_Source\PSoC4/CyLib.c ****         * when setting the driveLevel parameter because driving a crystal beyond its
1468:Generated_Source\PSoC4/CyLib.c ****         * rated limit can permanently damage the crystal.
1469:Generated_Source\PSoC4/CyLib.c ****         *
1470:Generated_Source\PSoC4/CyLib.c ****         * This API is available only for PSoC 4200L / 4100S with ECO devices only.
1471:Generated_Source\PSoC4/CyLib.c ****         *
1472:Generated_Source\PSoC4/CyLib.c ****         * \param freq Frequency of the crystal in kHz.
1473:Generated_Source\PSoC4/CyLib.c ****         * \param cLoad Crystal load capacitance in pF.
1474:Generated_Source\PSoC4/CyLib.c ****         * \param esr Equivalent series resistance of the crystal in ohm.
1475:Generated_Source\PSoC4/CyLib.c ****         *  maxAmplitude: maximum amplitude level in mV. Calculate as
1476:Generated_Source\PSoC4/CyLib.c ****         *  ((sqrt(driveLevel in uW / 2 / esr))/(3.14 * freq * cLoad)) * 10^9.
1477:Generated_Source\PSoC4/CyLib.c ****         *
1478:Generated_Source\PSoC4/CyLib.c ****         *  The Automatic Gain Control (AGC) is disabled when the specified maximum
1479:Generated_Source\PSoC4/CyLib.c ****         *  amplitude level equals or above 2. In this case the amplitude is not
1480:Generated_Source\PSoC4/CyLib.c ****         *  explicitly controlled and will grow until it saturates to the supply rail
1481:Generated_Source\PSoC4/CyLib.c ****         *  (1.8V nom). WARNING: use care when disabling AGC because driving a crystal
1482:Generated_Source\PSoC4/CyLib.c ****         *  beyond its rated limit can permanently damage the crystal.
1483:Generated_Source\PSoC4/CyLib.c ****         *
1484:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_SUCCESS ECO configuration completed successfully.
1485:Generated_Source\PSoC4/CyLib.c ****         * \return \ref CYRET_BAD_PARAM One or more invalid parameters.
1486:Generated_Source\PSoC4/CyLib.c ****         *
1487:Generated_Source\PSoC4/CyLib.c ****         *******************************************************************************/
1488:Generated_Source\PSoC4/CyLib.c ****         cystatus CySysClkConfigureEcoDrive(uint32 freq, uint32 cLoad, uint32 esr, uint32 maxAmplitu
1489:Generated_Source\PSoC4/CyLib.c ****         {
1490:Generated_Source\PSoC4/CyLib.c ****             cystatus returnStatus = CYRET_SUCCESS;
1491:Generated_Source\PSoC4/CyLib.c **** 
1492:Generated_Source\PSoC4/CyLib.c ****             uint32 wDTrim;
1493:Generated_Source\PSoC4/CyLib.c ****             uint32 aTrim;
1494:Generated_Source\PSoC4/CyLib.c ****             uint32 fTrim;
1495:Generated_Source\PSoC4/CyLib.c ****             uint32 rTrim;
1496:Generated_Source\PSoC4/CyLib.c ****             uint32 gTrim;
ARM GAS  e:\temp\cc2tFLyS.s 			page 33


1497:Generated_Source\PSoC4/CyLib.c **** 
1498:Generated_Source\PSoC4/CyLib.c ****             uint32 gmMin;
1499:Generated_Source\PSoC4/CyLib.c **** 
1500:Generated_Source\PSoC4/CyLib.c **** 
1501:Generated_Source\PSoC4/CyLib.c ****             if ((maxAmplitude < CY_SYS_CLK_ECO_MAX_AMPL_MIN_mV) ||
1502:Generated_Source\PSoC4/CyLib.c ****                 (freq < CY_SYS_CLK_ECO_FREQ_KHZ_MIN) || (freq > CY_SYS_CLK_ECO_FREQ_KHZ_MAX))
1503:Generated_Source\PSoC4/CyLib.c ****             {
1504:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_BAD_PARAM;
1505:Generated_Source\PSoC4/CyLib.c ****             }
1506:Generated_Source\PSoC4/CyLib.c ****             else
1507:Generated_Source\PSoC4/CyLib.c ****             {
1508:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplitude trim */
1509:Generated_Source\PSoC4/CyLib.c ****                 aTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/100u) - 4u) 
1510:Generated_Source\PSoC4/CyLib.c **** 
1511:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM0)
1512:Generated_Source\PSoC4/CyLib.c ****                 {
1513:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM0;
1514:Generated_Source\PSoC4/CyLib.c ****                 }
1515:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM1)
1516:Generated_Source\PSoC4/CyLib.c ****                 {
1517:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM1;
1518:Generated_Source\PSoC4/CyLib.c ****                 }
1519:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM2)
1520:Generated_Source\PSoC4/CyLib.c ****                 {
1521:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM2;
1522:Generated_Source\PSoC4/CyLib.c ****                 }
1523:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM3)
1524:Generated_Source\PSoC4/CyLib.c ****                 {
1525:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM3;
1526:Generated_Source\PSoC4/CyLib.c ****                 }
1527:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM4)
1528:Generated_Source\PSoC4/CyLib.c ****                 {
1529:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM4;
1530:Generated_Source\PSoC4/CyLib.c ****                 }
1531:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM5)
1532:Generated_Source\PSoC4/CyLib.c ****                 {
1533:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM5;
1534:Generated_Source\PSoC4/CyLib.c ****                 }
1535:Generated_Source\PSoC4/CyLib.c ****                 else if (maxAmplitude < CY_SYS_CLK_ECO_AMPL_FOR_ATRIM6)
1536:Generated_Source\PSoC4/CyLib.c ****                 {
1537:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM6;
1538:Generated_Source\PSoC4/CyLib.c ****                 }
1539:Generated_Source\PSoC4/CyLib.c ****                 else
1540:Generated_Source\PSoC4/CyLib.c ****                 {
1541:Generated_Source\PSoC4/CyLib.c ****                     aTrim = CY_SYS_CLK_ECO_ATRIM7;
1542:Generated_Source\PSoC4/CyLib.c ****                 }
1543:Generated_Source\PSoC4/CyLib.c **** 
1544:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate Watchdog trim. */
1545:Generated_Source\PSoC4/CyLib.c ****                 wDTrim = (maxAmplitude < CY_SYS_CLK_ECO_TRIM_BOUNDARY) ? ((maxAmplitude/200u) - 2u)
1546:Generated_Source\PSoC4/CyLib.c **** 
1547:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate amplifier gain trim. */
1548:Generated_Source\PSoC4/CyLib.c ****                 gmMin = (uint32) (((((CY_SYS_CLK_ECO_GMMIN_COEFFICIENT * freq * cLoad) / 1000) * ((
1549:Generated_Source\PSoC4/CyLib.c ****                 if (gmMin > 3u)
1550:Generated_Source\PSoC4/CyLib.c ****                 {
1551:Generated_Source\PSoC4/CyLib.c ****                     returnStatus = CYRET_BAD_PARAM;
1552:Generated_Source\PSoC4/CyLib.c ****                     gTrim = 0u;
1553:Generated_Source\PSoC4/CyLib.c ****                 }
ARM GAS  e:\temp\cc2tFLyS.s 			page 34


1554:Generated_Source\PSoC4/CyLib.c ****                 else if (gmMin > 1u)
1555:Generated_Source\PSoC4/CyLib.c ****                 {
1556:Generated_Source\PSoC4/CyLib.c ****                     gTrim = gmMin;
1557:Generated_Source\PSoC4/CyLib.c ****                 }
1558:Generated_Source\PSoC4/CyLib.c ****                 else
1559:Generated_Source\PSoC4/CyLib.c ****                 {
1560:Generated_Source\PSoC4/CyLib.c ****                     gTrim = (gmMin == 1u) ? 0u : 1u;
1561:Generated_Source\PSoC4/CyLib.c ****                 }
1562:Generated_Source\PSoC4/CyLib.c **** 
1563:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate feedback resistor trim */
1564:Generated_Source\PSoC4/CyLib.c ****                 if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM0)
1565:Generated_Source\PSoC4/CyLib.c ****                 {
1566:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM0;
1567:Generated_Source\PSoC4/CyLib.c ****                 }
1568:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM1)
1569:Generated_Source\PSoC4/CyLib.c ****                 {
1570:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM1;
1571:Generated_Source\PSoC4/CyLib.c ****                 }
1572:Generated_Source\PSoC4/CyLib.c ****                 else if (freq > CY_SYS_CLK_ECO_FREQ_FOR_FTRIM2)
1573:Generated_Source\PSoC4/CyLib.c ****                 {
1574:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM2;
1575:Generated_Source\PSoC4/CyLib.c ****                 }
1576:Generated_Source\PSoC4/CyLib.c ****                 else
1577:Generated_Source\PSoC4/CyLib.c ****                 {
1578:Generated_Source\PSoC4/CyLib.c ****                     rTrim = CY_SYS_CLK_ECO_FTRIM3;
1579:Generated_Source\PSoC4/CyLib.c ****                 }
1580:Generated_Source\PSoC4/CyLib.c **** 
1581:Generated_Source\PSoC4/CyLib.c ****                 /* Calculate filter frequency trim */
1582:Generated_Source\PSoC4/CyLib.c ****                 fTrim = rTrim;
1583:Generated_Source\PSoC4/CyLib.c **** 
1584:Generated_Source\PSoC4/CyLib.c ****                 CySysClkConfigureEcoTrim(wDTrim, aTrim, fTrim, rTrim, gTrim);
1585:Generated_Source\PSoC4/CyLib.c **** 
1586:Generated_Source\PSoC4/CyLib.c ****                 /* Automatic Gain Control (AGC) enable */
1587:Generated_Source\PSoC4/CyLib.c ****                 if (maxAmplitude < 2u)
1588:Generated_Source\PSoC4/CyLib.c ****                 {
1589:Generated_Source\PSoC4/CyLib.c ****                     /* The oscillation amplitude is controlled to the level selected by amplitude t
1590:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG |= CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1591:Generated_Source\PSoC4/CyLib.c ****                 }
1592:Generated_Source\PSoC4/CyLib.c ****                 else
1593:Generated_Source\PSoC4/CyLib.c ****                 {
1594:Generated_Source\PSoC4/CyLib.c ****                     /* The amplitude is not explicitly controlled and will grow until it saturates 
1595:Generated_Source\PSoC4/CyLib.c ****                     * supply rail (1.8V nom).
1596:Generated_Source\PSoC4/CyLib.c ****                     */
1597:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_CLK_ECO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_ECO_CONFIG_AGC_EN;
1598:Generated_Source\PSoC4/CyLib.c ****                 }
1599:Generated_Source\PSoC4/CyLib.c ****             }
1600:Generated_Source\PSoC4/CyLib.c **** 
1601:Generated_Source\PSoC4/CyLib.c ****             return (returnStatus);
1602:Generated_Source\PSoC4/CyLib.c ****         }
1603:Generated_Source\PSoC4/CyLib.c **** 
1604:Generated_Source\PSoC4/CyLib.c ****     #endif /* CY_IP_ECO_BLESS */
1605:Generated_Source\PSoC4/CyLib.c **** 
1606:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_ECO) */
1607:Generated_Source\PSoC4/CyLib.c **** 
1608:Generated_Source\PSoC4/CyLib.c **** 
1609:Generated_Source\PSoC4/CyLib.c **** #if (CY_IP_PLL)
1610:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
ARM GAS  e:\temp\cc2tFLyS.s 			page 35


1611:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStart
1612:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1613:Generated_Source\PSoC4/CyLib.c ****     *
1614:Generated_Source\PSoC4/CyLib.c ****     * Enables the PLL. Optionally waits for it to become stable. Waits at least
1615:Generated_Source\PSoC4/CyLib.c ****     * 250 us or until it is detected that the PLL is stable.
1616:Generated_Source\PSoC4/CyLib.c ****     *
1617:Generated_Source\PSoC4/CyLib.c ****     * Clears the unlock occurred status bit by calling CySysClkPllGetUnlockStatus(),
1618:Generated_Source\PSoC4/CyLib.c ****     * once the PLL is locked if the wait parameter is 1).
1619:Generated_Source\PSoC4/CyLib.c ****     *
1620:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S with PLL devices.
1621:Generated_Source\PSoC4/CyLib.c ****     *
1622:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1623:Generated_Source\PSoC4/CyLib.c ****     * 0   PLL#0
1624:Generated_Source\PSoC4/CyLib.c ****     * 1   PLL#1 (available only for PSoC 4200L)
1625:Generated_Source\PSoC4/CyLib.c ****     *
1626:Generated_Source\PSoC4/CyLib.c ****     * \param wait:
1627:Generated_Source\PSoC4/CyLib.c ****     * 0 - Return immediately after configuration.
1628:Generated_Source\PSoC4/CyLib.c ****     * 1 - Wait for PLL lock or timeout. This API shall use the CyDelayUs() to
1629:Generated_Source\PSoC4/CyLib.c ****     * implement the timeout feature.
1630:Generated_Source\PSoC4/CyLib.c ****     *
1631:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1632:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_TIMEOUT The timeout occurred without detecting a stable clock.
1633:Generated_Source\PSoC4/CyLib.c ****     * If the input source of the clock is jittery, then the lock indication may
1634:Generated_Source\PSoC4/CyLib.c ****     * not occur. However, after the timeout has expired, the generated PLL clock can
1635:Generated_Source\PSoC4/CyLib.c ****     * still be used.
1636:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM - Either the PLL or wait parameter is invalid.
1637:Generated_Source\PSoC4/CyLib.c ****     *
1638:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1639:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllStart(uint32 pll, uint32 wait)
1640:Generated_Source\PSoC4/CyLib.c ****     {
1641:Generated_Source\PSoC4/CyLib.c ****         uint32 counts = CY_SYS_CLK_PLL_MAX_STARTUP_US;
1642:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1643:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_SUCCESS;
1644:Generated_Source\PSoC4/CyLib.c **** 
1645:Generated_Source\PSoC4/CyLib.c ****         if((pll < CY_IP_PLL_NR) && (wait <= 1u))
1646:Generated_Source\PSoC4/CyLib.c ****         {
1647:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1648:Generated_Source\PSoC4/CyLib.c **** 
1649:Generated_Source\PSoC4/CyLib.c ****             /* Isolate PLL outputs */
1650:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1651:Generated_Source\PSoC4/CyLib.c **** 
1652:Generated_Source\PSoC4/CyLib.c ****             /* Enable PLL */
1653:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ENABLE;
1654:Generated_Source\PSoC4/CyLib.c **** 
1655:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1656:Generated_Source\PSoC4/CyLib.c **** 
1657:Generated_Source\PSoC4/CyLib.c ****             /* De-isolate >= CY_SYS_CLK_PLL_MIN_STARTUP_US after PLL enabled */
1658:Generated_Source\PSoC4/CyLib.c ****             CyDelayUs(CY_SYS_CLK_PLL_MIN_STARTUP_US);
1659:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1660:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config |= CY_SYS_CLK_PLL_CONFIG_ISOLATE;
1661:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1662:Generated_Source\PSoC4/CyLib.c **** 
1663:Generated_Source\PSoC4/CyLib.c ****             if(wait != 0u)
1664:Generated_Source\PSoC4/CyLib.c ****             {
1665:Generated_Source\PSoC4/CyLib.c ****                 returnStatus = CYRET_TIMEOUT;
1666:Generated_Source\PSoC4/CyLib.c **** 
1667:Generated_Source\PSoC4/CyLib.c ****                 while(0u != counts)
ARM GAS  e:\temp\cc2tFLyS.s 			page 36


1668:Generated_Source\PSoC4/CyLib.c ****                 {
1669:Generated_Source\PSoC4/CyLib.c **** 
1670:Generated_Source\PSoC4/CyLib.c ****                     if(0u != CySysClkPllGetLockStatus(pll))
1671:Generated_Source\PSoC4/CyLib.c ****                     {
1672:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CYRET_SUCCESS;
1673:Generated_Source\PSoC4/CyLib.c ****                         (void) CySysClkPllGetUnlockStatus(pll);
1674:Generated_Source\PSoC4/CyLib.c ****                         break;
1675:Generated_Source\PSoC4/CyLib.c ****                     }
1676:Generated_Source\PSoC4/CyLib.c **** 
1677:Generated_Source\PSoC4/CyLib.c ****                     CyDelayUs(1u);
1678:Generated_Source\PSoC4/CyLib.c ****                     counts--;
1679:Generated_Source\PSoC4/CyLib.c ****                 }
1680:Generated_Source\PSoC4/CyLib.c ****             }
1681:Generated_Source\PSoC4/CyLib.c ****         }
1682:Generated_Source\PSoC4/CyLib.c ****         else
1683:Generated_Source\PSoC4/CyLib.c ****         {
1684:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_BAD_PARAM;
1685:Generated_Source\PSoC4/CyLib.c ****         }
1686:Generated_Source\PSoC4/CyLib.c **** 
1687:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1688:Generated_Source\PSoC4/CyLib.c ****     }
1689:Generated_Source\PSoC4/CyLib.c **** 
1690:Generated_Source\PSoC4/CyLib.c **** 
1691:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1692:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetLockStatus
1693:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1694:Generated_Source\PSoC4/CyLib.c ****     *
1695:Generated_Source\PSoC4/CyLib.c ****     * Returns non-zero if the output of the specified PLL output is locked.
1696:Generated_Source\PSoC4/CyLib.c ****     *
1697:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S with PLL devices.
1698:Generated_Source\PSoC4/CyLib.c ****     *
1699:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1700:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1701:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1702:Generated_Source\PSoC4/CyLib.c ****     *
1703:Generated_Source\PSoC4/CyLib.c ****     * \return A non-zero value when the specified PLL is locked.
1704:Generated_Source\PSoC4/CyLib.c ****     *
1705:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1706:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetLockStatus(uint32 pll)
1707:Generated_Source\PSoC4/CyLib.c ****     {
1708:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1709:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus;
1710:Generated_Source\PSoC4/CyLib.c **** 
1711:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1712:Generated_Source\PSoC4/CyLib.c **** 
1713:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1714:Generated_Source\PSoC4/CyLib.c **** 
1715:Generated_Source\PSoC4/CyLib.c ****         /* PLL is locked if reported so for two consecutive read. */
1716:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1717:Generated_Source\PSoC4/CyLib.c ****         if(0u != returnStatus)
1718:Generated_Source\PSoC4/CyLib.c ****         {
1719:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].status & CY_SYS_CLK_PLL_STATUS_LOCKED;
1720:Generated_Source\PSoC4/CyLib.c ****         }
1721:Generated_Source\PSoC4/CyLib.c **** 
1722:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1723:Generated_Source\PSoC4/CyLib.c **** 
1724:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
ARM GAS  e:\temp\cc2tFLyS.s 			page 37


1725:Generated_Source\PSoC4/CyLib.c ****     }
1726:Generated_Source\PSoC4/CyLib.c **** 
1727:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1728:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllStop
1729:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1730:Generated_Source\PSoC4/CyLib.c ****     *
1731:Generated_Source\PSoC4/CyLib.c ****     * Disables the PLL.
1732:Generated_Source\PSoC4/CyLib.c ****     *
1733:Generated_Source\PSoC4/CyLib.c ****     * Ensures that either PLL is not the source of HFCLK before it is disabled,
1734:Generated_Source\PSoC4/CyLib.c ****     * otherwise, the CPU will halt.
1735:Generated_Source\PSoC4/CyLib.c ****     *
1736:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S with PLL devices.
1737:Generated_Source\PSoC4/CyLib.c ****     *
1738:Generated_Source\PSoC4/CyLib.c ****     * PLL:
1739:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1740:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1741:Generated_Source\PSoC4/CyLib.c ****     *
1742:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1743:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllStop(uint32 pll)
1744:Generated_Source\PSoC4/CyLib.c ****     {
1745:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1746:Generated_Source\PSoC4/CyLib.c **** 
1747:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
1748:Generated_Source\PSoC4/CyLib.c ****         {
1749:Generated_Source\PSoC4/CyLib.c ****             interruptState = CyEnterCriticalSection();
1750:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config &= (uint32) ~(CY_SYS_CLK_PLL_CONFIG_ISOLATE | CY_SY
1751:Generated_Source\PSoC4/CyLib.c ****             CyExitCriticalSection(interruptState);
1752:Generated_Source\PSoC4/CyLib.c ****         }
1753:Generated_Source\PSoC4/CyLib.c ****     }
1754:Generated_Source\PSoC4/CyLib.c **** 
1755:Generated_Source\PSoC4/CyLib.c **** 
1756:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1757:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetPQ
1758:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1759:Generated_Source\PSoC4/CyLib.c ****     *
1760:Generated_Source\PSoC4/CyLib.c ****     * Sets feedback (P) and reference the (Q) divider value. This API also sets the
1761:Generated_Source\PSoC4/CyLib.c ****     * programmable charge pump current value. Note that the PLL has to be disabled
1762:Generated_Source\PSoC4/CyLib.c ****     * before calling this API. If this function is called while any PLL is sourcing,
1763:Generated_Source\PSoC4/CyLib.c ****     * the SYSCLK will return an error.
1764:Generated_Source\PSoC4/CyLib.c ****     *
1765:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1766:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1767:Generated_Source\PSoC4/CyLib.c ****     *
1768:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S with PLL devices.
1769:Generated_Source\PSoC4/CyLib.c ****     *
1770:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1771:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1772:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1773:Generated_Source\PSoC4/CyLib.c ****     *
1774:Generated_Source\PSoC4/CyLib.c ****     * \param feedback The P divider. Range 4 - 259. Control bits for the feedback
1775:Generated_Source\PSoC4/CyLib.c ****     * divider.
1776:Generated_Source\PSoC4/CyLib.c ****     *
1777:Generated_Source\PSoC4/CyLib.c ****     * \param reference The Q divider. Range 1 - 64. Divide by the reference.
1778:Generated_Source\PSoC4/CyLib.c ****     *
1779:Generated_Source\PSoC4/CyLib.c ****     * \param current Charge the pump current in uA. The 2 uA for output frequencies
1780:Generated_Source\PSoC4/CyLib.c ****     * of 67 MHz or less, and 3 uA for higher output frequencies. The default
1781:Generated_Source\PSoC4/CyLib.c ****     * value is 2 uA.
ARM GAS  e:\temp\cc2tFLyS.s 			page 38


1782:Generated_Source\PSoC4/CyLib.c ****     *
1783:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS Completed successfully.
1784:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The parameters are out of range or the specified PLL
1785:Generated_Source\PSoC4/CyLib.c ****     * sources the system clock.
1786:Generated_Source\PSoC4/CyLib.c ****     *
1787:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1788:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetPQ(uint32 pll, uint32 feedback, uint32 reference, uint32 current)
1789:Generated_Source\PSoC4/CyLib.c ****     {
1790:Generated_Source\PSoC4/CyLib.c ****         uint32   regTmp;
1791:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
1792:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
1793:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
1794:Generated_Source\PSoC4/CyLib.c **** 
1795:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1796:Generated_Source\PSoC4/CyLib.c **** 
1797:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
1798:Generated_Source\PSoC4/CyLib.c **** 
1799:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
1800:Generated_Source\PSoC4/CyLib.c ****             (feedback  >= CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_MIN)  && (feedback  <= CY_SYS_CLK_PLL_
1801:Generated_Source\PSoC4/CyLib.c ****             (reference >= CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_MIN) && (reference <= CY_SYS_CLK_PLL_
1802:Generated_Source\PSoC4/CyLib.c ****             (current   >= CY_SYS_CLK_PLL_CONFIG_ICP_SEL_MIN )      && (current   <= CY_SYS_CLK_PLL_
1803:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
1804:Generated_Source\PSoC4/CyLib.c ****         {
1805:Generated_Source\PSoC4/CyLib.c ****             /* Set new feedback, reference and current values */
1806:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_FEEDBA
1807:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_REFERE
1808:Generated_Source\PSoC4/CyLib.c ****                                                                        CY_SYS_CLK_PLL_CONFIG_ICP_SE
1809:Generated_Source\PSoC4/CyLib.c **** 
1810:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((feedback << CY_SYS_CLK_PLL_CONFIG_FEEDBACK_DIV_SHIFT) & CY_SYS_CLK_PLL_CONF
1811:Generated_Source\PSoC4/CyLib.c ****             regTmp |= (((reference - 1u) << CY_SYS_CLK_PLL_CONFIG_REFERENCE_DIV_SHIFT) & CY_SYS_CLK
1812:Generated_Source\PSoC4/CyLib.c ****             regTmp |= ((current << CY_SYS_CLK_PLL_CONFIG_ICP_SEL_SHIFT) & CY_SYS_CLK_PLL_CONFIG_ICP
1813:Generated_Source\PSoC4/CyLib.c **** 
1814:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1815:Generated_Source\PSoC4/CyLib.c **** 
1816:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
1817:Generated_Source\PSoC4/CyLib.c ****         }
1818:Generated_Source\PSoC4/CyLib.c **** 
1819:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1820:Generated_Source\PSoC4/CyLib.c **** 
1821:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1822:Generated_Source\PSoC4/CyLib.c ****     }
1823:Generated_Source\PSoC4/CyLib.c **** 
1824:Generated_Source\PSoC4/CyLib.c **** 
1825:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1826:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetBypassMode
1827:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1828:Generated_Source\PSoC4/CyLib.c ****     *
1829:Generated_Source\PSoC4/CyLib.c ****     * Sets the bypass mode for the specified PLL.
1830:Generated_Source\PSoC4/CyLib.c ****     *
1831:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function.
1832:Generated_Source\PSoC4/CyLib.c ****     * The PLL output will glitch during this function call.
1833:Generated_Source\PSoC4/CyLib.c ****     *
1834:Generated_Source\PSoC4/CyLib.c ****     * When the PLL's reference input is higher than HFCLK frequency the device may 
1835:Generated_Source\PSoC4/CyLib.c ****     * lock due to incorrect flash wait cycle configuration and bypass switches from 
1836:Generated_Source\PSoC4/CyLib.c ****     * PLL output to the reference input. See description of 
1837:Generated_Source\PSoC4/CyLib.c ****     * CySysFlashSetWaitCycles() for more information.
1838:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  e:\temp\cc2tFLyS.s 			page 39


1839:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S with PLL devices.
1840:Generated_Source\PSoC4/CyLib.c ****     *
1841:Generated_Source\PSoC4/CyLib.c ****     * \param PLL:
1842:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1843:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1844:Generated_Source\PSoC4/CyLib.c ****     *
1845:Generated_Source\PSoC4/CyLib.c ****     * \param bypass: The bypass mode.
1846:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_AUTO - Automatic usage of the lock indicator. When unlocked,
1847:Generated_Source\PSoC4/CyLib.c ****     * automatically selects PLL the reference input (bypass mode). When locked,
1848:Generated_Source\PSoC4/CyLib.c ****     * automatically selects the PLL output.
1849:Generated_Source\PSoC4/CyLib.c ****     *
1850:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_REF - Selects the PLL reference input (bypass mode).
1851:Generated_Source\PSoC4/CyLib.c ****     * Ignores the lock indicator.
1852:Generated_Source\PSoC4/CyLib.c ****     *
1853:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_BYPASS_PLL_OUT - Selects the PLL output.  Ignores the lock indicator.
1854:Generated_Source\PSoC4/CyLib.c ****     *
1855:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1856:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetBypassMode(uint32 pll, uint32 bypass)
1857:Generated_Source\PSoC4/CyLib.c ****     {
1858:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
1859:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1860:Generated_Source\PSoC4/CyLib.c **** 
1861:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1862:Generated_Source\PSoC4/CyLib.c **** 
1863:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (bypass <= CY_SYS_PLL_BYPASS_PLL_OUT))
1864:Generated_Source\PSoC4/CyLib.c ****         {
1865:Generated_Source\PSoC4/CyLib.c ****             regTmp  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~CY_SYS_CLK_PLL_CONFIG_BYPASS_
1866:Generated_Source\PSoC4/CyLib.c ****             regTmp |=  (uint32)(bypass << CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT);
1867:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = regTmp;
1868:Generated_Source\PSoC4/CyLib.c ****         }
1869:Generated_Source\PSoC4/CyLib.c **** 
1870:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1871:Generated_Source\PSoC4/CyLib.c ****     }
1872:Generated_Source\PSoC4/CyLib.c **** 
1873:Generated_Source\PSoC4/CyLib.c **** 
1874:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1875:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetBypassMode
1876:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1877:Generated_Source\PSoC4/CyLib.c ****     *
1878:Generated_Source\PSoC4/CyLib.c ****     *  Gets the bypass mode for the specified PLL.
1879:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S with PLL devices.
1880:Generated_Source\PSoC4/CyLib.c ****     *
1881:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1882:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1883:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1 (available only for PSoC 4200L)
1884:Generated_Source\PSoC4/CyLib.c ****     *
1885:Generated_Source\PSoC4/CyLib.c ****     *  \param bypass: Bypass mode.
1886:Generated_Source\PSoC4/CyLib.c ****     *   The same as the parameter of the CySysClkPllSetBypassMode().
1887:Generated_Source\PSoC4/CyLib.c ****     *
1888:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1889:Generated_Source\PSoC4/CyLib.c ****     static uint32 CySysClkPllGetBypassMode(uint32 pll)
1890:Generated_Source\PSoC4/CyLib.c ****     {
1891:Generated_Source\PSoC4/CyLib.c ****         uint32 returnValue;
1892:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1893:Generated_Source\PSoC4/CyLib.c **** 
1894:Generated_Source\PSoC4/CyLib.c ****         CYASSERT(pll < CY_IP_PLL_NR);
1895:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  e:\temp\cc2tFLyS.s 			page 40


1896:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1897:Generated_Source\PSoC4/CyLib.c **** 
1898:Generated_Source\PSoC4/CyLib.c ****         returnValue = CY_SYS_CLK_PLL_BASE.pll[pll].config & CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_MASK;
1899:Generated_Source\PSoC4/CyLib.c ****         returnValue =  returnValue >> CY_SYS_CLK_PLL_CONFIG_BYPASS_SEL_SHIFT;
1900:Generated_Source\PSoC4/CyLib.c **** 
1901:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1902:Generated_Source\PSoC4/CyLib.c **** 
1903:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1904:Generated_Source\PSoC4/CyLib.c ****     }
1905:Generated_Source\PSoC4/CyLib.c **** 
1906:Generated_Source\PSoC4/CyLib.c **** 
1907:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1908:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllConfigChangeAllowed
1909:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1910:Generated_Source\PSoC4/CyLib.c ****     *
1911:Generated_Source\PSoC4/CyLib.c ****     *  The function returns non-zero value if the specified PLL sources the System
1912:Generated_Source\PSoC4/CyLib.c ****     *  clock and the PLL is not in the bypass mode.
1913:Generated_Source\PSoC4/CyLib.c ****     *
1914:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S with PLL devices.
1915:Generated_Source\PSoC4/CyLib.c ****     *
1916:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1917:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1918:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1 (available only for PSoC 4200L)
1919:Generated_Source\PSoC4/CyLib.c ****     *
1920:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL sources the System clock and
1921:Generated_Source\PSoC4/CyLib.c ****     * the PLL is not in the bypass mode.
1922:Generated_Source\PSoC4/CyLib.c ****     *
1923:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1924:Generated_Source\PSoC4/CyLib.c ****     static cystatus CySysClkPllConfigChangeAllowed(uint32 pll)
1925:Generated_Source\PSoC4/CyLib.c ****     {
1926:Generated_Source\PSoC4/CyLib.c ****         uint32   pllBypassMode;
1927:Generated_Source\PSoC4/CyLib.c ****         uint32   sysclkSource;
1928:Generated_Source\PSoC4/CyLib.c ****         cystatus returnValue = CYRET_INVALID_STATE;
1929:Generated_Source\PSoC4/CyLib.c **** 
1930:Generated_Source\PSoC4/CyLib.c ****         sysclkSource  = CySysClkGetSysclkSource();
1931:Generated_Source\PSoC4/CyLib.c ****         pllBypassMode = CySysClkPllGetBypassMode(pll);
1932:Generated_Source\PSoC4/CyLib.c **** 
1933:Generated_Source\PSoC4/CyLib.c ****         if ((CY_SYS_PLL_BYPASS_PLL_REF == pllBypassMode)             ||
1934:Generated_Source\PSoC4/CyLib.c ****             ((CY_SYS_CLK_HFCLK_PLL0 != sysclkSource) && (0u == pll))
1935:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_SRSSV2)
1936:Generated_Source\PSoC4/CyLib.c ****             || ((CY_SYS_CLK_HFCLK_PLL1 != sysclkSource) && (1u == pll))
1937:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_SRSSV2) */
1938:Generated_Source\PSoC4/CyLib.c ****             )
1939:Generated_Source\PSoC4/CyLib.c ****         {
1940:Generated_Source\PSoC4/CyLib.c ****             returnValue = CYRET_SUCCESS;
1941:Generated_Source\PSoC4/CyLib.c ****         }
1942:Generated_Source\PSoC4/CyLib.c **** 
1943:Generated_Source\PSoC4/CyLib.c ****         return (returnValue);
1944:Generated_Source\PSoC4/CyLib.c ****     }
1945:Generated_Source\PSoC4/CyLib.c **** 
1946:Generated_Source\PSoC4/CyLib.c **** 
1947:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1948:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllGetUnlockStatus
1949:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1950:Generated_Source\PSoC4/CyLib.c ****     *
1951:Generated_Source\PSoC4/CyLib.c ****     *  Returns a non-zero value if the specified PLL output was unlocked.
1952:Generated_Source\PSoC4/CyLib.c ****     *  The unlock status is an indicator that the PLL has lost a lock at least once
ARM GAS  e:\temp\cc2tFLyS.s 			page 41


1953:Generated_Source\PSoC4/CyLib.c ****     *  during its operation. The unlock status is cleared once it is read using
1954:Generated_Source\PSoC4/CyLib.c ****     *  this API.
1955:Generated_Source\PSoC4/CyLib.c ****     *
1956:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S with PLL devices.
1957:Generated_Source\PSoC4/CyLib.c ****     *
1958:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
1959:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
1960:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1 (available only for PSoC 4200L)
1961:Generated_Source\PSoC4/CyLib.c ****     *
1962:Generated_Source\PSoC4/CyLib.c ****     * \return Non-zero value when the specified PLL was unlocked.
1963:Generated_Source\PSoC4/CyLib.c ****     *
1964:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
1965:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysClkPllGetUnlockStatus(uint32 pll)
1966:Generated_Source\PSoC4/CyLib.c ****     {
1967:Generated_Source\PSoC4/CyLib.c ****         uint32 returnStatus = 0u;
1968:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
1969:Generated_Source\PSoC4/CyLib.c **** 
1970:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
1971:Generated_Source\PSoC4/CyLib.c **** 
1972:Generated_Source\PSoC4/CyLib.c ****         returnStatus = CY_SYS_CLK_PLL_BASE.pll[pll].test & CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK
1973:Generated_Source\PSoC4/CyLib.c ****         CY_SYS_CLK_PLL_BASE.pll[pll].test |= CY_SYS_CLK_PLL_TEST_UNLOCK_OCCURRED_MASK;
1974:Generated_Source\PSoC4/CyLib.c **** 
1975:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
1976:Generated_Source\PSoC4/CyLib.c **** 
1977:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
1978:Generated_Source\PSoC4/CyLib.c ****     }
1979:Generated_Source\PSoC4/CyLib.c **** 
1980:Generated_Source\PSoC4/CyLib.c **** 
1981:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
1982:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetFrequency
1983:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
1984:Generated_Source\PSoC4/CyLib.c ****     *
1985:Generated_Source\PSoC4/CyLib.c ****     * Configures either PLL#0 or PLL#1 for the requested input/output frequencies.
1986:Generated_Source\PSoC4/CyLib.c ****     * The input frequency is the frequency of the source to the PLL. The source is
1987:Generated_Source\PSoC4/CyLib.c ****     * set using the CySysClkPllSetSource() function.
1988:Generated_Source\PSoC4/CyLib.c ****     *
1989:Generated_Source\PSoC4/CyLib.c ****     * The PLL must not be the system clock source when calling this function. The
1990:Generated_Source\PSoC4/CyLib.c ****     * PLL output will glitch during this function call.
1991:Generated_Source\PSoC4/CyLib.c ****     *
1992:Generated_Source\PSoC4/CyLib.c ****     * This API is available only for PSoC 4200L / 4100S with PLL devices.
1993:Generated_Source\PSoC4/CyLib.c ****     *
1994:Generated_Source\PSoC4/CyLib.c ****     * \param pll:
1995:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
1996:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
1997:Generated_Source\PSoC4/CyLib.c ****     *
1998:Generated_Source\PSoC4/CyLib.c ****     * \param inputFreq The reference frequency in KHz. The valid range is from 1000 to 49152 KHz.
1999:Generated_Source\PSoC4/CyLib.c ****     *
2000:Generated_Source\PSoC4/CyLib.c ****     * \param pllFreq The target frequency in KHz. The valid range is from 22500 to 49152 KHz.
2001:Generated_Source\PSoC4/CyLib.c ****     *
2002:Generated_Source\PSoC4/CyLib.c ****     * \param divider The output clock divider for the PLL:
2003:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIVPASS    Pass Through
2004:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
2005:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
2006:Generated_Source\PSoC4/CyLib.c ****     * CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
2007:Generated_Source\PSoC4/CyLib.c ****     *
2008:Generated_Source\PSoC4/CyLib.c ****     * \param freqTol The tolerance in ppm, 10 ppm is equal to 0.001%.
2009:Generated_Source\PSoC4/CyLib.c ****     *
ARM GAS  e:\temp\cc2tFLyS.s 			page 42


2010:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_SUCCESS The PLL was successfully configured for the requested
2011:Generated_Source\PSoC4/CyLib.c ****     * frequency.
2012:Generated_Source\PSoC4/CyLib.c ****     *
2013:Generated_Source\PSoC4/CyLib.c ****     * \return CYRET_BAD_PARAM The PLL was not able to successfully configure for the
2014:Generated_Source\PSoC4/CyLib.c ****     * requested frequency.
2015:Generated_Source\PSoC4/CyLib.c ****     *
2016:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2017:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetFrequency(uint32 pll, uint32 inputFreq, uint32 pllFreq, uint32 divider, 
2018:Generated_Source\PSoC4/CyLib.c ****     {
2019:Generated_Source\PSoC4/CyLib.c ****         uint32 qMin;
2020:Generated_Source\PSoC4/CyLib.c ****         uint32 qMax;
2021:Generated_Source\PSoC4/CyLib.c **** 
2022:Generated_Source\PSoC4/CyLib.c ****         uint32 qVal = CY_SYS_CLK_PLL_INVALID;
2023:Generated_Source\PSoC4/CyLib.c ****         uint32 pVal = CY_SYS_CLK_PLL_INVALID;
2024:Generated_Source\PSoC4/CyLib.c **** 
2025:Generated_Source\PSoC4/CyLib.c ****         uint32 q;
2026:Generated_Source\PSoC4/CyLib.c ****         uint32 p;
2027:Generated_Source\PSoC4/CyLib.c **** 
2028:Generated_Source\PSoC4/CyLib.c ****         uint32 fvco;
2029:Generated_Source\PSoC4/CyLib.c ****         int32 ferr;
2030:Generated_Source\PSoC4/CyLib.c **** 
2031:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
2032:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
2033:Generated_Source\PSoC4/CyLib.c **** 
2034:Generated_Source\PSoC4/CyLib.c **** 
2035:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
2036:Generated_Source\PSoC4/CyLib.c **** 
2037:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) &&
2038:Generated_Source\PSoC4/CyLib.c ****             (inputFreq  >= CY_SYS_CLK_PLL_INPUT_FREQ_MIN )  && (inputFreq  <= CY_SYS_CLK_PLL_INPUT_
2039:Generated_Source\PSoC4/CyLib.c ****             (pllFreq >= CY_SYS_CLK_PLL_OUTPUT_FREQ_MIN ) && (pllFreq <= CY_SYS_CLK_PLL_OUTPUT_FREQ_
2040:Generated_Source\PSoC4/CyLib.c ****             (divider <= CY_SYS_PLL_OUTPUT_DIV8) &&
2041:Generated_Source\PSoC4/CyLib.c ****             (CYRET_SUCCESS == tmp))
2042:Generated_Source\PSoC4/CyLib.c ****         {
2043:Generated_Source\PSoC4/CyLib.c **** 
2044:Generated_Source\PSoC4/CyLib.c ****             /* Minimum feed forward loop divisor */
2045:Generated_Source\PSoC4/CyLib.c ****             qMin = (inputFreq + (CY_SYS_CLK_PLL_FPFDMAX - 1u)) / CY_SYS_CLK_PLL_FPFDMAX;
2046:Generated_Source\PSoC4/CyLib.c ****             qMin = (qMin < CY_SYS_CLK_PLL_QMINIP) ? CY_SYS_CLK_PLL_QMINIP : qMin;
2047:Generated_Source\PSoC4/CyLib.c **** 
2048:Generated_Source\PSoC4/CyLib.c ****             /* Maximum feed forward loop divisor */
2049:Generated_Source\PSoC4/CyLib.c ****             qMax = inputFreq / CY_SYS_CLK_PLL_FPFDMIN;
2050:Generated_Source\PSoC4/CyLib.c ****             qMax = (qMax > CY_SYS_CLK_PLL_QMAXIP) ? CY_SYS_CLK_PLL_QMAXIP : qMax;
2051:Generated_Source\PSoC4/CyLib.c **** 
2052:Generated_Source\PSoC4/CyLib.c ****             if (qMin <= qMax)
2053:Generated_Source\PSoC4/CyLib.c ****             {
2054:Generated_Source\PSoC4/CyLib.c ****                 for(q = qMin; q <= qMax; q++)
2055:Generated_Source\PSoC4/CyLib.c ****                 {
2056:Generated_Source\PSoC4/CyLib.c ****                     /* Solve for the feedback divisor value */
2057:Generated_Source\PSoC4/CyLib.c **** 
2058:Generated_Source\PSoC4/CyLib.c ****                     /* INT((pllFreq * q ) / inputFreq), where INT is normal rounding  */
2059:Generated_Source\PSoC4/CyLib.c ****                     p = ((pllFreq * q) + (inputFreq / 2u)) / inputFreq;
2060:Generated_Source\PSoC4/CyLib.c **** 
2061:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the actual VCO frequency (FVCO) */
2062:Generated_Source\PSoC4/CyLib.c ****                     fvco = ((inputFreq * p) / q);
2063:Generated_Source\PSoC4/CyLib.c **** 
2064:Generated_Source\PSoC4/CyLib.c ****                     /* Calculate the frequency error (FERR) */
2065:Generated_Source\PSoC4/CyLib.c ****                     ferr = ((1000000 * ((int32) fvco - (int32) pllFreq))/ (int32) pllFreq);
2066:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  e:\temp\cc2tFLyS.s 			page 43


2067:Generated_Source\PSoC4/CyLib.c ****                     /* Bound check the frequency error and decide next action */
2068:Generated_Source\PSoC4/CyLib.c ****                     if ((( -1 * (int32) freqTol) <= ferr) && (ferr <= (int32) freqTol))
2069:Generated_Source\PSoC4/CyLib.c ****                     {
2070:Generated_Source\PSoC4/CyLib.c ****                         qVal = q;
2071:Generated_Source\PSoC4/CyLib.c ****                         pVal = p;
2072:Generated_Source\PSoC4/CyLib.c ****                         break;
2073:Generated_Source\PSoC4/CyLib.c ****                     }
2074:Generated_Source\PSoC4/CyLib.c ****                 }
2075:Generated_Source\PSoC4/CyLib.c **** 
2076:Generated_Source\PSoC4/CyLib.c **** 
2077:Generated_Source\PSoC4/CyLib.c ****                 if ((pVal != CY_SYS_CLK_PLL_INVALID) && (qVal != CY_SYS_CLK_PLL_INVALID))
2078:Generated_Source\PSoC4/CyLib.c ****                 {
2079:Generated_Source\PSoC4/CyLib.c ****                     if (CySysClkPllSetPQ(pll, pVal, qVal, CY_SYS_CLK_PLL_CURRENT_DEFAULT) == CYRET_
2080:Generated_Source\PSoC4/CyLib.c ****                     {
2081:Generated_Source\PSoC4/CyLib.c ****                         returnStatus = CySysClkPllSetOutputDivider(pll, divider);
2082:Generated_Source\PSoC4/CyLib.c ****                     }
2083:Generated_Source\PSoC4/CyLib.c ****                 }
2084:Generated_Source\PSoC4/CyLib.c ****             }
2085:Generated_Source\PSoC4/CyLib.c **** 
2086:Generated_Source\PSoC4/CyLib.c ****         }
2087:Generated_Source\PSoC4/CyLib.c **** 
2088:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
2089:Generated_Source\PSoC4/CyLib.c ****     }
2090:Generated_Source\PSoC4/CyLib.c **** 
2091:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2092:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetSource
2093:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2094:Generated_Source\PSoC4/CyLib.c ****     *
2095:Generated_Source\PSoC4/CyLib.c ****     *  Sets the input clock source to the PLL. The PLL must be disabled before
2096:Generated_Source\PSoC4/CyLib.c ****     *  calling this function.
2097:Generated_Source\PSoC4/CyLib.c ****     *
2098:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S with PLL devices.
2099:Generated_Source\PSoC4/CyLib.c ****     *
2100:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2101:Generated_Source\PSoC4/CyLib.c ****     *  0   PLL#0
2102:Generated_Source\PSoC4/CyLib.c ****     *  1   PLL#1 (available only for PSoC 4200L)
2103:Generated_Source\PSoC4/CyLib.c ****     *
2104:Generated_Source\PSoC4/CyLib.c ****     * \param source:
2105:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_IMO        IMO
2106:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_EXTCLK     External Clock (available only for PSoC 4200L)
2107:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_ECO        ECO
2108:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI0       DSI_OUT[0] (available only for PSoC 4200L)
2109:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI1       DSI_OUT[1] (available only for PSoC 4200L)
2110:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI2       DSI_OUT[2] (available only for PSoC 4200L)
2111:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_SOURCE_DSI3       DSI_OUT[3] (available only for PSoC 4200L)
2112:Generated_Source\PSoC4/CyLib.c ****     *
2113:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2114:Generated_Source\PSoC4/CyLib.c ****     void CySysClkPllSetSource(uint32 pll, uint32 source)
2115:Generated_Source\PSoC4/CyLib.c ****     {
2116:Generated_Source\PSoC4/CyLib.c ****         uint32 regTmp;
2117:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
2118:Generated_Source\PSoC4/CyLib.c ****         
2119:Generated_Source\PSoC4/CyLib.c ****         #if (CY_IP_SRSSLT)
2120:Generated_Source\PSoC4/CyLib.c ****             uint8 i = 0u;
2121:Generated_Source\PSoC4/CyLib.c ****         #endif /* (CY_IP_SRSSLT) */
2122:Generated_Source\PSoC4/CyLib.c **** 
2123:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
ARM GAS  e:\temp\cc2tFLyS.s 			page 44


2124:Generated_Source\PSoC4/CyLib.c **** 
2125:Generated_Source\PSoC4/CyLib.c ****         if (pll < CY_IP_PLL_NR)
2126:Generated_Source\PSoC4/CyLib.c ****         {
2127:Generated_Source\PSoC4/CyLib.c ****             #if(CY_IP_SRSSV2)
2128:Generated_Source\PSoC4/CyLib.c ****                 regTmp = CY_SYS_CLK_SELECT_REG & (uint32) ~CY_SYS_CLK_SELECT_PLL_MASK(pll);
2129:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= ((source << CY_SYS_CLK_SELECT_PLL_SHIFT(pll)) & CY_SYS_CLK_SELECT_PLL_MAS
2130:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_CLK_SELECT_REG = regTmp;
2131:Generated_Source\PSoC4/CyLib.c ****             #else
2132:Generated_Source\PSoC4/CyLib.c ****                 regTmp = CY_SYS_ECO_CLK_SELECT_REG & (uint32) ~CY_SYS_ECO_CLK_SELECT_PLL0_MASK;
2133:Generated_Source\PSoC4/CyLib.c ****                 regTmp |= ((source << CY_SYS_ECO_CLK_SELECT_PLL0_SHIFT) & CY_SYS_ECO_CLK_SELECT_PLL
2134:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_ECO_CLK_SELECT_REG = regTmp;
2135:Generated_Source\PSoC4/CyLib.c ****                 
2136:Generated_Source\PSoC4/CyLib.c ****                 /* Generate clock sequence to change clock source in CY_SYS_ECO_CLK_SELECT_REG */
2137:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_EXCO_PGM_CLK_REG |= CY_SYS_EXCO_PGM_CLK_ENABLE_MASK;
2138:Generated_Source\PSoC4/CyLib.c ****                 
2139:Generated_Source\PSoC4/CyLib.c ****                 for(i = 0u; i < CY_SYS_EXCO_PGM_CLK_SEQ_GENERATOR; i++)
2140:Generated_Source\PSoC4/CyLib.c ****                 {
2141:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_EXCO_PGM_CLK_REG |= CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK;
2142:Generated_Source\PSoC4/CyLib.c ****                     CY_SYS_EXCO_PGM_CLK_REG &= ~CY_SYS_EXCO_PGM_CLK_CLK_ECO_MASK;
2143:Generated_Source\PSoC4/CyLib.c ****                 }
2144:Generated_Source\PSoC4/CyLib.c ****                 
2145:Generated_Source\PSoC4/CyLib.c ****                 CY_SYS_EXCO_PGM_CLK_REG &= ~CY_SYS_EXCO_PGM_CLK_ENABLE_MASK;
2146:Generated_Source\PSoC4/CyLib.c **** 
2147:Generated_Source\PSoC4/CyLib.c ****             #endif /* (CY_IP_SRSSV2) */
2148:Generated_Source\PSoC4/CyLib.c ****         }
2149:Generated_Source\PSoC4/CyLib.c **** 
2150:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2151:Generated_Source\PSoC4/CyLib.c ****     }
2152:Generated_Source\PSoC4/CyLib.c **** 
2153:Generated_Source\PSoC4/CyLib.c ****     
2154:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2155:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysClkPllSetOutputDivider
2156:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2157:Generated_Source\PSoC4/CyLib.c ****     *
2158:Generated_Source\PSoC4/CyLib.c ****     *  Sets the output clock divider for the PLL.
2159:Generated_Source\PSoC4/CyLib.c ****     *
2160:Generated_Source\PSoC4/CyLib.c ****     *  The PLL must not be the System Clock source when calling this function. The
2161:Generated_Source\PSoC4/CyLib.c ****     *  PLL output will glitch during this function call.
2162:Generated_Source\PSoC4/CyLib.c ****     *
2163:Generated_Source\PSoC4/CyLib.c ****     *  This API is available only for PSoC 4200L / 4100S with PLL devices.
2164:Generated_Source\PSoC4/CyLib.c ****     *
2165:Generated_Source\PSoC4/CyLib.c ****     *  \param PLL:
2166:Generated_Source\PSoC4/CyLib.c ****     *   0   PLL#0
2167:Generated_Source\PSoC4/CyLib.c ****     *   1   PLL#1 (available only for PSoC 4200L)
2168:Generated_Source\PSoC4/CyLib.c ****     *
2169:Generated_Source\PSoC4/CyLib.c ****     * \param divider:
2170:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIVPASS    Pass through
2171:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV2       Divide by 2
2172:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV4       Divide by 4
2173:Generated_Source\PSoC4/CyLib.c ****     *  CY_SYS_PLL_OUTPUT_DIV8       Divide by 8
2174:Generated_Source\PSoC4/CyLib.c ****     *
2175:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_SUCCESS    Completed successfully.
2176:Generated_Source\PSoC4/CyLib.c ****     * \return \ref CYRET_BAD_PARAM  The parameters are out of range or the
2177:Generated_Source\PSoC4/CyLib.c ****     * specified PLL sources the System clock.
2178:Generated_Source\PSoC4/CyLib.c ****     *
2179:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2180:Generated_Source\PSoC4/CyLib.c ****     cystatus CySysClkPllSetOutputDivider(uint32 pll, uint32 divider)
ARM GAS  e:\temp\cc2tFLyS.s 			page 45


2181:Generated_Source\PSoC4/CyLib.c ****     {
2182:Generated_Source\PSoC4/CyLib.c ****         uint32   tmpReg;
2183:Generated_Source\PSoC4/CyLib.c ****         uint8    interruptState;
2184:Generated_Source\PSoC4/CyLib.c ****         cystatus returnStatus = CYRET_BAD_PARAM;
2185:Generated_Source\PSoC4/CyLib.c ****         cystatus tmp;
2186:Generated_Source\PSoC4/CyLib.c **** 
2187:Generated_Source\PSoC4/CyLib.c **** 
2188:Generated_Source\PSoC4/CyLib.c ****         interruptState = CyEnterCriticalSection();
2189:Generated_Source\PSoC4/CyLib.c **** 
2190:Generated_Source\PSoC4/CyLib.c ****         tmp = CySysClkPllConfigChangeAllowed(pll);
2191:Generated_Source\PSoC4/CyLib.c **** 
2192:Generated_Source\PSoC4/CyLib.c ****         if ((pll < CY_IP_PLL_NR) && (CYRET_SUCCESS == tmp) && (divider <= CY_SYS_PLL_OUTPUT_DIV8))
2193:Generated_Source\PSoC4/CyLib.c ****         {
2194:Generated_Source\PSoC4/CyLib.c ****             tmpReg  = CY_SYS_CLK_PLL_BASE.pll[pll].config & (uint32) ~(CY_SYS_CLK_PLL_CONFIG_OUTPUT
2195:Generated_Source\PSoC4/CyLib.c ****             tmpReg |= ((divider << CY_SYS_CLK_PLL_CONFIG_OUTPUT_DIV_SHIFT) & CY_SYS_CLK_PLL_CONFIG_
2196:Generated_Source\PSoC4/CyLib.c **** 
2197:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_CLK_PLL_BASE.pll[pll].config = tmpReg;
2198:Generated_Source\PSoC4/CyLib.c **** 
2199:Generated_Source\PSoC4/CyLib.c ****             returnStatus = CYRET_SUCCESS;
2200:Generated_Source\PSoC4/CyLib.c ****         }
2201:Generated_Source\PSoC4/CyLib.c **** 
2202:Generated_Source\PSoC4/CyLib.c ****         CyExitCriticalSection(interruptState);
2203:Generated_Source\PSoC4/CyLib.c **** 
2204:Generated_Source\PSoC4/CyLib.c ****         return (returnStatus);
2205:Generated_Source\PSoC4/CyLib.c ****     }
2206:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_PLL) */
2207:Generated_Source\PSoC4/CyLib.c **** 
2208:Generated_Source\PSoC4/CyLib.c **** 
2209:Generated_Source\PSoC4/CyLib.c **** #if(CY_IP_SRSSV2)
2210:Generated_Source\PSoC4/CyLib.c **** 
2211:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2212:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdEnable
2213:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2214:Generated_Source\PSoC4/CyLib.c ****     *
2215:Generated_Source\PSoC4/CyLib.c ****     *  Enables the output of the low-voltage monitor when Vddd is at or below the
2216:Generated_Source\PSoC4/CyLib.c ****     *  trip point, configures the device to generate an interrupt, and sets the
2217:Generated_Source\PSoC4/CyLib.c ****     *  voltage trip level.
2218:Generated_Source\PSoC4/CyLib.c ****     *
2219:Generated_Source\PSoC4/CyLib.c ****     *  \param threshold: Threshold selection for Low Voltage Detect circuit.
2220:Generated_Source\PSoC4/CyLib.c ****     *  Threshold variation is +/- 2.5% from these typical voltage choices.
2221:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Voltage threshold
2222:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_75_V       1.7500 V
2223:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_80_V       1.8000 V
2224:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_1_90_V       1.9000 V
2225:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_00_V       2.0000 V
2226:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_10_V       2.1000 V
2227:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_20_V       2.2000 V
2228:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_30_V       2.3000 V
2229:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_40_V       2.4000 V
2230:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_50_V       2.5000 V
2231:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_60_V       2.6000 V
2232:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_70_V       2.7000 V
2233:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_80_V       2.8000 V
2234:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_2_90_V       2.9000 V
2235:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_00_V       3.0000 V
2236:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_3_20_V       3.2000 V
2237:Generated_Source\PSoC4/CyLib.c ****     *    CY_LVD_THRESHOLD_4_50_V       4.5000 V
ARM GAS  e:\temp\cc2tFLyS.s 			page 46


2238:Generated_Source\PSoC4/CyLib.c ****     *
2239:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2240:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdEnable(uint32 threshold)
2241:Generated_Source\PSoC4/CyLib.c ****     {
2242:Generated_Source\PSoC4/CyLib.c ****         /* Prevent propagating a false interrupt */
2243:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= (uint32) ~CY_LVD_PROPAGATE_INT_TO_CPU;
2244:Generated_Source\PSoC4/CyLib.c **** 
2245:Generated_Source\PSoC4/CyLib.c ****         /* Set specified threshold */
2246:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG = (CY_LVD_PWR_VMON_CONFIG_REG & ~CY_LVD_PWR_VMON_CONFIG_LVD_SEL_
2247:Generated_Source\PSoC4/CyLib.c ****                 ((threshold << CY_LVD_PWR_VMON_CONFIG_LVD_SEL_SHIFT) & CY_LVD_PWR_VMON_CONFIG_LVD_S
2248:Generated_Source\PSoC4/CyLib.c **** 
2249:Generated_Source\PSoC4/CyLib.c ****         /* Enable the LVD. This may cause a false LVD event. */
2250:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG |= CY_LVD_PWR_VMON_CONFIG_LVD_EN;
2251:Generated_Source\PSoC4/CyLib.c **** 
2252:Generated_Source\PSoC4/CyLib.c ****         /* Wait for the circuit to stabilize */
2253:Generated_Source\PSoC4/CyLib.c ****         CyDelayUs(CY_LVD_STABILIZE_TIMEOUT_US);
2254:Generated_Source\PSoC4/CyLib.c **** 
2255:Generated_Source\PSoC4/CyLib.c ****         /* Clear the false event */
2256:Generated_Source\PSoC4/CyLib.c ****         CySysLvdClearInterrupt();
2257:Generated_Source\PSoC4/CyLib.c **** 
2258:Generated_Source\PSoC4/CyLib.c ****         /* Unmask the interrupt */
2259:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   |= CY_LVD_PROPAGATE_INT_TO_CPU;
2260:Generated_Source\PSoC4/CyLib.c ****     }
2261:Generated_Source\PSoC4/CyLib.c **** 
2262:Generated_Source\PSoC4/CyLib.c **** 
2263:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2264:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdDisable
2265:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2266:Generated_Source\PSoC4/CyLib.c ****     *
2267:Generated_Source\PSoC4/CyLib.c ****     *  Disables the low voltage detection. A low voltage interrupt is disabled.
2268:Generated_Source\PSoC4/CyLib.c ****     *
2269:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2270:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdDisable(void)
2271:Generated_Source\PSoC4/CyLib.c ****     {
2272:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_MASK_REG   &= ~CY_LVD_PROPAGATE_INT_TO_CPU;
2273:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_VMON_CONFIG_REG &= ~CY_LVD_PWR_VMON_CONFIG_LVD_EN;
2274:Generated_Source\PSoC4/CyLib.c ****     }
2275:Generated_Source\PSoC4/CyLib.c **** 
2276:Generated_Source\PSoC4/CyLib.c **** 
2277:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2278:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdGetInterruptSource
2279:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2280:Generated_Source\PSoC4/CyLib.c ****     *
2281:Generated_Source\PSoC4/CyLib.c ****     *  Gets the low voltage detection interrupt status (without clearing).
2282:Generated_Source\PSoC4/CyLib.c ****     *
2283:Generated_Source\PSoC4/CyLib.c ****     * \return
2284:Generated_Source\PSoC4/CyLib.c ****     *  Interrupt request value:
2285:Generated_Source\PSoC4/CyLib.c ****     *    CY_SYS_LVD_INT - Indicates an Low Voltage Detect interrupt
2286:Generated_Source\PSoC4/CyLib.c ****     *
2287:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2288:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysLvdGetInterruptSource(void)
2289:Generated_Source\PSoC4/CyLib.c ****     {
2290:Generated_Source\PSoC4/CyLib.c ****         return (CY_LVD_PWR_INTR_REG & CY_SYS_LVD_INT);
2291:Generated_Source\PSoC4/CyLib.c ****     }
2292:Generated_Source\PSoC4/CyLib.c **** 
2293:Generated_Source\PSoC4/CyLib.c **** 
2294:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
ARM GAS  e:\temp\cc2tFLyS.s 			page 47


2295:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysLvdClearInterrupt
2296:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2297:Generated_Source\PSoC4/CyLib.c ****     *
2298:Generated_Source\PSoC4/CyLib.c ****     *  Clears the low voltage detection interrupt status.
2299:Generated_Source\PSoC4/CyLib.c ****     *
2300:Generated_Source\PSoC4/CyLib.c ****     * \return
2301:Generated_Source\PSoC4/CyLib.c ****     *  None
2302:Generated_Source\PSoC4/CyLib.c ****     *
2303:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2304:Generated_Source\PSoC4/CyLib.c ****     void CySysLvdClearInterrupt(void)
2305:Generated_Source\PSoC4/CyLib.c ****     {
2306:Generated_Source\PSoC4/CyLib.c ****         CY_LVD_PWR_INTR_REG = CY_SYS_LVD_INT;
2307:Generated_Source\PSoC4/CyLib.c ****     }
2308:Generated_Source\PSoC4/CyLib.c **** 
2309:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_IP_SRSSV2) */
2310:Generated_Source\PSoC4/CyLib.c **** 
2311:Generated_Source\PSoC4/CyLib.c **** 
2312:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2313:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysGetResetReason
2314:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2315:Generated_Source\PSoC4/CyLib.c **** *
2316:Generated_Source\PSoC4/CyLib.c **** *  Reports the cause for the latest reset(s) that occurred in the system. All
2317:Generated_Source\PSoC4/CyLib.c **** *  the bits in the RES_CAUSE register assert when the corresponding reset cause
2318:Generated_Source\PSoC4/CyLib.c **** *  occurs and must be cleared by the firmware. These bits are cleared by the
2319:Generated_Source\PSoC4/CyLib.c **** *  hardware only during XRES, POR, or a detected brown-out.
2320:Generated_Source\PSoC4/CyLib.c **** *
2321:Generated_Source\PSoC4/CyLib.c **** *  \param reason: bits in the RES_CAUSE register to clear.
2322:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_WDT       - WDT caused a reset
2323:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_PROTFAULT - Occured protection violation that requires reset
2324:Generated_Source\PSoC4/CyLib.c **** *   CY_SYS_RESET_SW        - Cortex-M0 requested a system reset.
2325:Generated_Source\PSoC4/CyLib.c **** *
2326:Generated_Source\PSoC4/CyLib.c **** * \return
2327:Generated_Source\PSoC4/CyLib.c **** *  Status. Same enumerated bit values as used for the reason parameter.
2328:Generated_Source\PSoC4/CyLib.c **** *
2329:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2330:Generated_Source\PSoC4/CyLib.c **** uint32 CySysGetResetReason(uint32 reason)
2331:Generated_Source\PSoC4/CyLib.c **** {
 325              		.loc 1 2331 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              		@ link register save eliminated.
 330              	.LVL20:
 331 0000 0200     		movs	r2, r0
2332:Generated_Source\PSoC4/CyLib.c ****     uint32 returnStatus;
2333:Generated_Source\PSoC4/CyLib.c **** 
2334:Generated_Source\PSoC4/CyLib.c ****     reason &= (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
 332              		.loc 1 2334 0
 333 0002 1920     		movs	r0, #25
 334              	.LVL21:
 335 0004 0240     		ands	r2, r0
 336              	.LVL22:
2335:Generated_Source\PSoC4/CyLib.c ****     returnStatus = CY_SYS_RES_CAUSE_REG &
 337              		.loc 1 2335 0
 338 0006 0249     		ldr	r1, .L25
 339 0008 0B68     		ldr	r3, [r1]
 340 000a 1840     		ands	r0, r3
ARM GAS  e:\temp\cc2tFLyS.s 			page 48


 341              	.LVL23:
2336:Generated_Source\PSoC4/CyLib.c ****                   (CY_SYS_RESET_WDT | CY_SYS_RESET_PROTFAULT | CY_SYS_RESET_SW);
2337:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_RES_CAUSE_REG = reason;
 342              		.loc 1 2337 0
 343 000c 0A60     		str	r2, [r1]
2338:Generated_Source\PSoC4/CyLib.c **** 
2339:Generated_Source\PSoC4/CyLib.c ****     return (returnStatus);
2340:Generated_Source\PSoC4/CyLib.c **** }
 344              		.loc 1 2340 0
 345              		@ sp needed
 346 000e 7047     		bx	lr
 347              	.L26:
 348              		.align	2
 349              	.L25:
 350 0010 54000340 		.word	1073938516
 351              		.cfi_endproc
 352              	.LFE8:
 353              		.size	CySysGetResetReason, .-CySysGetResetReason
 354              		.section	.text.CyDisableInts,"ax",%progbits
 355              		.align	2
 356              		.global	CyDisableInts
 357              		.code	16
 358              		.thumb_func
 359              		.type	CyDisableInts, %function
 360              	CyDisableInts:
 361              	.LFB9:
2341:Generated_Source\PSoC4/CyLib.c **** 
2342:Generated_Source\PSoC4/CyLib.c **** 
2343:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2344:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDisableInts
2345:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2346:Generated_Source\PSoC4/CyLib.c **** *
2347:Generated_Source\PSoC4/CyLib.c **** *  Disables all interrupts.
2348:Generated_Source\PSoC4/CyLib.c **** *
2349:Generated_Source\PSoC4/CyLib.c **** * \return
2350:Generated_Source\PSoC4/CyLib.c **** *  32 bit mask of previously enabled interrupts.
2351:Generated_Source\PSoC4/CyLib.c **** *
2352:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2353:Generated_Source\PSoC4/CyLib.c **** uint32 CyDisableInts(void)
2354:Generated_Source\PSoC4/CyLib.c **** {
 362              		.loc 1 2354 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366              		@ link register save eliminated.
2355:Generated_Source\PSoC4/CyLib.c ****     uint32 intState;
2356:Generated_Source\PSoC4/CyLib.c **** 
2357:Generated_Source\PSoC4/CyLib.c ****     /* Get current interrupt state. */
2358:Generated_Source\PSoC4/CyLib.c ****     intState = CY_INT_CLEAR_REG;
 367              		.loc 1 2358 0
 368 0000 024B     		ldr	r3, .L28
 369 0002 1868     		ldr	r0, [r3]
 370              	.LVL24:
2359:Generated_Source\PSoC4/CyLib.c **** 
2360:Generated_Source\PSoC4/CyLib.c ****     /* Disable all interrupts. */
2361:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = CY_INT_CLEAR_DISABLE_ALL;
 371              		.loc 1 2361 0
ARM GAS  e:\temp\cc2tFLyS.s 			page 49


 372 0004 0122     		movs	r2, #1
 373 0006 5242     		rsbs	r2, r2, #0
 374 0008 1A60     		str	r2, [r3]
2362:Generated_Source\PSoC4/CyLib.c **** 
2363:Generated_Source\PSoC4/CyLib.c ****     return (intState);
2364:Generated_Source\PSoC4/CyLib.c **** }
 375              		.loc 1 2364 0
 376              		@ sp needed
 377 000a 7047     		bx	lr
 378              	.L29:
 379              		.align	2
 380              	.L28:
 381 000c 80E100E0 		.word	-536813184
 382              		.cfi_endproc
 383              	.LFE9:
 384              		.size	CyDisableInts, .-CyDisableInts
 385              		.section	.text.CyEnableInts,"ax",%progbits
 386              		.align	2
 387              		.global	CyEnableInts
 388              		.code	16
 389              		.thumb_func
 390              		.type	CyEnableInts, %function
 391              	CyEnableInts:
 392              	.LFB10:
2365:Generated_Source\PSoC4/CyLib.c **** 
2366:Generated_Source\PSoC4/CyLib.c **** 
2367:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2368:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyEnableInts
2369:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2370:Generated_Source\PSoC4/CyLib.c **** *
2371:Generated_Source\PSoC4/CyLib.c **** *  Enables interrupts to a given state.
2372:Generated_Source\PSoC4/CyLib.c **** *
2373:Generated_Source\PSoC4/CyLib.c **** *  \param mask The 32 bit mask of interrupts to enable.
2374:Generated_Source\PSoC4/CyLib.c **** *
2375:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2376:Generated_Source\PSoC4/CyLib.c **** void CyEnableInts(uint32 mask)
2377:Generated_Source\PSoC4/CyLib.c **** {
 393              		.loc 1 2377 0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397              		@ link register save eliminated.
 398              	.LVL25:
2378:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = mask;
 399              		.loc 1 2378 0
 400 0000 014B     		ldr	r3, .L31
 401 0002 1860     		str	r0, [r3]
2379:Generated_Source\PSoC4/CyLib.c **** }
 402              		.loc 1 2379 0
 403              		@ sp needed
 404 0004 7047     		bx	lr
 405              	.L32:
 406 0006 C046     		.align	2
 407              	.L31:
 408 0008 00E100E0 		.word	-536813312
 409              		.cfi_endproc
 410              	.LFE10:
ARM GAS  e:\temp\cc2tFLyS.s 			page 50


 411              		.size	CyEnableInts, .-CyEnableInts
 412              		.section	.text.CyIntEnable,"ax",%progbits
 413              		.align	2
 414              		.global	CyIntEnable
 415              		.code	16
 416              		.thumb_func
 417              		.type	CyIntEnable, %function
 418              	CyIntEnable:
 419              	.LFB17:
2380:Generated_Source\PSoC4/CyLib.c **** 
2381:Generated_Source\PSoC4/CyLib.c **** 
2382:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2383:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetSysVector
2384:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2385:Generated_Source\PSoC4/CyLib.c **** *
2386:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified system interrupt number. These
2387:Generated_Source\PSoC4/CyLib.c **** *  interrupts are for SysTick, PendSV and others.
2388:Generated_Source\PSoC4/CyLib.c **** *
2389:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2390:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2391:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
2392:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2393:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2394:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2395:Generated_Source\PSoC4/CyLib.c **** *
2396:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine.
2397:Generated_Source\PSoC4/CyLib.c **** *
2398:Generated_Source\PSoC4/CyLib.c **** * \return The old ISR vector at this location.
2399:Generated_Source\PSoC4/CyLib.c **** *
2400:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2401:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetSysVector(uint8 number, cyisraddress address)
2402:Generated_Source\PSoC4/CyLib.c **** {
2403:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2404:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
2405:Generated_Source\PSoC4/CyLib.c **** 
2406:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
2407:Generated_Source\PSoC4/CyLib.c **** 
2408:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2409:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[number];
2410:Generated_Source\PSoC4/CyLib.c **** 
2411:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2412:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[number] = address;
2413:Generated_Source\PSoC4/CyLib.c **** 
2414:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
2415:Generated_Source\PSoC4/CyLib.c **** }
2416:Generated_Source\PSoC4/CyLib.c **** 
2417:Generated_Source\PSoC4/CyLib.c **** 
2418:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2419:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetSysVector
2420:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2421:Generated_Source\PSoC4/CyLib.c **** *
2422:Generated_Source\PSoC4/CyLib.c **** *   Gets the interrupt vector of the specified system interrupt number. These
2423:Generated_Source\PSoC4/CyLib.c **** *   interrupts are for SysTick, PendSV and others.
2424:Generated_Source\PSoC4/CyLib.c **** *
2425:Generated_Source\PSoC4/CyLib.c **** *  \param number: System interrupt number:
2426:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_NMI_IRQN        - Non Maskable Interrupt
2427:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_HARD_FAULT_IRQN - Hard Fault Interrupt
ARM GAS  e:\temp\cc2tFLyS.s 			page 51


2428:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SVCALL_IRQN     - SV Call Interrupt
2429:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_PEND_SV_IRQN    - Pend SV Interrupt
2430:Generated_Source\PSoC4/CyLib.c **** *    CY_INT_SYSTICK_IRQN    - System Tick Interrupt
2431:Generated_Source\PSoC4/CyLib.c **** *
2432:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2433:Generated_Source\PSoC4/CyLib.c **** *
2434:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2435:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetSysVector(uint8 number)
2436:Generated_Source\PSoC4/CyLib.c **** {
2437:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
2438:Generated_Source\PSoC4/CyLib.c **** 
2439:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_INT_IRQ_BASE);
2440:Generated_Source\PSoC4/CyLib.c **** 
2441:Generated_Source\PSoC4/CyLib.c ****     return(ramVectorTable[number]);
2442:Generated_Source\PSoC4/CyLib.c **** }
2443:Generated_Source\PSoC4/CyLib.c **** 
2444:Generated_Source\PSoC4/CyLib.c **** 
2445:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2446:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetVector
2447:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2448:Generated_Source\PSoC4/CyLib.c **** *
2449:Generated_Source\PSoC4/CyLib.c **** *  Sets the interrupt vector of the specified interrupt number.
2450:Generated_Source\PSoC4/CyLib.c **** *
2451:Generated_Source\PSoC4/CyLib.c **** *  \param number Valid range [0-31].  Interrupt number
2452:Generated_Source\PSoC4/CyLib.c **** *  \param address Pointer to an interrupt service routine
2453:Generated_Source\PSoC4/CyLib.c **** *
2454:Generated_Source\PSoC4/CyLib.c **** * \return Previous interrupt vector value.
2455:Generated_Source\PSoC4/CyLib.c **** *
2456:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2457:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntSetVector(uint8 number, cyisraddress address)
2458:Generated_Source\PSoC4/CyLib.c **** {
2459:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
2460:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
2461:Generated_Source\PSoC4/CyLib.c **** 
2462:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
2463:Generated_Source\PSoC4/CyLib.c **** 
2464:Generated_Source\PSoC4/CyLib.c ****     /* Save old Interrupt service routine. */
2465:Generated_Source\PSoC4/CyLib.c ****     oldIsr = ramVectorTable[CY_INT_IRQ_BASE + number];
2466:Generated_Source\PSoC4/CyLib.c **** 
2467:Generated_Source\PSoC4/CyLib.c ****     /* Set new Interrupt service routine. */
2468:Generated_Source\PSoC4/CyLib.c ****     ramVectorTable[CY_INT_IRQ_BASE + number] = address;
2469:Generated_Source\PSoC4/CyLib.c **** 
2470:Generated_Source\PSoC4/CyLib.c ****     return(oldIsr);
2471:Generated_Source\PSoC4/CyLib.c **** }
2472:Generated_Source\PSoC4/CyLib.c **** 
2473:Generated_Source\PSoC4/CyLib.c **** 
2474:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2475:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetVector
2476:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2477:Generated_Source\PSoC4/CyLib.c **** *
2478:Generated_Source\PSoC4/CyLib.c **** *  Gets the interrupt vector of the specified interrupt number.
2479:Generated_Source\PSoC4/CyLib.c **** *
2480:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2481:Generated_Source\PSoC4/CyLib.c **** *
2482:Generated_Source\PSoC4/CyLib.c **** * \return Address of the ISR in the interrupt vector table.
2483:Generated_Source\PSoC4/CyLib.c **** *
2484:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
ARM GAS  e:\temp\cc2tFLyS.s 			page 52


2485:Generated_Source\PSoC4/CyLib.c **** cyisraddress CyIntGetVector(uint8 number)
2486:Generated_Source\PSoC4/CyLib.c **** {
2487:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
2488:Generated_Source\PSoC4/CyLib.c **** 
2489:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
2490:Generated_Source\PSoC4/CyLib.c **** 
2491:Generated_Source\PSoC4/CyLib.c ****     return (ramVectorTable[CY_INT_IRQ_BASE + number]);
2492:Generated_Source\PSoC4/CyLib.c **** }
2493:Generated_Source\PSoC4/CyLib.c **** 
2494:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2495:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPriority
2496:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2497:Generated_Source\PSoC4/CyLib.c **** *
2498:Generated_Source\PSoC4/CyLib.c **** *  Sets the priority of the interrupt.
2499:Generated_Source\PSoC4/CyLib.c **** *
2500:Generated_Source\PSoC4/CyLib.c **** *  \param priority: Priority of the interrupt. 0 - 3, 0 being the highest.
2501:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2502:Generated_Source\PSoC4/CyLib.c **** *
2503:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2504:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPriority(uint8 number, uint8 priority)
2505:Generated_Source\PSoC4/CyLib.c **** {
2506:Generated_Source\PSoC4/CyLib.c ****     uint8 interruptState;
2507:Generated_Source\PSoC4/CyLib.c ****     uint32 shift;
2508:Generated_Source\PSoC4/CyLib.c ****     uint32 value;
2509:Generated_Source\PSoC4/CyLib.c **** 
2510:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(priority <= CY_MIN_PRIORITY);
2511:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
2512:Generated_Source\PSoC4/CyLib.c **** 
2513:Generated_Source\PSoC4/CyLib.c ****     shift = CY_INT_PRIORITY_SHIFT(number);
2514:Generated_Source\PSoC4/CyLib.c **** 
2515:Generated_Source\PSoC4/CyLib.c ****     interruptState = CyEnterCriticalSection();
2516:Generated_Source\PSoC4/CyLib.c **** 
2517:Generated_Source\PSoC4/CyLib.c ****     value = CY_INT_PRIORITY_REG(number);
2518:Generated_Source\PSoC4/CyLib.c ****     value &= (uint32)(~((uint32)(CY_INT_PRIORITY_MASK << shift)));
2519:Generated_Source\PSoC4/CyLib.c ****     value |= ((uint32)priority << shift);
2520:Generated_Source\PSoC4/CyLib.c ****     CY_INT_PRIORITY_REG(number) = value;
2521:Generated_Source\PSoC4/CyLib.c **** 
2522:Generated_Source\PSoC4/CyLib.c ****     CyExitCriticalSection(interruptState);
2523:Generated_Source\PSoC4/CyLib.c **** }
2524:Generated_Source\PSoC4/CyLib.c **** 
2525:Generated_Source\PSoC4/CyLib.c **** 
2526:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2527:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetPriority
2528:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2529:Generated_Source\PSoC4/CyLib.c **** *
2530:Generated_Source\PSoC4/CyLib.c **** *  Gets the priority of the interrupt.
2531:Generated_Source\PSoC4/CyLib.c **** *
2532:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the interrupt, 0 - 31.
2533:Generated_Source\PSoC4/CyLib.c **** *
2534:Generated_Source\PSoC4/CyLib.c **** * \return
2535:Generated_Source\PSoC4/CyLib.c **** *  Priority of the interrupt. 0 - 3, 0 being the highest.
2536:Generated_Source\PSoC4/CyLib.c **** *
2537:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2538:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetPriority(uint8 number)
2539:Generated_Source\PSoC4/CyLib.c **** {
2540:Generated_Source\PSoC4/CyLib.c ****     uint8 priority;
2541:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  e:\temp\cc2tFLyS.s 			page 53


2542:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
2543:Generated_Source\PSoC4/CyLib.c **** 
2544:Generated_Source\PSoC4/CyLib.c ****     priority = (uint8) (CY_INT_PRIORITY_REG(number) >> CY_INT_PRIORITY_SHIFT(number));
2545:Generated_Source\PSoC4/CyLib.c **** 
2546:Generated_Source\PSoC4/CyLib.c ****     return (priority & (uint8) CY_INT_PRIORITY_MASK);
2547:Generated_Source\PSoC4/CyLib.c **** }
2548:Generated_Source\PSoC4/CyLib.c **** 
2549:Generated_Source\PSoC4/CyLib.c **** 
2550:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2551:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntEnable
2552:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2553:Generated_Source\PSoC4/CyLib.c **** *
2554:Generated_Source\PSoC4/CyLib.c **** *  Enables the specified interrupt number.
2555:Generated_Source\PSoC4/CyLib.c **** *
2556:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number
2557:Generated_Source\PSoC4/CyLib.c **** *
2558:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2559:Generated_Source\PSoC4/CyLib.c **** void CyIntEnable(uint8 number)
2560:Generated_Source\PSoC4/CyLib.c **** {
 420              		.loc 1 2560 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424              		@ link register save eliminated.
 425              	.LVL26:
2561:Generated_Source\PSoC4/CyLib.c ****     CY_INT_ENABLE_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 426              		.loc 1 2561 0
 427 0000 1F23     		movs	r3, #31
 428 0002 1840     		ands	r0, r3
 429              	.LVL27:
 430 0004 1E3B     		subs	r3, r3, #30
 431 0006 8340     		lsls	r3, r3, r0
 432 0008 014A     		ldr	r2, .L34
 433 000a 1360     		str	r3, [r2]
2562:Generated_Source\PSoC4/CyLib.c **** }
 434              		.loc 1 2562 0
 435              		@ sp needed
 436 000c 7047     		bx	lr
 437              	.L35:
 438 000e C046     		.align	2
 439              	.L34:
 440 0010 00E100E0 		.word	-536813312
 441              		.cfi_endproc
 442              	.LFE17:
 443              		.size	CyIntEnable, .-CyIntEnable
 444              		.section	.text.CyIntGetState,"ax",%progbits
 445              		.align	2
 446              		.global	CyIntGetState
 447              		.code	16
 448              		.thumb_func
 449              		.type	CyIntGetState, %function
 450              	CyIntGetState:
 451              	.LFB18:
2563:Generated_Source\PSoC4/CyLib.c **** 
2564:Generated_Source\PSoC4/CyLib.c **** 
2565:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2566:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntGetState
ARM GAS  e:\temp\cc2tFLyS.s 			page 54


2567:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2568:Generated_Source\PSoC4/CyLib.c **** *
2569:Generated_Source\PSoC4/CyLib.c **** *  Gets the enable state of the specified interrupt number.
2570:Generated_Source\PSoC4/CyLib.c **** *
2571:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2572:Generated_Source\PSoC4/CyLib.c **** *
2573:Generated_Source\PSoC4/CyLib.c **** * \return
2574:Generated_Source\PSoC4/CyLib.c **** *  Enable status: 1 if enabled, 0 if disabled
2575:Generated_Source\PSoC4/CyLib.c **** *
2576:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2577:Generated_Source\PSoC4/CyLib.c **** uint8 CyIntGetState(uint8 number)
2578:Generated_Source\PSoC4/CyLib.c **** {
 452              		.loc 1 2578 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 457              	.LVL28:
2579:Generated_Source\PSoC4/CyLib.c ****     /* Get state of interrupt. */
2580:Generated_Source\PSoC4/CyLib.c ****     return ((0u != (CY_INT_ENABLE_REG & ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number)))) ?
 458              		.loc 1 2580 0
 459 0000 044B     		ldr	r3, .L37
 460 0002 1B68     		ldr	r3, [r3]
 461 0004 1F22     		movs	r2, #31
 462 0006 1040     		ands	r0, r2
 463              	.LVL29:
 464 0008 C340     		lsrs	r3, r3, r0
 465 000a 1800     		movs	r0, r3
 466 000c 0123     		movs	r3, #1
 467 000e 1840     		ands	r0, r3
2581:Generated_Source\PSoC4/CyLib.c **** }
 468              		.loc 1 2581 0
 469              		@ sp needed
 470 0010 7047     		bx	lr
 471              	.L38:
 472 0012 C046     		.align	2
 473              	.L37:
 474 0014 00E100E0 		.word	-536813312
 475              		.cfi_endproc
 476              	.LFE18:
 477              		.size	CyIntGetState, .-CyIntGetState
 478              		.section	.text.CyIntDisable,"ax",%progbits
 479              		.align	2
 480              		.global	CyIntDisable
 481              		.code	16
 482              		.thumb_func
 483              		.type	CyIntDisable, %function
 484              	CyIntDisable:
 485              	.LFB19:
2582:Generated_Source\PSoC4/CyLib.c **** 
2583:Generated_Source\PSoC4/CyLib.c **** 
2584:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2585:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntDisable
2586:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2587:Generated_Source\PSoC4/CyLib.c **** *
2588:Generated_Source\PSoC4/CyLib.c **** *   Disables the specified interrupt number.
2589:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  e:\temp\cc2tFLyS.s 			page 55


2590:Generated_Source\PSoC4/CyLib.c **** *   \param number: Valid range [0-31].  Interrupt number.
2591:Generated_Source\PSoC4/CyLib.c **** *
2592:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2593:Generated_Source\PSoC4/CyLib.c **** void CyIntDisable(uint8 number)
2594:Generated_Source\PSoC4/CyLib.c **** {
 486              		.loc 1 2594 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 491              	.LVL30:
2595:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLEAR_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 492              		.loc 1 2595 0
 493 0000 1F23     		movs	r3, #31
 494 0002 1840     		ands	r0, r3
 495              	.LVL31:
 496 0004 1E3B     		subs	r3, r3, #30
 497 0006 8340     		lsls	r3, r3, r0
 498 0008 014A     		ldr	r2, .L40
 499 000a 1360     		str	r3, [r2]
2596:Generated_Source\PSoC4/CyLib.c **** }
 500              		.loc 1 2596 0
 501              		@ sp needed
 502 000c 7047     		bx	lr
 503              	.L41:
 504 000e C046     		.align	2
 505              	.L40:
 506 0010 80E100E0 		.word	-536813184
 507              		.cfi_endproc
 508              	.LFE19:
 509              		.size	CyIntDisable, .-CyIntDisable
 510              		.section	.text.CyIntSetPending,"ax",%progbits
 511              		.align	2
 512              		.global	CyIntSetPending
 513              		.code	16
 514              		.thumb_func
 515              		.type	CyIntSetPending, %function
 516              	CyIntSetPending:
 517              	.LFB20:
2597:Generated_Source\PSoC4/CyLib.c **** 
2598:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2599:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntSetPending
2600:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2601:Generated_Source\PSoC4/CyLib.c **** *
2602:Generated_Source\PSoC4/CyLib.c **** *  Forces the specified interrupt number to be pending.
2603:Generated_Source\PSoC4/CyLib.c **** *
2604:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2605:Generated_Source\PSoC4/CyLib.c **** *
2606:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2607:Generated_Source\PSoC4/CyLib.c **** void CyIntSetPending(uint8 number)
2608:Generated_Source\PSoC4/CyLib.c **** {
 518              		.loc 1 2608 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522              		@ link register save eliminated.
 523              	.LVL32:
ARM GAS  e:\temp\cc2tFLyS.s 			page 56


2609:Generated_Source\PSoC4/CyLib.c ****     CY_INT_SET_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 524              		.loc 1 2609 0
 525 0000 1F23     		movs	r3, #31
 526 0002 1840     		ands	r0, r3
 527              	.LVL33:
 528 0004 1E3B     		subs	r3, r3, #30
 529 0006 8340     		lsls	r3, r3, r0
 530 0008 014A     		ldr	r2, .L43
 531 000a 1360     		str	r3, [r2]
2610:Generated_Source\PSoC4/CyLib.c **** }
 532              		.loc 1 2610 0
 533              		@ sp needed
 534 000c 7047     		bx	lr
 535              	.L44:
 536 000e C046     		.align	2
 537              	.L43:
 538 0010 00E200E0 		.word	-536813056
 539              		.cfi_endproc
 540              	.LFE20:
 541              		.size	CyIntSetPending, .-CyIntSetPending
 542              		.section	.text.CyIntClearPending,"ax",%progbits
 543              		.align	2
 544              		.global	CyIntClearPending
 545              		.code	16
 546              		.thumb_func
 547              		.type	CyIntClearPending, %function
 548              	CyIntClearPending:
 549              	.LFB21:
2611:Generated_Source\PSoC4/CyLib.c **** 
2612:Generated_Source\PSoC4/CyLib.c **** 
2613:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2614:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyIntClearPending
2615:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2616:Generated_Source\PSoC4/CyLib.c **** *
2617:Generated_Source\PSoC4/CyLib.c **** *  Clears any pending interrupt for the specified interrupt number.
2618:Generated_Source\PSoC4/CyLib.c **** *
2619:Generated_Source\PSoC4/CyLib.c **** *  \param number: Valid range [0-31].  Interrupt number.
2620:Generated_Source\PSoC4/CyLib.c **** *
2621:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2622:Generated_Source\PSoC4/CyLib.c **** void CyIntClearPending(uint8 number)
2623:Generated_Source\PSoC4/CyLib.c **** {
 550              		.loc 1 2623 0
 551              		.cfi_startproc
 552              		@ args = 0, pretend = 0, frame = 0
 553              		@ frame_needed = 0, uses_anonymous_args = 0
 554              		@ link register save eliminated.
 555              	.LVL34:
2624:Generated_Source\PSoC4/CyLib.c ****     CY_INT_CLR_PEND_REG = ((uint32) 0x01u << (CY_INT_ENABLE_RANGE_MASK & number));
 556              		.loc 1 2624 0
 557 0000 1F23     		movs	r3, #31
 558 0002 1840     		ands	r0, r3
 559              	.LVL35:
 560 0004 1E3B     		subs	r3, r3, #30
 561 0006 8340     		lsls	r3, r3, r0
 562 0008 014A     		ldr	r2, .L46
 563 000a 1360     		str	r3, [r2]
2625:Generated_Source\PSoC4/CyLib.c **** }
ARM GAS  e:\temp\cc2tFLyS.s 			page 57


 564              		.loc 1 2625 0
 565              		@ sp needed
 566 000c 7047     		bx	lr
 567              	.L47:
 568 000e C046     		.align	2
 569              	.L46:
 570 0010 80E200E0 		.word	-536812928
 571              		.cfi_endproc
 572              	.LFE21:
 573              		.size	CyIntClearPending, .-CyIntClearPending
 574              		.section	.text.CyHalt,"ax",%progbits
 575              		.align	2
 576              		.global	CyHalt
 577              		.code	16
 578              		.thumb_func
 579              		.type	CyHalt, %function
 580              	CyHalt:
 581              	.LFB22:
2626:Generated_Source\PSoC4/CyLib.c **** 
2627:Generated_Source\PSoC4/CyLib.c **** 
2628:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2629:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyHalt
2630:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2631:Generated_Source\PSoC4/CyLib.c **** *
2632:Generated_Source\PSoC4/CyLib.c **** *  Halts the CPU.
2633:Generated_Source\PSoC4/CyLib.c **** *
2634:Generated_Source\PSoC4/CyLib.c **** *  \param reason: Value to be used during debugging.
2635:Generated_Source\PSoC4/CyLib.c **** *
2636:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2637:Generated_Source\PSoC4/CyLib.c **** void CyHalt(uint8 reason)
2638:Generated_Source\PSoC4/CyLib.c **** {
 582              		.loc 1 2638 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              		@ link register save eliminated.
 587              	.LVL36:
2639:Generated_Source\PSoC4/CyLib.c ****     if(0u != reason)
2640:Generated_Source\PSoC4/CyLib.c ****     {
2641:Generated_Source\PSoC4/CyLib.c ****         /* To remove unreferenced local variable warning */
2642:Generated_Source\PSoC4/CyLib.c ****     }
2643:Generated_Source\PSoC4/CyLib.c **** 
2644:Generated_Source\PSoC4/CyLib.c ****     #if defined (__ARMCC_VERSION)
2645:Generated_Source\PSoC4/CyLib.c ****         __breakpoint(0x0);
2646:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__GNUC__) || defined (__ICCARM__)
2647:Generated_Source\PSoC4/CyLib.c ****         __asm("    bkpt    1");
 588              		.loc 1 2647 0
 589              		.syntax divided
 590              	@ 2647 "Generated_Source\PSoC4\CyLib.c" 1
 591 0000 01BE     		    bkpt    1
 592              	@ 0 "" 2
2648:Generated_Source\PSoC4/CyLib.c ****     #elif defined(__C51__)
2649:Generated_Source\PSoC4/CyLib.c ****         CYDEV_HALT_CPU;
2650:Generated_Source\PSoC4/CyLib.c ****     #endif  /* (__ARMCC_VERSION) */
2651:Generated_Source\PSoC4/CyLib.c **** }
 593              		.loc 1 2651 0
 594              		.thumb
ARM GAS  e:\temp\cc2tFLyS.s 			page 58


 595              		.syntax unified
 596              		@ sp needed
 597 0002 7047     		bx	lr
 598              		.cfi_endproc
 599              	.LFE22:
 600              		.size	CyHalt, .-CyHalt
 601              		.section	.text.CySysClkWriteImoFreq,"ax",%progbits
 602              		.align	2
 603              		.global	CySysClkWriteImoFreq
 604              		.code	16
 605              		.thumb_func
 606              		.type	CySysClkWriteImoFreq, %function
 607              	CySysClkWriteImoFreq:
 608              	.LFB6:
 927:Generated_Source\PSoC4/CyLib.c ****         uint8  interruptState;
 609              		.loc 1 927 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613              	.LVL37:
 614 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 615              		.cfi_def_cfa_offset 24
 616              		.cfi_offset 3, -24
 617              		.cfi_offset 4, -20
 618              		.cfi_offset 5, -16
 619              		.cfi_offset 6, -12
 620              		.cfi_offset 7, -8
 621              		.cfi_offset 14, -4
 622 0002 0400     		movs	r4, r0
 944:Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
 623              		.loc 1 944 0
 624 0004 1828     		cmp	r0, #24
 625 0006 0BD0     		beq	.L50
 944:Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
 626              		.loc 1 944 0 is_stmt 0 discriminator 1
 627 0008 1C28     		cmp	r0, #28
 628 000a 09D0     		beq	.L50
 944:Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
 629              		.loc 1 944 0 discriminator 2
 630 000c 2028     		cmp	r0, #32
 631 000e 07D0     		beq	.L50
 944:Generated_Source\PSoC4/CyLib.c ****                 (freq == 36u) || (freq == 40u) || (freq == 44u) ||
 632              		.loc 1 944 0 discriminator 3
 633 0010 2428     		cmp	r0, #36
 634 0012 05D0     		beq	.L50
 945:Generated_Source\PSoC4/CyLib.c ****                 (freq == 48u))
 635              		.loc 1 945 0 is_stmt 1
 636 0014 2828     		cmp	r0, #40
 637 0016 03D0     		beq	.L50
 945:Generated_Source\PSoC4/CyLib.c ****                 (freq == 48u))
 638              		.loc 1 945 0 is_stmt 0 discriminator 1
 639 0018 2C28     		cmp	r0, #44
 640 001a 01D0     		beq	.L50
 945:Generated_Source\PSoC4/CyLib.c ****                 (freq == 48u))
 641              		.loc 1 945 0 discriminator 2
 642 001c 3028     		cmp	r0, #48
 643 001e 3CD1     		bne	.L51
ARM GAS  e:\temp\cc2tFLyS.s 			page 59


 644              	.L50:
 949:Generated_Source\PSoC4/CyLib.c **** 
 645              		.loc 1 949 0 is_stmt 1
 646 0020 FFF7FEFF 		bl	CyEnterCriticalSection
 647              	.LVL38:
 648 0024 0500     		movs	r5, r0
 649              	.LVL39:
 980:Generated_Source\PSoC4/CyLib.c **** 
 650              		.loc 1 980 0
 651 0026 1F4A     		ldr	r2, .L54
 652 0028 1368     		ldr	r3, [r2]
 653 002a 0721     		movs	r1, #7
 654 002c 8B43     		bics	r3, r1
 655 002e 1360     		str	r3, [r2]
 998:Generated_Source\PSoC4/CyLib.c ****             #endif  /* (CY_IP_IMO_TRIMMABLE_BY_USB) */
 656              		.loc 1 998 0
 657 0030 1D4B     		ldr	r3, .L54+4
 658 0032 E318     		adds	r3, r4, r3
 659 0034 1B78     		ldrb	r3, [r3]
 660 0036 DBB2     		uxtb	r3, r3
 661              	.LVL40:
1000:Generated_Source\PSoC4/CyLib.c **** 
 662              		.loc 1 1000 0
 663 0038 1C4A     		ldr	r2, .L54+8
 664 003a 1360     		str	r3, [r2]
1003:Generated_Source\PSoC4/CyLib.c **** 
 665              		.loc 1 1003 0
 666 003c 1C4A     		ldr	r2, .L54+12
 667 003e 1368     		ldr	r3, [r2]
 668              	.LVL41:
 669 0040 8B43     		bics	r3, r1
 670 0042 1360     		str	r3, [r2]
 671              	.LVL42:
1006:Generated_Source\PSoC4/CyLib.c ****                 (CY_SFLASH_IMO_TCTRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) & CY_SYS_CLK_IMO_TRIM
 672              		.loc 1 1006 0
 673 0044 1B48     		ldr	r0, .L54+16
 674 0046 0368     		ldr	r3, [r0]
 675 0048 7F22     		movs	r2, #127
 676 004a 9343     		bics	r3, r2
 677 004c 1900     		movs	r1, r3
1007:Generated_Source\PSoC4/CyLib.c **** 
 678              		.loc 1 1007 0
 679 004e 1A4B     		ldr	r3, .L54+20
 680 0050 E318     		adds	r3, r4, r3
 681 0052 1B78     		ldrb	r3, [r3]
 682 0054 1340     		ands	r3, r2
1006:Generated_Source\PSoC4/CyLib.c ****                 (CY_SFLASH_IMO_TCTRIM_REG(freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) & CY_SYS_CLK_IMO_TRIM
 683              		.loc 1 1006 0
 684 0056 0B43     		orrs	r3, r1
 685 0058 0360     		str	r3, [r0]
1009:Generated_Source\PSoC4/CyLib.c **** 
 686              		.loc 1 1009 0
 687 005a 3220     		movs	r0, #50
 688 005c FFF7FEFF 		bl	CyDelayCycles
 689              	.LVL43:
1011:Generated_Source\PSoC4/CyLib.c ****             {
 690              		.loc 1 1011 0
ARM GAS  e:\temp\cc2tFLyS.s 			page 60


 691 0060 182C     		cmp	r4, #24
 692 0062 16D9     		bls	.L52
1014:Generated_Source\PSoC4/CyLib.c ****                     (((freq - 4u - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ
 693              		.loc 1 1014 0
 694 0064 0F4E     		ldr	r6, .L54
 695 0066 3368     		ldr	r3, [r6]
 696 0068 0727     		movs	r7, #7
 697 006a BB43     		bics	r3, r7
 698 006c 1A00     		movs	r2, r3
1015:Generated_Source\PSoC4/CyLib.c **** 
 699              		.loc 1 1015 0
 700 006e 2300     		movs	r3, r4
 701 0070 1C3B     		subs	r3, r3, #28
 702 0072 9B08     		lsrs	r3, r3, #2
 703 0074 3B40     		ands	r3, r7
1014:Generated_Source\PSoC4/CyLib.c ****                     (((freq - 4u - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ
 704              		.loc 1 1014 0
 705 0076 1343     		orrs	r3, r2
 706 0078 3360     		str	r3, [r6]
1017:Generated_Source\PSoC4/CyLib.c **** 
 707              		.loc 1 1017 0
 708 007a 3220     		movs	r0, #50
 709 007c FFF7FEFF 		bl	CyDelayCycles
 710              	.LVL44:
1021:Generated_Source\PSoC4/CyLib.c ****                     (((freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ_MASK
 711              		.loc 1 1021 0
 712 0080 3268     		ldr	r2, [r6]
 713 0082 BA43     		bics	r2, r7
1022:Generated_Source\PSoC4/CyLib.c ****             }
 714              		.loc 1 1022 0
 715 0084 2300     		movs	r3, r4
 716 0086 183B     		subs	r3, r3, #24
 717 0088 9B08     		lsrs	r3, r3, #2
 718 008a 3C00     		movs	r4, r7
 719              	.LVL45:
 720 008c 1C40     		ands	r4, r3
1021:Generated_Source\PSoC4/CyLib.c ****                     (((freq - CY_SYS_CLK_IMO_MIN_FREQ_MHZ) >> 2u) & CY_SYS_CLK_IMO_SELECT_FREQ_MASK
 721              		.loc 1 1021 0
 722 008e 1443     		orrs	r4, r2
 723 0090 3460     		str	r4, [r6]
 724              	.L52:
1040:Generated_Source\PSoC4/CyLib.c ****         }
 725              		.loc 1 1040 0
 726 0092 2800     		movs	r0, r5
 727 0094 FFF7FEFF 		bl	CyExitCriticalSection
 728              	.LVL46:
 729 0098 02E0     		b	.L49
 730              	.LVL47:
 731              	.L51:
1045:Generated_Source\PSoC4/CyLib.c ****         }
 732              		.loc 1 1045 0 discriminator 1
 733 009a 0020     		movs	r0, #0
 734              	.LVL48:
 735 009c FFF7FEFF 		bl	CyHalt
 736              	.LVL49:
 737              	.L49:
1047:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  e:\temp\cc2tFLyS.s 			page 61


 738              		.loc 1 1047 0
 739              		@ sp needed
 740 00a0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 741              	.L55:
 742 00a2 C046     		.align	2
 743              	.L54:
 744 00a4 080F0340 		.word	1073942280
 745 00a8 4DF3FF0F 		.word	268432205
 746 00ac 0C0F0340 		.word	1073942284
 747 00b0 100F0340 		.word	1073942288
 748 00b4 180F0340 		.word	1073942296
 749 00b8 34F3FF0F 		.word	268432180
 750              		.cfi_endproc
 751              	.LFE6:
 752              		.size	CySysClkWriteImoFreq, .-CySysClkWriteImoFreq
 753              		.section	.text.CyIntSetSysVector,"ax",%progbits
 754              		.align	2
 755              		.global	CyIntSetSysVector
 756              		.code	16
 757              		.thumb_func
 758              		.type	CyIntSetSysVector, %function
 759              	CyIntSetSysVector:
 760              	.LFB11:
2402:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
 761              		.loc 1 2402 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 0
 764              		@ frame_needed = 0, uses_anonymous_args = 0
 765              	.LVL50:
 766 0000 70B5     		push	{r4, r5, r6, lr}
 767              		.cfi_def_cfa_offset 16
 768              		.cfi_offset 4, -16
 769              		.cfi_offset 5, -12
 770              		.cfi_offset 6, -8
 771              		.cfi_offset 14, -4
 772 0002 0400     		movs	r4, r0
 773 0004 0D00     		movs	r5, r1
 774              	.LVL51:
2406:Generated_Source\PSoC4/CyLib.c **** 
 775              		.loc 1 2406 0
 776 0006 0F28     		cmp	r0, #15
 777 0008 02D9     		bls	.L57
2406:Generated_Source\PSoC4/CyLib.c **** 
 778              		.loc 1 2406 0 is_stmt 0 discriminator 1
 779 000a 0020     		movs	r0, #0
 780              	.LVL52:
 781 000c FFF7FEFF 		bl	CyHalt
 782              	.LVL53:
 783              	.L57:
2409:Generated_Source\PSoC4/CyLib.c **** 
 784              		.loc 1 2409 0 is_stmt 1
 785 0010 A400     		lsls	r4, r4, #2
 786 0012 8023     		movs	r3, #128
 787 0014 9B05     		lsls	r3, r3, #22
 788 0016 9C46     		mov	ip, r3
 789 0018 6444     		add	r4, r4, ip
 790 001a 2068     		ldr	r0, [r4]
ARM GAS  e:\temp\cc2tFLyS.s 			page 62


 791              	.LVL54:
2412:Generated_Source\PSoC4/CyLib.c **** 
 792              		.loc 1 2412 0
 793 001c 2560     		str	r5, [r4]
2415:Generated_Source\PSoC4/CyLib.c **** 
 794              		.loc 1 2415 0
 795              		@ sp needed
 796              	.LVL55:
 797 001e 70BD     		pop	{r4, r5, r6, pc}
 798              		.cfi_endproc
 799              	.LFE11:
 800              		.size	CyIntSetSysVector, .-CyIntSetSysVector
 801              		.section	.text.CyIntGetSysVector,"ax",%progbits
 802              		.align	2
 803              		.global	CyIntGetSysVector
 804              		.code	16
 805              		.thumb_func
 806              		.type	CyIntGetSysVector, %function
 807              	CyIntGetSysVector:
 808              	.LFB12:
2436:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 809              		.loc 1 2436 0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              	.LVL56:
 814 0000 10B5     		push	{r4, lr}
 815              		.cfi_def_cfa_offset 8
 816              		.cfi_offset 4, -8
 817              		.cfi_offset 14, -4
 818 0002 0400     		movs	r4, r0
 819              	.LVL57:
2439:Generated_Source\PSoC4/CyLib.c **** 
 820              		.loc 1 2439 0
 821 0004 0F28     		cmp	r0, #15
 822 0006 02D9     		bls	.L59
2439:Generated_Source\PSoC4/CyLib.c **** 
 823              		.loc 1 2439 0 is_stmt 0 discriminator 1
 824 0008 0020     		movs	r0, #0
 825              	.LVL58:
 826 000a FFF7FEFF 		bl	CyHalt
 827              	.LVL59:
 828              	.L59:
2441:Generated_Source\PSoC4/CyLib.c **** }
 829              		.loc 1 2441 0 is_stmt 1
 830 000e A400     		lsls	r4, r4, #2
 831 0010 8023     		movs	r3, #128
 832 0012 9B05     		lsls	r3, r3, #22
 833 0014 9C46     		mov	ip, r3
 834 0016 6444     		add	r4, r4, ip
 835 0018 2068     		ldr	r0, [r4]
2442:Generated_Source\PSoC4/CyLib.c **** 
 836              		.loc 1 2442 0
 837              		@ sp needed
 838 001a 10BD     		pop	{r4, pc}
 839              		.cfi_endproc
 840              	.LFE12:
ARM GAS  e:\temp\cc2tFLyS.s 			page 63


 841              		.size	CyIntGetSysVector, .-CyIntGetSysVector
 842              		.section	.text.CyIntSetVector,"ax",%progbits
 843              		.align	2
 844              		.global	CyIntSetVector
 845              		.code	16
 846              		.thumb_func
 847              		.type	CyIntSetVector, %function
 848              	CyIntSetVector:
 849              	.LFB13:
2458:Generated_Source\PSoC4/CyLib.c ****     cyisraddress oldIsr;
 850              		.loc 1 2458 0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 0
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854              	.LVL60:
 855 0000 70B5     		push	{r4, r5, r6, lr}
 856              		.cfi_def_cfa_offset 16
 857              		.cfi_offset 4, -16
 858              		.cfi_offset 5, -12
 859              		.cfi_offset 6, -8
 860              		.cfi_offset 14, -4
 861 0002 0400     		movs	r4, r0
 862 0004 0D00     		movs	r5, r1
 863              	.LVL61:
2462:Generated_Source\PSoC4/CyLib.c **** 
 864              		.loc 1 2462 0
 865 0006 1228     		cmp	r0, #18
 866 0008 02D9     		bls	.L61
2462:Generated_Source\PSoC4/CyLib.c **** 
 867              		.loc 1 2462 0 is_stmt 0 discriminator 1
 868 000a 0020     		movs	r0, #0
 869              	.LVL62:
 870 000c FFF7FEFF 		bl	CyHalt
 871              	.LVL63:
 872              	.L61:
2465:Generated_Source\PSoC4/CyLib.c **** 
 873              		.loc 1 2465 0 is_stmt 1
 874 0010 1034     		adds	r4, r4, #16
 875 0012 A400     		lsls	r4, r4, #2
 876 0014 8023     		movs	r3, #128
 877 0016 9B05     		lsls	r3, r3, #22
 878 0018 9C46     		mov	ip, r3
 879 001a 6444     		add	r4, r4, ip
 880 001c 2068     		ldr	r0, [r4]
 881              	.LVL64:
2468:Generated_Source\PSoC4/CyLib.c **** 
 882              		.loc 1 2468 0
 883 001e 2560     		str	r5, [r4]
2471:Generated_Source\PSoC4/CyLib.c **** 
 884              		.loc 1 2471 0
 885              		@ sp needed
 886              	.LVL65:
 887 0020 70BD     		pop	{r4, r5, r6, pc}
 888              		.cfi_endproc
 889              	.LFE13:
 890              		.size	CyIntSetVector, .-CyIntSetVector
 891 0022 C046     		.section	.text.CyIntGetVector,"ax",%progbits
ARM GAS  e:\temp\cc2tFLyS.s 			page 64


 892              		.align	2
 893              		.global	CyIntGetVector
 894              		.code	16
 895              		.thumb_func
 896              		.type	CyIntGetVector, %function
 897              	CyIntGetVector:
 898              	.LFB14:
2486:Generated_Source\PSoC4/CyLib.c ****     cyisraddress *ramVectorTable = (cyisraddress *) CY_INT_VECT_TABLE;
 899              		.loc 1 2486 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 0
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903              	.LVL66:
 904 0000 10B5     		push	{r4, lr}
 905              		.cfi_def_cfa_offset 8
 906              		.cfi_offset 4, -8
 907              		.cfi_offset 14, -4
 908 0002 0400     		movs	r4, r0
 909              	.LVL67:
2489:Generated_Source\PSoC4/CyLib.c **** 
 910              		.loc 1 2489 0
 911 0004 1228     		cmp	r0, #18
 912 0006 02D9     		bls	.L63
2489:Generated_Source\PSoC4/CyLib.c **** 
 913              		.loc 1 2489 0 is_stmt 0 discriminator 1
 914 0008 0020     		movs	r0, #0
 915              	.LVL68:
 916 000a FFF7FEFF 		bl	CyHalt
 917              	.LVL69:
 918              	.L63:
2491:Generated_Source\PSoC4/CyLib.c **** }
 919              		.loc 1 2491 0 is_stmt 1
 920 000e 1034     		adds	r4, r4, #16
 921 0010 A400     		lsls	r4, r4, #2
 922 0012 8023     		movs	r3, #128
 923 0014 9B05     		lsls	r3, r3, #22
 924 0016 9C46     		mov	ip, r3
 925 0018 6444     		add	r4, r4, ip
 926 001a 2068     		ldr	r0, [r4]
2492:Generated_Source\PSoC4/CyLib.c **** 
 927              		.loc 1 2492 0
 928              		@ sp needed
 929 001c 10BD     		pop	{r4, pc}
 930              		.cfi_endproc
 931              	.LFE14:
 932              		.size	CyIntGetVector, .-CyIntGetVector
 933 001e C046     		.section	.text.CyIntSetPriority,"ax",%progbits
 934              		.align	2
 935              		.global	CyIntSetPriority
 936              		.code	16
 937              		.thumb_func
 938              		.type	CyIntSetPriority, %function
 939              	CyIntSetPriority:
 940              	.LFB15:
2505:Generated_Source\PSoC4/CyLib.c ****     uint8 interruptState;
 941              		.loc 1 2505 0
 942              		.cfi_startproc
ARM GAS  e:\temp\cc2tFLyS.s 			page 65


 943              		@ args = 0, pretend = 0, frame = 0
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              	.LVL70:
 946 0000 70B5     		push	{r4, r5, r6, lr}
 947              		.cfi_def_cfa_offset 16
 948              		.cfi_offset 4, -16
 949              		.cfi_offset 5, -12
 950              		.cfi_offset 6, -8
 951              		.cfi_offset 14, -4
 952 0002 0400     		movs	r4, r0
 953 0004 0E00     		movs	r6, r1
2510:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 954              		.loc 1 2510 0
 955 0006 0329     		cmp	r1, #3
 956 0008 02D9     		bls	.L65
2510:Generated_Source\PSoC4/CyLib.c ****     CYASSERT(number < CY_NUM_INTERRUPTS);
 957              		.loc 1 2510 0 is_stmt 0 discriminator 1
 958 000a 0020     		movs	r0, #0
 959              	.LVL71:
 960 000c FFF7FEFF 		bl	CyHalt
 961              	.LVL72:
 962              	.L65:
2511:Generated_Source\PSoC4/CyLib.c **** 
 963              		.loc 1 2511 0 is_stmt 1
 964 0010 122C     		cmp	r4, #18
 965 0012 02D9     		bls	.L66
2511:Generated_Source\PSoC4/CyLib.c **** 
 966              		.loc 1 2511 0 is_stmt 0 discriminator 1
 967 0014 0020     		movs	r0, #0
 968 0016 FFF7FEFF 		bl	CyHalt
 969              	.LVL73:
 970              	.L66:
2513:Generated_Source\PSoC4/CyLib.c **** 
 971              		.loc 1 2513 0 is_stmt 1
 972 001a 0325     		movs	r5, #3
 973 001c 2540     		ands	r5, r4
 974 001e ED00     		lsls	r5, r5, #3
 975 0020 0635     		adds	r5, r5, #6
 976              	.LVL74:
2515:Generated_Source\PSoC4/CyLib.c **** 
 977              		.loc 1 2515 0
 978 0022 FFF7FEFF 		bl	CyEnterCriticalSection
 979              	.LVL75:
2517:Generated_Source\PSoC4/CyLib.c ****     value &= (uint32)(~((uint32)(CY_INT_PRIORITY_MASK << shift)));
 980              		.loc 1 2517 0
 981 0026 A408     		lsrs	r4, r4, #2
 982 0028 A400     		lsls	r4, r4, #2
 983 002a 074B     		ldr	r3, .L67
 984 002c 9C46     		mov	ip, r3
 985 002e 6444     		add	r4, r4, ip
 986 0030 2168     		ldr	r1, [r4]
 987              	.LVL76:
2518:Generated_Source\PSoC4/CyLib.c ****     value |= ((uint32)priority << shift);
 988              		.loc 1 2518 0
 989 0032 0323     		movs	r3, #3
 990 0034 AB40     		lsls	r3, r3, r5
 991 0036 9943     		bics	r1, r3
ARM GAS  e:\temp\cc2tFLyS.s 			page 66


 992              	.LVL77:
 993 0038 0B00     		movs	r3, r1
 994              	.LVL78:
2519:Generated_Source\PSoC4/CyLib.c ****     CY_INT_PRIORITY_REG(number) = value;
 995              		.loc 1 2519 0
 996 003a 3100     		movs	r1, r6
 997              	.LVL79:
 998 003c A940     		lsls	r1, r1, r5
 999 003e 1943     		orrs	r1, r3
 1000              	.LVL80:
2520:Generated_Source\PSoC4/CyLib.c **** 
 1001              		.loc 1 2520 0
 1002 0040 2160     		str	r1, [r4]
2522:Generated_Source\PSoC4/CyLib.c **** }
 1003              		.loc 1 2522 0
 1004 0042 FFF7FEFF 		bl	CyExitCriticalSection
 1005              	.LVL81:
2523:Generated_Source\PSoC4/CyLib.c **** 
 1006              		.loc 1 2523 0
 1007              		@ sp needed
 1008              	.LVL82:
 1009 0046 70BD     		pop	{r4, r5, r6, pc}
 1010              	.L68:
 1011              		.align	2
 1012              	.L67:
 1013 0048 00E400E0 		.word	-536812544
 1014              		.cfi_endproc
 1015              	.LFE15:
 1016              		.size	CyIntSetPriority, .-CyIntSetPriority
 1017              		.section	.text.CyIntGetPriority,"ax",%progbits
 1018              		.align	2
 1019              		.global	CyIntGetPriority
 1020              		.code	16
 1021              		.thumb_func
 1022              		.type	CyIntGetPriority, %function
 1023              	CyIntGetPriority:
 1024              	.LFB16:
2539:Generated_Source\PSoC4/CyLib.c ****     uint8 priority;
 1025              		.loc 1 2539 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 1029              	.LVL83:
 1030 0000 10B5     		push	{r4, lr}
 1031              		.cfi_def_cfa_offset 8
 1032              		.cfi_offset 4, -8
 1033              		.cfi_offset 14, -4
 1034 0002 0400     		movs	r4, r0
2542:Generated_Source\PSoC4/CyLib.c **** 
 1035              		.loc 1 2542 0
 1036 0004 1228     		cmp	r0, #18
 1037 0006 02D9     		bls	.L70
2542:Generated_Source\PSoC4/CyLib.c **** 
 1038              		.loc 1 2542 0 is_stmt 0 discriminator 1
 1039 0008 0020     		movs	r0, #0
 1040              	.LVL84:
 1041 000a FFF7FEFF 		bl	CyHalt
ARM GAS  e:\temp\cc2tFLyS.s 			page 67


 1042              	.LVL85:
 1043              	.L70:
2544:Generated_Source\PSoC4/CyLib.c **** 
 1044              		.loc 1 2544 0 is_stmt 1
 1045 000e A308     		lsrs	r3, r4, #2
 1046 0010 9B00     		lsls	r3, r3, #2
 1047 0012 054A     		ldr	r2, .L71
 1048 0014 9446     		mov	ip, r2
 1049 0016 6344     		add	r3, r3, ip
 1050 0018 1868     		ldr	r0, [r3]
 1051 001a 0323     		movs	r3, #3
 1052 001c 1C40     		ands	r4, r3
 1053 001e E400     		lsls	r4, r4, #3
 1054 0020 0634     		adds	r4, r4, #6
 1055 0022 E040     		lsrs	r0, r0, r4
 1056              	.LVL86:
2546:Generated_Source\PSoC4/CyLib.c **** }
 1057              		.loc 1 2546 0
 1058 0024 1840     		ands	r0, r3
 1059              	.LVL87:
2547:Generated_Source\PSoC4/CyLib.c **** 
 1060              		.loc 1 2547 0
 1061              		@ sp needed
 1062 0026 10BD     		pop	{r4, pc}
 1063              	.L72:
 1064              		.align	2
 1065              	.L71:
 1066 0028 00E400E0 		.word	-536812544
 1067              		.cfi_endproc
 1068              	.LFE16:
 1069              		.size	CyIntGetPriority, .-CyIntGetPriority
 1070              		.section	.text.CySoftwareReset,"ax",%progbits
 1071              		.align	2
 1072              		.global	CySoftwareReset
 1073              		.code	16
 1074              		.thumb_func
 1075              		.type	CySoftwareReset, %function
 1076              	CySoftwareReset:
 1077              	.LFB23:
2652:Generated_Source\PSoC4/CyLib.c **** 
2653:Generated_Source\PSoC4/CyLib.c **** 
2654:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2655:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySoftwareReset
2656:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2657:Generated_Source\PSoC4/CyLib.c **** *
2658:Generated_Source\PSoC4/CyLib.c **** *  Forces a software reset of the device.
2659:Generated_Source\PSoC4/CyLib.c **** *
2660:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2661:Generated_Source\PSoC4/CyLib.c **** void CySoftwareReset(void)
2662:Generated_Source\PSoC4/CyLib.c **** {
 1078              		.loc 1 2662 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082              		@ link register save eliminated.
2663:Generated_Source\PSoC4/CyLib.c ****     /***************************************************************************
2664:Generated_Source\PSoC4/CyLib.c ****     * Setting the system reset request bit. The vector key value must be written
ARM GAS  e:\temp\cc2tFLyS.s 			page 68


2665:Generated_Source\PSoC4/CyLib.c ****     * to the register, otherwise the register write is unpredictable.
2666:Generated_Source\PSoC4/CyLib.c ****     ***************************************************************************/
2667:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_AIRCR_REG = (CY_SYS_AIRCR_REG & (uint32)(~CY_SYS_AIRCR_VECTKEY_MASK)) |
 1083              		.loc 1 2667 0
 1084 0000 034A     		ldr	r2, .L74
 1085 0002 1368     		ldr	r3, [r2]
 1086 0004 1B04     		lsls	r3, r3, #16
 1087 0006 1B0C     		lsrs	r3, r3, #16
2668:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1088              		.loc 1 2668 0
 1089 0008 0249     		ldr	r1, .L74+4
 1090 000a 0B43     		orrs	r3, r1
2667:Generated_Source\PSoC4/CyLib.c ****                             CY_SYS_AIRCR_VECTKEY | CY_SYS_AIRCR_SYSRESETREQ;
 1091              		.loc 1 2667 0
 1092 000c 1360     		str	r3, [r2]
2669:Generated_Source\PSoC4/CyLib.c **** }
 1093              		.loc 1 2669 0
 1094              		@ sp needed
 1095 000e 7047     		bx	lr
 1096              	.L75:
 1097              		.align	2
 1098              	.L74:
 1099 0010 0CED00E0 		.word	-536810228
 1100 0014 0400FA05 		.word	100270084
 1101              		.cfi_endproc
 1102              	.LFE23:
 1103              		.size	CySoftwareReset, .-CySoftwareReset
 1104              		.section	.text.CyDelay,"ax",%progbits
 1105              		.align	2
 1106              		.global	CyDelay
 1107              		.code	16
 1108              		.thumb_func
 1109              		.type	CyDelay, %function
 1110              	CyDelay:
 1111              	.LFB24:
2670:Generated_Source\PSoC4/CyLib.c **** 
2671:Generated_Source\PSoC4/CyLib.c **** 
2672:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2673:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelay
2674:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2675:Generated_Source\PSoC4/CyLib.c **** *
2676:Generated_Source\PSoC4/CyLib.c **** *  Blocks for milliseconds.
2677:Generated_Source\PSoC4/CyLib.c **** *
2678:Generated_Source\PSoC4/CyLib.c **** *  \param milliseconds: number of milliseconds to delay.
2679:Generated_Source\PSoC4/CyLib.c **** *
2680:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2681:Generated_Source\PSoC4/CyLib.c **** void CyDelay(uint32 milliseconds)
2682:Generated_Source\PSoC4/CyLib.c **** {
 1112              		.loc 1 2682 0
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 0
 1115              		@ frame_needed = 0, uses_anonymous_args = 0
 1116              	.LVL88:
 1117 0000 10B5     		push	{r4, lr}
 1118              		.cfi_def_cfa_offset 8
 1119              		.cfi_offset 4, -8
 1120              		.cfi_offset 14, -4
ARM GAS  e:\temp\cc2tFLyS.s 			page 69


 1121 0002 0400     		movs	r4, r0
2683:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1122              		.loc 1 2683 0
 1123 0004 06E0     		b	.L77
 1124              	.LVL89:
 1125              	.L78:
2684:Generated_Source\PSoC4/CyLib.c ****     {
2685:Generated_Source\PSoC4/CyLib.c ****         /* This loop prevents overflow.
2686:Generated_Source\PSoC4/CyLib.c ****          * At 100MHz, milliseconds * cydelayFreqKhz overflows at about 42 seconds
2687:Generated_Source\PSoC4/CyLib.c ****          */
2688:Generated_Source\PSoC4/CyLib.c ****         CyDelayCycles(cydelay32kMs);
 1126              		.loc 1 2688 0
 1127 0006 084B     		ldr	r3, .L79
 1128 0008 5868     		ldr	r0, [r3, #4]
 1129 000a FFF7FEFF 		bl	CyDelayCycles
 1130              	.LVL90:
2689:Generated_Source\PSoC4/CyLib.c ****         milliseconds -= CY_DELAY_MS_OVERFLOW;
 1131              		.loc 1 2689 0
 1132 000e 074B     		ldr	r3, .L79+4
 1133 0010 9C46     		mov	ip, r3
 1134 0012 6444     		add	r4, r4, ip
 1135              	.LVL91:
 1136              	.L77:
2683:Generated_Source\PSoC4/CyLib.c ****     while (milliseconds > CY_DELAY_MS_OVERFLOW)
 1137              		.loc 1 2683 0
 1138 0014 8023     		movs	r3, #128
 1139 0016 1B02     		lsls	r3, r3, #8
 1140 0018 9C42     		cmp	r4, r3
 1141 001a F4D8     		bhi	.L78
2690:Generated_Source\PSoC4/CyLib.c ****     }
2691:Generated_Source\PSoC4/CyLib.c **** 
2692:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles(milliseconds * cydelayFreqKhz);
 1142              		.loc 1 2692 0
 1143 001c 024B     		ldr	r3, .L79
 1144 001e 9868     		ldr	r0, [r3, #8]
 1145 0020 6043     		muls	r0, r4
 1146 0022 FFF7FEFF 		bl	CyDelayCycles
 1147              	.LVL92:
2693:Generated_Source\PSoC4/CyLib.c **** }
 1148              		.loc 1 2693 0
 1149              		@ sp needed
 1150              	.LVL93:
 1151 0026 10BD     		pop	{r4, pc}
 1152              	.L80:
 1153              		.align	2
 1154              	.L79:
 1155 0028 00000000 		.word	.LANCHOR0
 1156 002c 0080FFFF 		.word	-32768
 1157              		.cfi_endproc
 1158              	.LFE24:
 1159              		.size	CyDelay, .-CyDelay
 1160              		.section	.text.CyDelayUs,"ax",%progbits
 1161              		.align	2
 1162              		.global	CyDelayUs
 1163              		.code	16
 1164              		.thumb_func
 1165              		.type	CyDelayUs, %function
ARM GAS  e:\temp\cc2tFLyS.s 			page 70


 1166              	CyDelayUs:
 1167              	.LFB25:
2694:Generated_Source\PSoC4/CyLib.c **** 
2695:Generated_Source\PSoC4/CyLib.c **** 
2696:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2697:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayUs
2698:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2699:Generated_Source\PSoC4/CyLib.c **** *  Blocks for microseconds.
2700:Generated_Source\PSoC4/CyLib.c **** *
2701:Generated_Source\PSoC4/CyLib.c **** *  \param microseconds: number of microseconds to delay.
2702:Generated_Source\PSoC4/CyLib.c **** *
2703:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2704:Generated_Source\PSoC4/CyLib.c **** void CyDelayUs(uint16 microseconds)
2705:Generated_Source\PSoC4/CyLib.c **** {
 1168              		.loc 1 2705 0
 1169              		.cfi_startproc
 1170              		@ args = 0, pretend = 0, frame = 0
 1171              		@ frame_needed = 0, uses_anonymous_args = 0
 1172              	.LVL94:
 1173 0000 10B5     		push	{r4, lr}
 1174              		.cfi_def_cfa_offset 8
 1175              		.cfi_offset 4, -8
 1176              		.cfi_offset 14, -4
2706:Generated_Source\PSoC4/CyLib.c ****     CyDelayCycles((uint32)microseconds * cydelayFreqMhz);
 1177              		.loc 1 2706 0
 1178 0002 034B     		ldr	r3, .L82
 1179 0004 1B7B     		ldrb	r3, [r3, #12]
 1180 0006 5843     		muls	r0, r3
 1181              	.LVL95:
 1182 0008 FFF7FEFF 		bl	CyDelayCycles
 1183              	.LVL96:
2707:Generated_Source\PSoC4/CyLib.c **** }
 1184              		.loc 1 2707 0
 1185              		@ sp needed
 1186 000c 10BD     		pop	{r4, pc}
 1187              	.L83:
 1188 000e C046     		.align	2
 1189              	.L82:
 1190 0010 00000000 		.word	.LANCHOR0
 1191              		.cfi_endproc
 1192              	.LFE25:
 1193              		.size	CyDelayUs, .-CyDelayUs
 1194              		.global	__aeabi_uidiv
 1195              		.section	.text.CyDelayFreq,"ax",%progbits
 1196              		.align	2
 1197              		.global	CyDelayFreq
 1198              		.code	16
 1199              		.thumb_func
 1200              		.type	CyDelayFreq, %function
 1201              	CyDelayFreq:
 1202              	.LFB26:
2708:Generated_Source\PSoC4/CyLib.c **** 
2709:Generated_Source\PSoC4/CyLib.c **** 
2710:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2711:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyDelayFreq
2712:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2713:Generated_Source\PSoC4/CyLib.c **** *  Sets clock frequency for CyDelay.
ARM GAS  e:\temp\cc2tFLyS.s 			page 71


2714:Generated_Source\PSoC4/CyLib.c **** *
2715:Generated_Source\PSoC4/CyLib.c **** *  \param freq: Frequency of bus clock in Hertz.
2716:Generated_Source\PSoC4/CyLib.c **** *
2717:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2718:Generated_Source\PSoC4/CyLib.c **** void CyDelayFreq(uint32 freq)
2719:Generated_Source\PSoC4/CyLib.c **** {
 1203              		.loc 1 2719 0
 1204              		.cfi_startproc
 1205              		@ args = 0, pretend = 0, frame = 0
 1206              		@ frame_needed = 0, uses_anonymous_args = 0
 1207              	.LVL97:
 1208 0000 70B5     		push	{r4, r5, r6, lr}
 1209              		.cfi_def_cfa_offset 16
 1210              		.cfi_offset 4, -16
 1211              		.cfi_offset 5, -12
 1212              		.cfi_offset 6, -8
 1213              		.cfi_offset 14, -4
2720:Generated_Source\PSoC4/CyLib.c ****     if (freq != 0u)
 1214              		.loc 1 2720 0
 1215 0002 0028     		cmp	r0, #0
 1216 0004 02D0     		beq	.L85
2721:Generated_Source\PSoC4/CyLib.c ****     {
2722:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = freq;
 1217              		.loc 1 2722 0
 1218 0006 0C4B     		ldr	r3, .L87
 1219 0008 1861     		str	r0, [r3, #16]
 1220 000a 02E0     		b	.L86
 1221              	.L85:
2723:Generated_Source\PSoC4/CyLib.c ****     }
2724:Generated_Source\PSoC4/CyLib.c ****     else
2725:Generated_Source\PSoC4/CyLib.c ****     {
2726:Generated_Source\PSoC4/CyLib.c ****         cydelayFreqHz = CYDEV_BCLK__SYSCLK__HZ;
 1222              		.loc 1 2726 0
 1223 000c 0B4A     		ldr	r2, .L87+4
 1224 000e 0A4B     		ldr	r3, .L87
 1225 0010 1A61     		str	r2, [r3, #16]
 1226              	.L86:
2727:Generated_Source\PSoC4/CyLib.c ****     }
2728:Generated_Source\PSoC4/CyLib.c **** 
2729:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqMhz = (uint8)((cydelayFreqHz + CY_DELAY_1M_MINUS_1_THRESHOLD) / CY_DELAY_1M_THRESHOL
 1227              		.loc 1 2729 0
 1228 0012 094C     		ldr	r4, .L87
 1229 0014 2569     		ldr	r5, [r4, #16]
 1230 0016 0A4B     		ldr	r3, .L87+8
 1231 0018 E818     		adds	r0, r5, r3
 1232              	.LVL98:
 1233 001a 0A49     		ldr	r1, .L87+12
 1234 001c FFF7FEFF 		bl	__aeabi_uidiv
 1235              	.LVL99:
 1236 0020 2073     		strb	r0, [r4, #12]
2730:Generated_Source\PSoC4/CyLib.c ****     cydelayFreqKhz = (cydelayFreqHz + CY_DELAY_1K_MINUS_1_THRESHOLD) / CY_DELAY_1K_THRESHOLD;
 1237              		.loc 1 2730 0
 1238 0022 094B     		ldr	r3, .L87+16
 1239 0024 E818     		adds	r0, r5, r3
 1240 0026 FA21     		movs	r1, #250
 1241 0028 8900     		lsls	r1, r1, #2
 1242 002a FFF7FEFF 		bl	__aeabi_uidiv
ARM GAS  e:\temp\cc2tFLyS.s 			page 72


 1243              	.LVL100:
 1244 002e A060     		str	r0, [r4, #8]
2731:Generated_Source\PSoC4/CyLib.c ****     cydelay32kMs   = CY_DELAY_MS_OVERFLOW * cydelayFreqKhz;
 1245              		.loc 1 2731 0
 1246 0030 C003     		lsls	r0, r0, #15
 1247 0032 6060     		str	r0, [r4, #4]
2732:Generated_Source\PSoC4/CyLib.c **** }
 1248              		.loc 1 2732 0
 1249              		@ sp needed
 1250 0034 70BD     		pop	{r4, r5, r6, pc}
 1251              	.L88:
 1252 0036 C046     		.align	2
 1253              	.L87:
 1254 0038 00000000 		.word	.LANCHOR0
 1255 003c 00366E01 		.word	24000000
 1256 0040 3F420F00 		.word	999999
 1257 0044 40420F00 		.word	1000000
 1258 0048 E7030000 		.word	999
 1259              		.cfi_endproc
 1260              	.LFE26:
 1261              		.size	CyDelayFreq, .-CyDelayFreq
 1262              		.section	.text.CySysTickStop,"ax",%progbits
 1263              		.align	2
 1264              		.global	CySysTickStop
 1265              		.code	16
 1266              		.thumb_func
 1267              		.type	CySysTickStop, %function
 1268              	CySysTickStop:
 1269              	.LFB30:
2733:Generated_Source\PSoC4/CyLib.c **** 
2734:Generated_Source\PSoC4/CyLib.c **** 
2735:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2736:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTick_Start
2737:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2738:Generated_Source\PSoC4/CyLib.c **** *
2739:Generated_Source\PSoC4/CyLib.c **** *  Starts the system timer (SysTick): configures SysTick to generate interrupt
2740:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms and enables the interrupt.
2741:Generated_Source\PSoC4/CyLib.c **** *
2742:Generated_Source\PSoC4/CyLib.c **** *  There are components (LIN, CapSense Gesture) that relies on the default 
2743:Generated_Source\PSoC4/CyLib.c **** *  interval (1 ms). And that changing the interval will negatively impact 
2744:Generated_Source\PSoC4/CyLib.c **** *  their functionality.
2745:Generated_Source\PSoC4/CyLib.c **** *
2746:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2747:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2748:Generated_Source\PSoC4/CyLib.c **** *
2749:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2750:Generated_Source\PSoC4/CyLib.c **** void CySysTickStart(void)
2751:Generated_Source\PSoC4/CyLib.c **** {
2752:Generated_Source\PSoC4/CyLib.c ****     if (0u == CySysTickInitVar)
2753:Generated_Source\PSoC4/CyLib.c ****     {
2754:Generated_Source\PSoC4/CyLib.c ****         CySysTickInit();
2755:Generated_Source\PSoC4/CyLib.c ****         CySysTickInitVar = 1u;
2756:Generated_Source\PSoC4/CyLib.c ****     }
2757:Generated_Source\PSoC4/CyLib.c **** 
2758:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnable();
2759:Generated_Source\PSoC4/CyLib.c **** }
2760:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  e:\temp\cc2tFLyS.s 			page 73


2761:Generated_Source\PSoC4/CyLib.c **** 
2762:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2763:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickInit
2764:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2765:Generated_Source\PSoC4/CyLib.c **** *
2766:Generated_Source\PSoC4/CyLib.c **** *  Initializes the callback addresses with pointers to NULL, associates the
2767:Generated_Source\PSoC4/CyLib.c **** *  SysTick system vector with the function that is responsible for calling
2768:Generated_Source\PSoC4/CyLib.c **** *  registered callback functions, configures SysTick timer to generate interrupt
2769:Generated_Source\PSoC4/CyLib.c **** *  every 1 ms.
2770:Generated_Source\PSoC4/CyLib.c **** *
2771:Generated_Source\PSoC4/CyLib.c **** *  The 1 ms interrupt interval is configured based on the frequency determined
2772:Generated_Source\PSoC4/CyLib.c **** *  by PSoC Creator at build time. If System clock frequency is changed in
2773:Generated_Source\PSoC4/CyLib.c **** *  runtime, the CyDelayFreq() with the appropriate parameter should be called.
2774:Generated_Source\PSoC4/CyLib.c **** *
2775:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2776:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2777:Generated_Source\PSoC4/CyLib.c **** *
2778:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2779:Generated_Source\PSoC4/CyLib.c **** void CySysTickInit(void)
2780:Generated_Source\PSoC4/CyLib.c **** {
2781:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
2782:Generated_Source\PSoC4/CyLib.c **** 
2783:Generated_Source\PSoC4/CyLib.c ****     for (i = 0u; i<CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
2784:Generated_Source\PSoC4/CyLib.c ****     {
2785:Generated_Source\PSoC4/CyLib.c ****         CySysTickCallbacks[i] = (void *) 0;
2786:Generated_Source\PSoC4/CyLib.c ****     }
2787:Generated_Source\PSoC4/CyLib.c **** 
2788:Generated_Source\PSoC4/CyLib.c ****     (void) CyIntSetSysVector(CY_INT_SYSTICK_IRQN, &CySysTickServiceCallbacks);
2789:Generated_Source\PSoC4/CyLib.c **** 
2790:Generated_Source\PSoC4/CyLib.c ****     #if(CY_SYSTICK_LFCLK_SOURCE)
2791:Generated_Source\PSoC4/CyLib.c ****         CySysTickSetClockSource(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK);
2792:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2793:Generated_Source\PSoC4/CyLib.c **** 
2794:Generated_Source\PSoC4/CyLib.c ****     CySysTickSetReload(cydelayFreqHz/1000u);
2795:Generated_Source\PSoC4/CyLib.c ****     CySysTickClear();
2796:Generated_Source\PSoC4/CyLib.c **** }
2797:Generated_Source\PSoC4/CyLib.c **** 
2798:Generated_Source\PSoC4/CyLib.c **** 
2799:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2800:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnable
2801:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2802:Generated_Source\PSoC4/CyLib.c **** *
2803:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick timer and its interrupt.
2804:Generated_Source\PSoC4/CyLib.c **** *
2805:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2806:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2807:Generated_Source\PSoC4/CyLib.c **** *
2808:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2809:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnable(void)
2810:Generated_Source\PSoC4/CyLib.c **** {
2811:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnableInterrupt();
2812:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE;
2813:Generated_Source\PSoC4/CyLib.c **** }
2814:Generated_Source\PSoC4/CyLib.c **** 
2815:Generated_Source\PSoC4/CyLib.c **** 
2816:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2817:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickStop
ARM GAS  e:\temp\cc2tFLyS.s 			page 74


2818:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2819:Generated_Source\PSoC4/CyLib.c **** *
2820:Generated_Source\PSoC4/CyLib.c **** *  Stops the system timer (SysTick).
2821:Generated_Source\PSoC4/CyLib.c **** *
2822:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2823:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2824:Generated_Source\PSoC4/CyLib.c **** *
2825:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2826:Generated_Source\PSoC4/CyLib.c **** void CySysTickStop(void)
2827:Generated_Source\PSoC4/CyLib.c **** {
 1270              		.loc 1 2827 0
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 0
 1273              		@ frame_needed = 0, uses_anonymous_args = 0
 1274              		@ link register save eliminated.
2828:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE));
 1275              		.loc 1 2828 0
 1276 0000 024A     		ldr	r2, .L90
 1277 0002 1368     		ldr	r3, [r2]
 1278 0004 0121     		movs	r1, #1
 1279 0006 8B43     		bics	r3, r1
 1280 0008 1360     		str	r3, [r2]
2829:Generated_Source\PSoC4/CyLib.c **** }
 1281              		.loc 1 2829 0
 1282              		@ sp needed
 1283 000a 7047     		bx	lr
 1284              	.L91:
 1285              		.align	2
 1286              	.L90:
 1287 000c 10E000E0 		.word	-536813552
 1288              		.cfi_endproc
 1289              	.LFE30:
 1290              		.size	CySysTickStop, .-CySysTickStop
 1291              		.section	.text.CySysTickEnableInterrupt,"ax",%progbits
 1292              		.align	2
 1293              		.global	CySysTickEnableInterrupt
 1294              		.code	16
 1295              		.thumb_func
 1296              		.type	CySysTickEnableInterrupt, %function
 1297              	CySysTickEnableInterrupt:
 1298              	.LFB31:
2830:Generated_Source\PSoC4/CyLib.c **** 
2831:Generated_Source\PSoC4/CyLib.c **** 
2832:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2833:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickEnableInterrupt
2834:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2835:Generated_Source\PSoC4/CyLib.c **** *
2836:Generated_Source\PSoC4/CyLib.c **** *  Enables the SysTick interrupt.
2837:Generated_Source\PSoC4/CyLib.c **** *
2838:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2839:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2840:Generated_Source\PSoC4/CyLib.c **** *
2841:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2842:Generated_Source\PSoC4/CyLib.c **** void CySysTickEnableInterrupt(void)
2843:Generated_Source\PSoC4/CyLib.c **** {
 1299              		.loc 1 2843 0
 1300              		.cfi_startproc
ARM GAS  e:\temp\cc2tFLyS.s 			page 75


 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 1303              		@ link register save eliminated.
2844:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE_INT;
 1304              		.loc 1 2844 0
 1305 0000 024A     		ldr	r2, .L93
 1306 0002 1168     		ldr	r1, [r2]
 1307 0004 0223     		movs	r3, #2
 1308 0006 0B43     		orrs	r3, r1
 1309 0008 1360     		str	r3, [r2]
2845:Generated_Source\PSoC4/CyLib.c **** }
 1310              		.loc 1 2845 0
 1311              		@ sp needed
 1312 000a 7047     		bx	lr
 1313              	.L94:
 1314              		.align	2
 1315              	.L93:
 1316 000c 10E000E0 		.word	-536813552
 1317              		.cfi_endproc
 1318              	.LFE31:
 1319              		.size	CySysTickEnableInterrupt, .-CySysTickEnableInterrupt
 1320              		.section	.text.CySysTickEnable,"ax",%progbits
 1321              		.align	2
 1322              		.global	CySysTickEnable
 1323              		.code	16
 1324              		.thumb_func
 1325              		.type	CySysTickEnable, %function
 1326              	CySysTickEnable:
 1327              	.LFB29:
2810:Generated_Source\PSoC4/CyLib.c ****     CySysTickEnableInterrupt();
 1328              		.loc 1 2810 0
 1329              		.cfi_startproc
 1330              		@ args = 0, pretend = 0, frame = 0
 1331              		@ frame_needed = 0, uses_anonymous_args = 0
 1332 0000 10B5     		push	{r4, lr}
 1333              		.cfi_def_cfa_offset 8
 1334              		.cfi_offset 4, -8
 1335              		.cfi_offset 14, -4
2811:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG |= CY_SYS_SYST_CSR_ENABLE;
 1336              		.loc 1 2811 0
 1337 0002 FFF7FEFF 		bl	CySysTickEnableInterrupt
 1338              	.LVL101:
2812:Generated_Source\PSoC4/CyLib.c **** }
 1339              		.loc 1 2812 0
 1340 0006 034A     		ldr	r2, .L96
 1341 0008 1168     		ldr	r1, [r2]
 1342 000a 0123     		movs	r3, #1
 1343 000c 0B43     		orrs	r3, r1
 1344 000e 1360     		str	r3, [r2]
2813:Generated_Source\PSoC4/CyLib.c **** 
 1345              		.loc 1 2813 0
 1346              		@ sp needed
 1347 0010 10BD     		pop	{r4, pc}
 1348              	.L97:
 1349 0012 C046     		.align	2
 1350              	.L96:
 1351 0014 10E000E0 		.word	-536813552
ARM GAS  e:\temp\cc2tFLyS.s 			page 76


 1352              		.cfi_endproc
 1353              	.LFE29:
 1354              		.size	CySysTickEnable, .-CySysTickEnable
 1355              		.section	.text.CySysTickDisableInterrupt,"ax",%progbits
 1356              		.align	2
 1357              		.global	CySysTickDisableInterrupt
 1358              		.code	16
 1359              		.thumb_func
 1360              		.type	CySysTickDisableInterrupt, %function
 1361              	CySysTickDisableInterrupt:
 1362              	.LFB32:
2846:Generated_Source\PSoC4/CyLib.c **** 
2847:Generated_Source\PSoC4/CyLib.c **** 
2848:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2849:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickDisableInterrupt
2850:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2851:Generated_Source\PSoC4/CyLib.c **** *
2852:Generated_Source\PSoC4/CyLib.c **** *  Disables the SysTick interrupt.
2853:Generated_Source\PSoC4/CyLib.c **** *
2854:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2855:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set
2856:Generated_Source\PSoC4/CyLib.c **** *
2857:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2858:Generated_Source\PSoC4/CyLib.c **** void CySysTickDisableInterrupt(void)
2859:Generated_Source\PSoC4/CyLib.c **** {
 1363              		.loc 1 2859 0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
2860:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CSR_REG &= ((uint32) ~(CY_SYS_SYST_CSR_ENABLE_INT));
 1368              		.loc 1 2860 0
 1369 0000 024A     		ldr	r2, .L99
 1370 0002 1368     		ldr	r3, [r2]
 1371 0004 0221     		movs	r1, #2
 1372 0006 8B43     		bics	r3, r1
 1373 0008 1360     		str	r3, [r2]
2861:Generated_Source\PSoC4/CyLib.c **** }
 1374              		.loc 1 2861 0
 1375              		@ sp needed
 1376 000a 7047     		bx	lr
 1377              	.L100:
 1378              		.align	2
 1379              	.L99:
 1380 000c 10E000E0 		.word	-536813552
 1381              		.cfi_endproc
 1382              	.LFE32:
 1383              		.size	CySysTickDisableInterrupt, .-CySysTickDisableInterrupt
 1384              		.section	.text.CySysTickSetReload,"ax",%progbits
 1385              		.align	2
 1386              		.global	CySysTickSetReload
 1387              		.code	16
 1388              		.thumb_func
 1389              		.type	CySysTickSetReload, %function
 1390              	CySysTickSetReload:
 1391              	.LFB33:
2862:Generated_Source\PSoC4/CyLib.c **** 
ARM GAS  e:\temp\cc2tFLyS.s 			page 77


2863:Generated_Source\PSoC4/CyLib.c **** 
2864:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2865:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetReload
2866:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2867:Generated_Source\PSoC4/CyLib.c **** *
2868:Generated_Source\PSoC4/CyLib.c **** *  Sets value the counter is set to on startup and after it reaches zero. This
2869:Generated_Source\PSoC4/CyLib.c **** *  function do not change or reset current sysTick counter value, so it should
2870:Generated_Source\PSoC4/CyLib.c **** *  be cleared using CySysTickClear() API.
2871:Generated_Source\PSoC4/CyLib.c **** *
2872:Generated_Source\PSoC4/CyLib.c **** *  \param value: Valid range [0x0-0x00FFFFFF]. Counter reset value
2873:Generated_Source\PSoC4/CyLib.c **** *
2874:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2875:Generated_Source\PSoC4/CyLib.c **** void CySysTickSetReload(uint32 value)
2876:Generated_Source\PSoC4/CyLib.c **** {
 1392              		.loc 1 2876 0
 1393              		.cfi_startproc
 1394              		@ args = 0, pretend = 0, frame = 0
 1395              		@ frame_needed = 0, uses_anonymous_args = 0
 1396              		@ link register save eliminated.
 1397              	.LVL102:
2877:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_RVR_REG = (value & CY_SYS_SYST_RVR_CNT_MASK);
 1398              		.loc 1 2877 0
 1399 0000 0002     		lsls	r0, r0, #8
 1400              	.LVL103:
 1401 0002 000A     		lsrs	r0, r0, #8
 1402 0004 014B     		ldr	r3, .L102
 1403 0006 1860     		str	r0, [r3]
2878:Generated_Source\PSoC4/CyLib.c **** }
 1404              		.loc 1 2878 0
 1405              		@ sp needed
 1406 0008 7047     		bx	lr
 1407              	.L103:
 1408 000a C046     		.align	2
 1409              	.L102:
 1410 000c 14E000E0 		.word	-536813548
 1411              		.cfi_endproc
 1412              	.LFE33:
 1413              		.size	CySysTickSetReload, .-CySysTickSetReload
 1414              		.section	.text.CySysTickGetReload,"ax",%progbits
 1415              		.align	2
 1416              		.global	CySysTickGetReload
 1417              		.code	16
 1418              		.thumb_func
 1419              		.type	CySysTickGetReload, %function
 1420              	CySysTickGetReload:
 1421              	.LFB34:
2879:Generated_Source\PSoC4/CyLib.c **** 
2880:Generated_Source\PSoC4/CyLib.c **** 
2881:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2882:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetReload
2883:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2884:Generated_Source\PSoC4/CyLib.c **** *
2885:Generated_Source\PSoC4/CyLib.c **** *  Gets value the counter is set to on startup and after it reaches zero.
2886:Generated_Source\PSoC4/CyLib.c **** *
2887:Generated_Source\PSoC4/CyLib.c **** * \return
2888:Generated_Source\PSoC4/CyLib.c **** *  Counter reset value.
2889:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  e:\temp\cc2tFLyS.s 			page 78


2890:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2891:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetReload(void)
2892:Generated_Source\PSoC4/CyLib.c **** {
 1422              		.loc 1 2892 0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 0
 1425              		@ frame_needed = 0, uses_anonymous_args = 0
 1426              		@ link register save eliminated.
2893:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_RVR_REG & CY_SYS_SYST_RVR_CNT_MASK);
 1427              		.loc 1 2893 0
 1428 0000 024B     		ldr	r3, .L105
 1429 0002 1868     		ldr	r0, [r3]
 1430 0004 0002     		lsls	r0, r0, #8
 1431 0006 000A     		lsrs	r0, r0, #8
2894:Generated_Source\PSoC4/CyLib.c **** }
 1432              		.loc 1 2894 0
 1433              		@ sp needed
 1434 0008 7047     		bx	lr
 1435              	.L106:
 1436 000a C046     		.align	2
 1437              	.L105:
 1438 000c 14E000E0 		.word	-536813548
 1439              		.cfi_endproc
 1440              	.LFE34:
 1441              		.size	CySysTickGetReload, .-CySysTickGetReload
 1442              		.section	.text.CySysTickGetValue,"ax",%progbits
 1443              		.align	2
 1444              		.global	CySysTickGetValue
 1445              		.code	16
 1446              		.thumb_func
 1447              		.type	CySysTickGetValue, %function
 1448              	CySysTickGetValue:
 1449              	.LFB35:
2895:Generated_Source\PSoC4/CyLib.c **** 
2896:Generated_Source\PSoC4/CyLib.c **** 
2897:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2898:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetValue
2899:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2900:Generated_Source\PSoC4/CyLib.c **** *
2901:Generated_Source\PSoC4/CyLib.c **** *  Gets current SysTick counter value.
2902:Generated_Source\PSoC4/CyLib.c **** *
2903:Generated_Source\PSoC4/CyLib.c **** * \return
2904:Generated_Source\PSoC4/CyLib.c **** *  Current SysTick counter value
2905:Generated_Source\PSoC4/CyLib.c **** *
2906:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2907:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetValue(void)
2908:Generated_Source\PSoC4/CyLib.c **** {
 1450              		.loc 1 2908 0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 0
 1453              		@ frame_needed = 0, uses_anonymous_args = 0
 1454              		@ link register save eliminated.
2909:Generated_Source\PSoC4/CyLib.c ****     return(CY_SYS_SYST_CVR_REG & CY_SYS_SYST_CVR_CNT_MASK);
 1455              		.loc 1 2909 0
 1456 0000 024B     		ldr	r3, .L108
 1457 0002 1868     		ldr	r0, [r3]
 1458 0004 0002     		lsls	r0, r0, #8
ARM GAS  e:\temp\cc2tFLyS.s 			page 79


 1459 0006 000A     		lsrs	r0, r0, #8
2910:Generated_Source\PSoC4/CyLib.c **** }
 1460              		.loc 1 2910 0
 1461              		@ sp needed
 1462 0008 7047     		bx	lr
 1463              	.L109:
 1464 000a C046     		.align	2
 1465              	.L108:
 1466 000c 18E000E0 		.word	-536813544
 1467              		.cfi_endproc
 1468              	.LFE35:
 1469              		.size	CySysTickGetValue, .-CySysTickGetValue
 1470              		.section	.text.CySysTickSetClockSource,"ax",%progbits
 1471              		.align	2
 1472              		.global	CySysTickSetClockSource
 1473              		.code	16
 1474              		.thumb_func
 1475              		.type	CySysTickSetClockSource, %function
 1476              	CySysTickSetClockSource:
 1477              	.LFB36:
2911:Generated_Source\PSoC4/CyLib.c **** 
2912:Generated_Source\PSoC4/CyLib.c **** 
2913:Generated_Source\PSoC4/CyLib.c **** #if(CY_SYSTICK_LFCLK_SOURCE)
2914:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2915:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickSetClockSource
2916:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2917:Generated_Source\PSoC4/CyLib.c ****     *
2918:Generated_Source\PSoC4/CyLib.c ****     *  Sets the clock source for the SysTick counter.
2919:Generated_Source\PSoC4/CyLib.c ****     *
2920:Generated_Source\PSoC4/CyLib.c ****     *  Clears SysTick count flag if it was set. If clock source is not ready this
2921:Generated_Source\PSoC4/CyLib.c ****     *  function call will have no effect. After changing clock source to the low
2922:Generated_Source\PSoC4/CyLib.c ****     *  frequency clock the counter and reload register values will remain unchanged
2923:Generated_Source\PSoC4/CyLib.c ****     *  so time to the interrupt will be significantly longer and vice versa.
2924:Generated_Source\PSoC4/CyLib.c ****     *
2925:Generated_Source\PSoC4/CyLib.c ****     *  The changing of SysTick clock source and\or its frequency will change 
2926:Generated_Source\PSoC4/CyLib.c ****     *  the interrupt interval and that CySysTickSetReload() should be 
2927:Generated_Source\PSoC4/CyLib.c ****     *  called to compensate this change.    
2928:Generated_Source\PSoC4/CyLib.c ****     *
2929:Generated_Source\PSoC4/CyLib.c ****     *  The function is not available on PSoC 4000, PSoC 4100, and PSoC 42000
2930:Generated_Source\PSoC4/CyLib.c ****     *  devices. The SysTick timer clocked by the System clock on these devices.
2931:Generated_Source\PSoC4/CyLib.c ****     *
2932:Generated_Source\PSoC4/CyLib.c ****     *  \param clockSource Clock source for SysTick counter
2933:Generated_Source\PSoC4/CyLib.c ****     *         Define                     Clock Source
2934:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by the CPU clock.
2935:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2936:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2937:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
2938:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2939:Generated_Source\PSoC4/CyLib.c ****     void CySysTickSetClockSource(uint32 clockSource)
2940:Generated_Source\PSoC4/CyLib.c ****     {
 1478              		.loc 1 2940 0
 1479              		.cfi_startproc
 1480              		@ args = 0, pretend = 0, frame = 0
 1481              		@ frame_needed = 0, uses_anonymous_args = 0
 1482              		@ link register save eliminated.
 1483              	.LVL104:
2941:Generated_Source\PSoC4/CyLib.c ****         if (clockSource == CY_SYS_SYST_CSR_CLK_SRC_SYSCLK)
ARM GAS  e:\temp\cc2tFLyS.s 			page 80


 1484              		.loc 1 2941 0
 1485 0000 0128     		cmp	r0, #1
 1486 0002 05D1     		bne	.L111
2942:Generated_Source\PSoC4/CyLib.c ****         {
2943:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG |= (uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SYST_CSR_CLK_S
 1487              		.loc 1 2943 0
 1488 0004 054A     		ldr	r2, .L113
 1489 0006 1168     		ldr	r1, [r2]
 1490 0008 0423     		movs	r3, #4
 1491 000a 0B43     		orrs	r3, r1
 1492 000c 1360     		str	r3, [r2]
 1493 000e 04E0     		b	.L110
 1494              	.L111:
2944:Generated_Source\PSoC4/CyLib.c ****         }
2945:Generated_Source\PSoC4/CyLib.c ****         else
2946:Generated_Source\PSoC4/CyLib.c ****         {
2947:Generated_Source\PSoC4/CyLib.c ****             CY_SYS_SYST_CSR_REG &= ((uint32) ~((uint32)(CY_SYS_SYST_CSR_CLK_SRC_SYSCLK << CY_SYS_SY
 1495              		.loc 1 2947 0
 1496 0010 024A     		ldr	r2, .L113
 1497 0012 1368     		ldr	r3, [r2]
 1498 0014 0421     		movs	r1, #4
 1499 0016 8B43     		bics	r3, r1
 1500 0018 1360     		str	r3, [r2]
 1501              	.L110:
2948:Generated_Source\PSoC4/CyLib.c ****         }
2949:Generated_Source\PSoC4/CyLib.c ****     }
 1502              		.loc 1 2949 0
 1503              		@ sp needed
 1504 001a 7047     		bx	lr
 1505              	.L114:
 1506              		.align	2
 1507              	.L113:
 1508 001c 10E000E0 		.word	-536813552
 1509              		.cfi_endproc
 1510              	.LFE36:
 1511              		.size	CySysTickSetClockSource, .-CySysTickSetClockSource
 1512              		.section	.text.CySysTickGetClockSource,"ax",%progbits
 1513              		.align	2
 1514              		.global	CySysTickGetClockSource
 1515              		.code	16
 1516              		.thumb_func
 1517              		.type	CySysTickGetClockSource, %function
 1518              	CySysTickGetClockSource:
 1519              	.LFB37:
2950:Generated_Source\PSoC4/CyLib.c **** 
2951:Generated_Source\PSoC4/CyLib.c ****     
2952:Generated_Source\PSoC4/CyLib.c ****     /*******************************************************************************
2953:Generated_Source\PSoC4/CyLib.c ****     * Function Name: CySysTickGetClockSource
2954:Generated_Source\PSoC4/CyLib.c ****     ****************************************************************************//**
2955:Generated_Source\PSoC4/CyLib.c ****     *
2956:Generated_Source\PSoC4/CyLib.c ****     *  Returns the current clock source of the SysTick counter.
2957:Generated_Source\PSoC4/CyLib.c ****     *
2958:Generated_Source\PSoC4/CyLib.c ****     *  \return 
2959:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_SYSCLK     SysTick is clocked by CPU clock.
2960:Generated_Source\PSoC4/CyLib.c ****     *   CY_SYS_SYST_CSR_CLK_SRC_LFCLK      SysTick is clocked by the low frequency
2961:Generated_Source\PSoC4/CyLib.c ****     *                                      clock. (ILO 100 KHz for PSoC 5LP, and
2962:Generated_Source\PSoC4/CyLib.c ****     *                                      LFCLK for PSoC 4).
ARM GAS  e:\temp\cc2tFLyS.s 			page 81


2963:Generated_Source\PSoC4/CyLib.c ****     *******************************************************************************/
2964:Generated_Source\PSoC4/CyLib.c ****     uint32 CySysTickGetClockSource(void)
2965:Generated_Source\PSoC4/CyLib.c ****     {
 1520              		.loc 1 2965 0
 1521              		.cfi_startproc
 1522              		@ args = 0, pretend = 0, frame = 0
 1523              		@ frame_needed = 0, uses_anonymous_args = 0
 1524              		@ link register save eliminated.
2966:Generated_Source\PSoC4/CyLib.c ****         return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_CLK_SOURCE_SHIFT) & CY_SYS_SYST_CSR_CLK_SRC
 1525              		.loc 1 2966 0
 1526 0000 024B     		ldr	r3, .L116
 1527 0002 1868     		ldr	r0, [r3]
 1528 0004 8008     		lsrs	r0, r0, #2
 1529 0006 0123     		movs	r3, #1
 1530 0008 1840     		ands	r0, r3
2967:Generated_Source\PSoC4/CyLib.c ****     }
 1531              		.loc 1 2967 0
 1532              		@ sp needed
 1533 000a 7047     		bx	lr
 1534              	.L117:
 1535              		.align	2
 1536              	.L116:
 1537 000c 10E000E0 		.word	-536813552
 1538              		.cfi_endproc
 1539              	.LFE37:
 1540              		.size	CySysTickGetClockSource, .-CySysTickGetClockSource
 1541              		.section	.text.CySysTickGetCountFlag,"ax",%progbits
 1542              		.align	2
 1543              		.global	CySysTickGetCountFlag
 1544              		.code	16
 1545              		.thumb_func
 1546              		.type	CySysTickGetCountFlag, %function
 1547              	CySysTickGetCountFlag:
 1548              	.LFB38:
2968:Generated_Source\PSoC4/CyLib.c ****     
2969:Generated_Source\PSoC4/CyLib.c **** #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
2970:Generated_Source\PSoC4/CyLib.c **** 
2971:Generated_Source\PSoC4/CyLib.c **** 
2972:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2973:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCountFlag
2974:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2975:Generated_Source\PSoC4/CyLib.c **** *
2976:Generated_Source\PSoC4/CyLib.c **** *  The count flag is set once SysTick counter reaches zero.
2977:Generated_Source\PSoC4/CyLib.c **** *  The flag cleared on read.
2978:Generated_Source\PSoC4/CyLib.c **** *
2979:Generated_Source\PSoC4/CyLib.c **** * \return
2980:Generated_Source\PSoC4/CyLib.c ****     *  Returns non-zero value if flag is set, otherwise zero is returned.
2981:Generated_Source\PSoC4/CyLib.c **** *
2982:Generated_Source\PSoC4/CyLib.c **** *
2983:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
2984:Generated_Source\PSoC4/CyLib.c **** *  Clears SysTick count flag if it was set.
2985:Generated_Source\PSoC4/CyLib.c **** *
2986:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
2987:Generated_Source\PSoC4/CyLib.c **** uint32 CySysTickGetCountFlag(void)
2988:Generated_Source\PSoC4/CyLib.c **** {
 1549              		.loc 1 2988 0
 1550              		.cfi_startproc
ARM GAS  e:\temp\cc2tFLyS.s 			page 82


 1551              		@ args = 0, pretend = 0, frame = 0
 1552              		@ frame_needed = 0, uses_anonymous_args = 0
 1553              		@ link register save eliminated.
2989:Generated_Source\PSoC4/CyLib.c ****     return ((CY_SYS_SYST_CSR_REG >> CY_SYS_SYST_CSR_COUNTFLAG_SHIFT) & 0x01u);
 1554              		.loc 1 2989 0
 1555 0000 024B     		ldr	r3, .L119
 1556 0002 1868     		ldr	r0, [r3]
 1557 0004 000C     		lsrs	r0, r0, #16
 1558 0006 0123     		movs	r3, #1
 1559 0008 1840     		ands	r0, r3
2990:Generated_Source\PSoC4/CyLib.c **** }
 1560              		.loc 1 2990 0
 1561              		@ sp needed
 1562 000a 7047     		bx	lr
 1563              	.L120:
 1564              		.align	2
 1565              	.L119:
 1566 000c 10E000E0 		.word	-536813552
 1567              		.cfi_endproc
 1568              	.LFE38:
 1569              		.size	CySysTickGetCountFlag, .-CySysTickGetCountFlag
 1570              		.section	.text.CySysTickServiceCallbacks,"ax",%progbits
 1571              		.align	2
 1572              		.code	16
 1573              		.thumb_func
 1574              		.type	CySysTickServiceCallbacks, %function
 1575              	CySysTickServiceCallbacks:
 1576              	.LFB42:
2991:Generated_Source\PSoC4/CyLib.c **** 
2992:Generated_Source\PSoC4/CyLib.c **** 
2993:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
2994:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickClear
2995:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
2996:Generated_Source\PSoC4/CyLib.c **** *
2997:Generated_Source\PSoC4/CyLib.c **** *  Clears the SysTick counter for well-defined startup.
2998:Generated_Source\PSoC4/CyLib.c **** *
2999:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3000:Generated_Source\PSoC4/CyLib.c **** void CySysTickClear(void)
3001:Generated_Source\PSoC4/CyLib.c **** {
3002:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CVR_REG = 0u;
3003:Generated_Source\PSoC4/CyLib.c **** }
3004:Generated_Source\PSoC4/CyLib.c **** 
3005:Generated_Source\PSoC4/CyLib.c **** 
3006:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3007:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickSetCallback
3008:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3009:Generated_Source\PSoC4/CyLib.c **** *
3010:Generated_Source\PSoC4/CyLib.c **** *  This function allows up to five user-defined interrupt service routine
3011:Generated_Source\PSoC4/CyLib.c **** *  functions to be associated with the SysTick interrupt. These are specified
3012:Generated_Source\PSoC4/CyLib.c **** *  through the use of pointers to the function.
3013:Generated_Source\PSoC4/CyLib.c **** *
3014:Generated_Source\PSoC4/CyLib.c **** *  To set a custom callback function without the overhead of the system provided
3015:Generated_Source\PSoC4/CyLib.c **** *  one, use CyIntSetSysVector(CY_INT_SYSTICK_IRQN, cyisraddress <address>),
3016:Generated_Source\PSoC4/CyLib.c **** *  where <address> is address of the custom defined interrupt service routine.
3017:Generated_Source\PSoC4/CyLib.c **** *  Note: a custom callback function overrides the system defined callback
3018:Generated_Source\PSoC4/CyLib.c **** *  functions.
3019:Generated_Source\PSoC4/CyLib.c **** *
ARM GAS  e:\temp\cc2tFLyS.s 			page 83


3020:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of the callback function addresses to be set. The valid
3021:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
3022:Generated_Source\PSoC4/CyLib.c **** *
3023:Generated_Source\PSoC4/CyLib.c **** *  void(*CallbackFunction(void): A pointer to the function that will be
3024:Generated_Source\PSoC4/CyLib.c **** *                                associated with the SysTick ISR for the
3025:Generated_Source\PSoC4/CyLib.c **** *                                specified number.
3026:Generated_Source\PSoC4/CyLib.c **** *
3027:Generated_Source\PSoC4/CyLib.c **** * \return
3028:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the previous callback function.
3029:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not set.
3030:Generated_Source\PSoC4/CyLib.c **** *
3031:Generated_Source\PSoC4/CyLib.c **** * \sideeffect
3032:Generated_Source\PSoC4/CyLib.c **** *  The registered callback functions will be executed in the interrupt.
3033:Generated_Source\PSoC4/CyLib.c **** *
3034:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3035:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickSetCallback(uint32 number, cySysTickCallback function)
3036:Generated_Source\PSoC4/CyLib.c **** {
3037:Generated_Source\PSoC4/CyLib.c ****     cySysTickCallback retVal;
3038:Generated_Source\PSoC4/CyLib.c **** 
3039:Generated_Source\PSoC4/CyLib.c ****     retVal = CySysTickCallbacks[number];
3040:Generated_Source\PSoC4/CyLib.c ****     CySysTickCallbacks[number] = function;
3041:Generated_Source\PSoC4/CyLib.c ****     return (retVal);
3042:Generated_Source\PSoC4/CyLib.c **** }
3043:Generated_Source\PSoC4/CyLib.c **** 
3044:Generated_Source\PSoC4/CyLib.c **** 
3045:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3046:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickGetCallback
3047:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3048:Generated_Source\PSoC4/CyLib.c **** *
3049:Generated_Source\PSoC4/CyLib.c **** *  The function get the specified callback pointer.
3050:Generated_Source\PSoC4/CyLib.c **** *
3051:Generated_Source\PSoC4/CyLib.c **** *  \param number: The number of callback function address to get. The valid
3052:Generated_Source\PSoC4/CyLib.c **** *          range is from 0 to 4.
3053:Generated_Source\PSoC4/CyLib.c **** *
3054:Generated_Source\PSoC4/CyLib.c **** * \return
3055:Generated_Source\PSoC4/CyLib.c **** *  Returns the address of the specified callback function.
3056:Generated_Source\PSoC4/CyLib.c **** *  The NULL is returned if the specified address in not initialized.
3057:Generated_Source\PSoC4/CyLib.c **** *
3058:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3059:Generated_Source\PSoC4/CyLib.c **** cySysTickCallback CySysTickGetCallback(uint32 number)
3060:Generated_Source\PSoC4/CyLib.c **** {
3061:Generated_Source\PSoC4/CyLib.c ****     return ((cySysTickCallback) CySysTickCallbacks[number]);
3062:Generated_Source\PSoC4/CyLib.c **** }
3063:Generated_Source\PSoC4/CyLib.c **** 
3064:Generated_Source\PSoC4/CyLib.c **** 
3065:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3066:Generated_Source\PSoC4/CyLib.c **** * Function Name: CySysTickServiceCallbacks
3067:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3068:Generated_Source\PSoC4/CyLib.c **** *
3069:Generated_Source\PSoC4/CyLib.c **** *  System Tick timer interrupt routine
3070:Generated_Source\PSoC4/CyLib.c **** *
3071:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3072:Generated_Source\PSoC4/CyLib.c **** static void CySysTickServiceCallbacks(void)
3073:Generated_Source\PSoC4/CyLib.c **** {
 1577              		.loc 1 3073 0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 0
ARM GAS  e:\temp\cc2tFLyS.s 			page 84


 1580              		@ frame_needed = 0, uses_anonymous_args = 0
 1581 0000 10B5     		push	{r4, lr}
 1582              		.cfi_def_cfa_offset 8
 1583              		.cfi_offset 4, -8
 1584              		.cfi_offset 14, -4
3074:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
3075:Generated_Source\PSoC4/CyLib.c **** 
3076:Generated_Source\PSoC4/CyLib.c ****     /* Verify that tick timer flag was set */
3077:Generated_Source\PSoC4/CyLib.c ****     if (1u == CySysTickGetCountFlag())
 1585              		.loc 1 3077 0
 1586 0002 FFF7FEFF 		bl	CySysTickGetCountFlag
 1587              	.LVL105:
 1588 0006 0128     		cmp	r0, #1
 1589 0008 0BD1     		bne	.L121
 1590 000a 07E0     		b	.L126
 1591              	.LVL106:
 1592              	.L125:
3078:Generated_Source\PSoC4/CyLib.c ****     {
3079:Generated_Source\PSoC4/CyLib.c ****         for (i=0u; i < CY_SYS_SYST_NUM_OF_CALLBACKS; i++)
3080:Generated_Source\PSoC4/CyLib.c ****         {
3081:Generated_Source\PSoC4/CyLib.c ****             if (CySysTickCallbacks[i] != (void *) 0)
 1593              		.loc 1 3081 0
 1594 000c A300     		lsls	r3, r4, #2
 1595 000e 054A     		ldr	r2, .L127
 1596 0010 9B58     		ldr	r3, [r3, r2]
 1597 0012 002B     		cmp	r3, #0
 1598 0014 00D0     		beq	.L124
3082:Generated_Source\PSoC4/CyLib.c ****             {
3083:Generated_Source\PSoC4/CyLib.c ****                 (void)(CySysTickCallbacks[i])();
 1599              		.loc 1 3083 0
 1600 0016 9847     		blx	r3
 1601              	.LVL107:
 1602              	.L124:
3079:Generated_Source\PSoC4/CyLib.c ****         {
 1603              		.loc 1 3079 0 discriminator 2
 1604 0018 0134     		adds	r4, r4, #1
 1605              	.LVL108:
 1606 001a 00E0     		b	.L122
 1607              	.LVL109:
 1608              	.L126:
 1609 001c 0024     		movs	r4, #0
 1610              	.L122:
 1611              	.LVL110:
3079:Generated_Source\PSoC4/CyLib.c ****         {
 1612              		.loc 1 3079 0 is_stmt 0 discriminator 1
 1613 001e 042C     		cmp	r4, #4
 1614 0020 F4D9     		bls	.L125
 1615              	.LVL111:
 1616              	.L121:
3084:Generated_Source\PSoC4/CyLib.c ****             }
3085:Generated_Source\PSoC4/CyLib.c ****         }
3086:Generated_Source\PSoC4/CyLib.c ****     }
3087:Generated_Source\PSoC4/CyLib.c **** }
 1617              		.loc 1 3087 0 is_stmt 1
 1618              		@ sp needed
 1619 0022 10BD     		pop	{r4, pc}
 1620              	.L128:
ARM GAS  e:\temp\cc2tFLyS.s 			page 85


 1621              		.align	2
 1622              	.L127:
 1623 0024 00000000 		.word	.LANCHOR1
 1624              		.cfi_endproc
 1625              	.LFE42:
 1626              		.size	CySysTickServiceCallbacks, .-CySysTickServiceCallbacks
 1627              		.section	.text.CySysTickClear,"ax",%progbits
 1628              		.align	2
 1629              		.global	CySysTickClear
 1630              		.code	16
 1631              		.thumb_func
 1632              		.type	CySysTickClear, %function
 1633              	CySysTickClear:
 1634              	.LFB39:
3001:Generated_Source\PSoC4/CyLib.c ****     CY_SYS_SYST_CVR_REG = 0u;
 1635              		.loc 1 3001 0
 1636              		.cfi_startproc
 1637              		@ args = 0, pretend = 0, frame = 0
 1638              		@ frame_needed = 0, uses_anonymous_args = 0
 1639              		@ link register save eliminated.
3002:Generated_Source\PSoC4/CyLib.c **** }
 1640              		.loc 1 3002 0
 1641 0000 0022     		movs	r2, #0
 1642 0002 014B     		ldr	r3, .L130
 1643 0004 1A60     		str	r2, [r3]
3003:Generated_Source\PSoC4/CyLib.c **** 
 1644              		.loc 1 3003 0
 1645              		@ sp needed
 1646 0006 7047     		bx	lr
 1647              	.L131:
 1648              		.align	2
 1649              	.L130:
 1650 0008 18E000E0 		.word	-536813544
 1651              		.cfi_endproc
 1652              	.LFE39:
 1653              		.size	CySysTickClear, .-CySysTickClear
 1654              		.section	.text.CySysTickInit,"ax",%progbits
 1655              		.align	2
 1656              		.global	CySysTickInit
 1657              		.code	16
 1658              		.thumb_func
 1659              		.type	CySysTickInit, %function
 1660              	CySysTickInit:
 1661              	.LFB28:
2780:Generated_Source\PSoC4/CyLib.c ****     uint32 i;
 1662              		.loc 1 2780 0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 0
 1665              		@ frame_needed = 0, uses_anonymous_args = 0
 1666 0000 10B5     		push	{r4, lr}
 1667              		.cfi_def_cfa_offset 8
 1668              		.cfi_offset 4, -8
 1669              		.cfi_offset 14, -4
 1670              	.LVL112:
2783:Generated_Source\PSoC4/CyLib.c ****     {
 1671              		.loc 1 2783 0
 1672 0002 0023     		movs	r3, #0
ARM GAS  e:\temp\cc2tFLyS.s 			page 86


 1673 0004 04E0     		b	.L133
 1674              	.LVL113:
 1675              	.L134:
2785:Generated_Source\PSoC4/CyLib.c ****     }
 1676              		.loc 1 2785 0 discriminator 3
 1677 0006 9900     		lsls	r1, r3, #2
 1678 0008 0020     		movs	r0, #0
 1679 000a 0B4A     		ldr	r2, .L135
 1680 000c 8850     		str	r0, [r1, r2]
2783:Generated_Source\PSoC4/CyLib.c ****     {
 1681              		.loc 1 2783 0 discriminator 3
 1682 000e 0133     		adds	r3, r3, #1
 1683              	.LVL114:
 1684              	.L133:
2783:Generated_Source\PSoC4/CyLib.c ****     {
 1685              		.loc 1 2783 0 is_stmt 0 discriminator 1
 1686 0010 042B     		cmp	r3, #4
 1687 0012 F8D9     		bls	.L134
2788:Generated_Source\PSoC4/CyLib.c **** 
 1688              		.loc 1 2788 0 is_stmt 1
 1689 0014 0949     		ldr	r1, .L135+4
 1690 0016 0F20     		movs	r0, #15
 1691 0018 FFF7FEFF 		bl	CyIntSetSysVector
 1692              	.LVL115:
2791:Generated_Source\PSoC4/CyLib.c ****     #endif /* (CY_SYSTICK_LFCLK_SOURCE) */
 1693              		.loc 1 2791 0
 1694 001c 0120     		movs	r0, #1
 1695 001e FFF7FEFF 		bl	CySysTickSetClockSource
 1696              	.LVL116:
2794:Generated_Source\PSoC4/CyLib.c ****     CySysTickClear();
 1697              		.loc 1 2794 0
 1698 0022 074B     		ldr	r3, .L135+8
 1699 0024 1869     		ldr	r0, [r3, #16]
 1700 0026 FA21     		movs	r1, #250
 1701 0028 8900     		lsls	r1, r1, #2
 1702 002a FFF7FEFF 		bl	__aeabi_uidiv
 1703              	.LVL117:
 1704 002e FFF7FEFF 		bl	CySysTickSetReload
 1705              	.LVL118:
2795:Generated_Source\PSoC4/CyLib.c **** }
 1706              		.loc 1 2795 0
 1707 0032 FFF7FEFF 		bl	CySysTickClear
 1708              	.LVL119:
2796:Generated_Source\PSoC4/CyLib.c **** 
 1709              		.loc 1 2796 0
 1710              		@ sp needed
 1711 0036 10BD     		pop	{r4, pc}
 1712              	.L136:
 1713              		.align	2
 1714              	.L135:
 1715 0038 00000000 		.word	.LANCHOR1
 1716 003c 00000000 		.word	CySysTickServiceCallbacks
 1717 0040 00000000 		.word	.LANCHOR0
 1718              		.cfi_endproc
 1719              	.LFE28:
 1720              		.size	CySysTickInit, .-CySysTickInit
 1721              		.section	.text.CySysTickStart,"ax",%progbits
ARM GAS  e:\temp\cc2tFLyS.s 			page 87


 1722              		.align	2
 1723              		.global	CySysTickStart
 1724              		.code	16
 1725              		.thumb_func
 1726              		.type	CySysTickStart, %function
 1727              	CySysTickStart:
 1728              	.LFB27:
2751:Generated_Source\PSoC4/CyLib.c ****     if (0u == CySysTickInitVar)
 1729              		.loc 1 2751 0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 0
 1732              		@ frame_needed = 0, uses_anonymous_args = 0
 1733 0000 10B5     		push	{r4, lr}
 1734              		.cfi_def_cfa_offset 8
 1735              		.cfi_offset 4, -8
 1736              		.cfi_offset 14, -4
2752:Generated_Source\PSoC4/CyLib.c ****     {
 1737              		.loc 1 2752 0
 1738 0002 064B     		ldr	r3, .L139
 1739 0004 5B69     		ldr	r3, [r3, #20]
 1740 0006 002B     		cmp	r3, #0
 1741 0008 04D1     		bne	.L138
2754:Generated_Source\PSoC4/CyLib.c ****         CySysTickInitVar = 1u;
 1742              		.loc 1 2754 0
 1743 000a FFF7FEFF 		bl	CySysTickInit
 1744              	.LVL120:
2755:Generated_Source\PSoC4/CyLib.c ****     }
 1745              		.loc 1 2755 0
 1746 000e 0122     		movs	r2, #1
 1747 0010 024B     		ldr	r3, .L139
 1748 0012 5A61     		str	r2, [r3, #20]
 1749              	.L138:
2758:Generated_Source\PSoC4/CyLib.c **** }
 1750              		.loc 1 2758 0
 1751 0014 FFF7FEFF 		bl	CySysTickEnable
 1752              	.LVL121:
2759:Generated_Source\PSoC4/CyLib.c **** 
 1753              		.loc 1 2759 0
 1754              		@ sp needed
 1755 0018 10BD     		pop	{r4, pc}
 1756              	.L140:
 1757 001a C046     		.align	2
 1758              	.L139:
 1759 001c 00000000 		.word	.LANCHOR1
 1760              		.cfi_endproc
 1761              	.LFE27:
 1762              		.size	CySysTickStart, .-CySysTickStart
 1763              		.section	.text.CySysTickSetCallback,"ax",%progbits
 1764              		.align	2
 1765              		.global	CySysTickSetCallback
 1766              		.code	16
 1767              		.thumb_func
 1768              		.type	CySysTickSetCallback, %function
 1769              	CySysTickSetCallback:
 1770              	.LFB40:
3036:Generated_Source\PSoC4/CyLib.c ****     cySysTickCallback retVal;
 1771              		.loc 1 3036 0
ARM GAS  e:\temp\cc2tFLyS.s 			page 88


 1772              		.cfi_startproc
 1773              		@ args = 0, pretend = 0, frame = 0
 1774              		@ frame_needed = 0, uses_anonymous_args = 0
 1775              		@ link register save eliminated.
 1776              	.LVL122:
3039:Generated_Source\PSoC4/CyLib.c ****     CySysTickCallbacks[number] = function;
 1777              		.loc 1 3039 0
 1778 0000 024A     		ldr	r2, .L142
 1779 0002 8300     		lsls	r3, r0, #2
 1780 0004 9858     		ldr	r0, [r3, r2]
 1781              	.LVL123:
3040:Generated_Source\PSoC4/CyLib.c ****     return (retVal);
 1782              		.loc 1 3040 0
 1783 0006 9950     		str	r1, [r3, r2]
3042:Generated_Source\PSoC4/CyLib.c **** 
 1784              		.loc 1 3042 0
 1785              		@ sp needed
 1786 0008 7047     		bx	lr
 1787              	.L143:
 1788 000a C046     		.align	2
 1789              	.L142:
 1790 000c 00000000 		.word	.LANCHOR1
 1791              		.cfi_endproc
 1792              	.LFE40:
 1793              		.size	CySysTickSetCallback, .-CySysTickSetCallback
 1794              		.section	.text.CySysTickGetCallback,"ax",%progbits
 1795              		.align	2
 1796              		.global	CySysTickGetCallback
 1797              		.code	16
 1798              		.thumb_func
 1799              		.type	CySysTickGetCallback, %function
 1800              	CySysTickGetCallback:
 1801              	.LFB41:
3060:Generated_Source\PSoC4/CyLib.c ****     return ((cySysTickCallback) CySysTickCallbacks[number]);
 1802              		.loc 1 3060 0
 1803              		.cfi_startproc
 1804              		@ args = 0, pretend = 0, frame = 0
 1805              		@ frame_needed = 0, uses_anonymous_args = 0
 1806              		@ link register save eliminated.
 1807              	.LVL124:
3061:Generated_Source\PSoC4/CyLib.c **** }
 1808              		.loc 1 3061 0
 1809 0000 8000     		lsls	r0, r0, #2
 1810              	.LVL125:
 1811 0002 014B     		ldr	r3, .L145
 1812 0004 C058     		ldr	r0, [r0, r3]
3062:Generated_Source\PSoC4/CyLib.c **** 
 1813              		.loc 1 3062 0
 1814              		@ sp needed
 1815 0006 7047     		bx	lr
 1816              	.L146:
 1817              		.align	2
 1818              	.L145:
 1819 0008 00000000 		.word	.LANCHOR1
 1820              		.cfi_endproc
 1821              	.LFE41:
 1822              		.size	CySysTickGetCallback, .-CySysTickGetCallback
ARM GAS  e:\temp\cc2tFLyS.s 			page 89


 1823              		.section	.text.CyGetUniqueId,"ax",%progbits
 1824              		.align	2
 1825              		.global	CyGetUniqueId
 1826              		.code	16
 1827              		.thumb_func
 1828              		.type	CyGetUniqueId, %function
 1829              	CyGetUniqueId:
 1830              	.LFB43:
3088:Generated_Source\PSoC4/CyLib.c **** 
3089:Generated_Source\PSoC4/CyLib.c **** 
3090:Generated_Source\PSoC4/CyLib.c **** /*******************************************************************************
3091:Generated_Source\PSoC4/CyLib.c **** * Function Name: CyGetUniqueId
3092:Generated_Source\PSoC4/CyLib.c **** ****************************************************************************//**
3093:Generated_Source\PSoC4/CyLib.c **** *
3094:Generated_Source\PSoC4/CyLib.c **** *  Returns the 64-bit unique ID of the device. The uniqueness of the number is
3095:Generated_Source\PSoC4/CyLib.c **** *  guaranteed for 10 years due to the die lot number having a cycle life of 10
3096:Generated_Source\PSoC4/CyLib.c **** *  years and even after 10 years, the probability of getting two identical
3097:Generated_Source\PSoC4/CyLib.c **** *  numbers is very small.
3098:Generated_Source\PSoC4/CyLib.c **** *
3099:Generated_Source\PSoC4/CyLib.c **** *  \param uniqueId: The pointer to a two element 32-bit unsigned integer array. Returns
3100:Generated_Source\PSoC4/CyLib.c **** *  the 64-bit unique ID of the device by loading them into the integer array
3101:Generated_Source\PSoC4/CyLib.c **** *  pointed to by uniqueId.
3102:Generated_Source\PSoC4/CyLib.c **** *
3103:Generated_Source\PSoC4/CyLib.c **** *******************************************************************************/
3104:Generated_Source\PSoC4/CyLib.c **** void CyGetUniqueId(uint32* uniqueId)
3105:Generated_Source\PSoC4/CyLib.c **** {
 1831              		.loc 1 3105 0
 1832              		.cfi_startproc
 1833              		@ args = 0, pretend = 0, frame = 0
 1834              		@ frame_needed = 0, uses_anonymous_args = 0
 1835              		@ link register save eliminated.
 1836              	.LVL126:
3106:Generated_Source\PSoC4/CyLib.c **** #if(CY_PSOC4)
3107:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT0  );
 1837              		.loc 1 3107 0
 1838 0000 134B     		ldr	r3, .L148
 1839 0002 1B78     		ldrb	r3, [r3]
 1840 0004 DAB2     		uxtb	r2, r3
 1841 0006 0260     		str	r2, [r0]
3108:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT1  ) <<  8u);
 1842              		.loc 1 3108 0
 1843 0008 124B     		ldr	r3, .L148+4
 1844 000a 1B78     		ldrb	r3, [r3]
 1845 000c 1B02     		lsls	r3, r3, #8
 1846 000e 1343     		orrs	r3, r2
 1847 0010 0360     		str	r3, [r0]
3109:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_LOT2  ) << 16u);
 1848              		.loc 1 3109 0
 1849 0012 114A     		ldr	r2, .L148+8
 1850 0014 1278     		ldrb	r2, [r2]
 1851 0016 1204     		lsls	r2, r2, #16
 1852 0018 1343     		orrs	r3, r2
 1853 001a 0360     		str	r3, [r0]
3110:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_WAFER ) << 24u);
 1854              		.loc 1 3110 0
 1855 001c 0F4A     		ldr	r2, .L148+12
 1856 001e 1278     		ldrb	r2, [r2]
ARM GAS  e:\temp\cc2tFLyS.s 			page 90


 1857 0020 1206     		lsls	r2, r2, #24
 1858 0022 1343     		orrs	r3, r2
 1859 0024 0360     		str	r3, [r0]
3111:Generated_Source\PSoC4/CyLib.c **** 
3112:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32)(* (reg8 *) CYREG_SFLASH_DIE_X     );
 1860              		.loc 1 3112 0
 1861 0026 0E4B     		ldr	r3, .L148+16
 1862 0028 1B78     		ldrb	r3, [r3]
 1863 002a DAB2     		uxtb	r2, r3
 1864 002c 4260     		str	r2, [r0, #4]
3113:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_Y     ) <<  8u);
 1865              		.loc 1 3113 0
 1866 002e 0D4B     		ldr	r3, .L148+20
 1867 0030 1B78     		ldrb	r3, [r3]
 1868 0032 1B02     		lsls	r3, r3, #8
 1869 0034 1343     		orrs	r3, r2
 1870 0036 4360     		str	r3, [r0, #4]
3114:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_SORT  ) << 16u);
 1871              		.loc 1 3114 0
 1872 0038 0B4A     		ldr	r2, .L148+24
 1873 003a 1278     		ldrb	r2, [r2]
 1874 003c 1204     		lsls	r2, r2, #16
 1875 003e 1343     		orrs	r3, r2
 1876 0040 4360     		str	r3, [r0, #4]
3115:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32)(* (reg8 *) CYREG_SFLASH_DIE_MINOR ) << 24u);
 1877              		.loc 1 3115 0
 1878 0042 0A4A     		ldr	r2, .L148+28
 1879 0044 1278     		ldrb	r2, [r2]
 1880 0046 1206     		lsls	r2, r2, #24
 1881 0048 1343     		orrs	r3, r2
 1882 004a 4360     		str	r3, [r0, #4]
3116:Generated_Source\PSoC4/CyLib.c **** #else
3117:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_LSB   )
3118:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_LOT_MSB   )
3119:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_MLOGIC_REV_ID                )
3120:Generated_Source\PSoC4/CyLib.c ****     uniqueId[0u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WAFER_NUM )
3121:Generated_Source\PSoC4/CyLib.c **** 
3122:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u]  =  (uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_X_LOC     )
3123:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_Y_LOC     )
3124:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_WRK_WK    )
3125:Generated_Source\PSoC4/CyLib.c ****     uniqueId[1u] |= ((uint32) CY_GET_XTND_REG8((void CYFAR *) (CYREG_FLSHID_CUST_TABLES_FAB_YR    )
3126:Generated_Source\PSoC4/CyLib.c **** #endif  /* (CY_PSOC4) */
3127:Generated_Source\PSoC4/CyLib.c **** }
 1883              		.loc 1 3127 0
 1884              		@ sp needed
 1885 004c 7047     		bx	lr
 1886              	.L149:
 1887 004e C046     		.align	2
 1888              	.L148:
 1889 0050 78F2FF0F 		.word	268431992
 1890 0054 79F2FF0F 		.word	268431993
 1891 0058 7AF2FF0F 		.word	268431994
 1892 005c 7BF2FF0F 		.word	268431995
 1893 0060 7CF2FF0F 		.word	268431996
 1894 0064 7DF2FF0F 		.word	268431997
 1895 0068 7EF2FF0F 		.word	268431998
 1896 006c 7FF2FF0F 		.word	268431999
ARM GAS  e:\temp\cc2tFLyS.s 			page 91


 1897              		.cfi_endproc
 1898              	.LFE43:
 1899              		.size	CyGetUniqueId, .-CyGetUniqueId
 1900              		.global	CySysClkPumpConfig
 1901              		.global	CySysTickInitVar
 1902              		.global	cydelay32kMs
 1903              		.global	cydelayFreqMhz
 1904              		.global	cydelayFreqKhz
 1905              		.global	cydelayFreqHz
 1906              		.data
 1907              		.align	2
 1908              		.set	.LANCHOR0,. + 0
 1909              		.type	CySysClkPumpConfig, %object
 1910              		.size	CySysClkPumpConfig, 4
 1911              	CySysClkPumpConfig:
 1912 0000 01000000 		.word	1
 1913              		.type	cydelay32kMs, %object
 1914              		.size	cydelay32kMs, 4
 1915              	cydelay32kMs:
 1916 0004 0000E02E 		.word	786432000
 1917              		.type	cydelayFreqKhz, %object
 1918              		.size	cydelayFreqKhz, 4
 1919              	cydelayFreqKhz:
 1920 0008 C05D0000 		.word	24000
 1921              		.type	cydelayFreqMhz, %object
 1922              		.size	cydelayFreqMhz, 1
 1923              	cydelayFreqMhz:
 1924 000c 18       		.byte	24
 1925 000d 000000   		.space	3
 1926              		.type	cydelayFreqHz, %object
 1927              		.size	cydelayFreqHz, 4
 1928              	cydelayFreqHz:
 1929 0010 00366E01 		.word	24000000
 1930              		.bss
 1931              		.align	2
 1932              		.set	.LANCHOR1,. + 0
 1933              		.type	CySysTickCallbacks, %object
 1934              		.size	CySysTickCallbacks, 20
 1935              	CySysTickCallbacks:
 1936 0000 00000000 		.space	20
 1936      00000000 
 1936      00000000 
 1936      00000000 
 1936      00000000 
 1937              		.type	CySysTickInitVar, %object
 1938              		.size	CySysTickInitVar, 4
 1939              	CySysTickInitVar:
 1940 0014 00000000 		.space	4
 1941              		.text
 1942              	.Letext0:
 1943              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1944              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 1945              		.section	.debug_info,"",%progbits
 1946              	.Ldebug_info0:
 1947 0000 7F0A0000 		.4byte	0xa7f
 1948 0004 0400     		.2byte	0x4
 1949 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  e:\temp\cc2tFLyS.s 			page 92


 1950 000a 04       		.byte	0x4
 1951 000b 01       		.uleb128 0x1
 1952 000c 66040000 		.4byte	.LASF99
 1953 0010 0C       		.byte	0xc
 1954 0011 72060000 		.4byte	.LASF100
 1955 0015 BB010000 		.4byte	.LASF101
 1956 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1957 001d 00000000 		.4byte	0
 1958 0021 00000000 		.4byte	.Ldebug_line0
 1959 0025 02       		.uleb128 0x2
 1960 0026 01       		.byte	0x1
 1961 0027 06       		.byte	0x6
 1962 0028 E1000000 		.4byte	.LASF0
 1963 002c 02       		.uleb128 0x2
 1964 002d 01       		.byte	0x1
 1965 002e 08       		.byte	0x8
 1966 002f 23050000 		.4byte	.LASF1
 1967 0033 02       		.uleb128 0x2
 1968 0034 02       		.byte	0x2
 1969 0035 05       		.byte	0x5
 1970 0036 31050000 		.4byte	.LASF2
 1971 003a 02       		.uleb128 0x2
 1972 003b 02       		.byte	0x2
 1973 003c 07       		.byte	0x7
 1974 003d F0020000 		.4byte	.LASF3
 1975 0041 02       		.uleb128 0x2
 1976 0042 04       		.byte	0x4
 1977 0043 05       		.byte	0x5
 1978 0044 25010000 		.4byte	.LASF4
 1979 0048 02       		.uleb128 0x2
 1980 0049 04       		.byte	0x4
 1981 004a 07       		.byte	0x7
 1982 004b 93020000 		.4byte	.LASF5
 1983 004f 02       		.uleb128 0x2
 1984 0050 08       		.byte	0x8
 1985 0051 05       		.byte	0x5
 1986 0052 D3000000 		.4byte	.LASF6
 1987 0056 02       		.uleb128 0x2
 1988 0057 08       		.byte	0x8
 1989 0058 07       		.byte	0x7
 1990 0059 67000000 		.4byte	.LASF7
 1991 005d 03       		.uleb128 0x3
 1992 005e 04       		.byte	0x4
 1993 005f 05       		.byte	0x5
 1994 0060 696E7400 		.ascii	"int\000"
 1995 0064 02       		.uleb128 0x2
 1996 0065 04       		.byte	0x4
 1997 0066 07       		.byte	0x7
 1998 0067 77020000 		.4byte	.LASF8
 1999 006b 04       		.uleb128 0x4
 2000 006c 50010000 		.4byte	.LASF9
 2001 0070 02       		.byte	0x2
 2002 0071 E401     		.2byte	0x1e4
 2003 0073 2C000000 		.4byte	0x2c
 2004 0077 04       		.uleb128 0x4
 2005 0078 0F000000 		.4byte	.LASF10
 2006 007c 02       		.byte	0x2
ARM GAS  e:\temp\cc2tFLyS.s 			page 93


 2007 007d E501     		.2byte	0x1e5
 2008 007f 3A000000 		.4byte	0x3a
 2009 0083 04       		.uleb128 0x4
 2010 0084 79010000 		.4byte	.LASF11
 2011 0088 02       		.byte	0x2
 2012 0089 E601     		.2byte	0x1e6
 2013 008b 48000000 		.4byte	0x48
 2014 008f 02       		.uleb128 0x2
 2015 0090 04       		.byte	0x4
 2016 0091 04       		.byte	0x4
 2017 0092 0E040000 		.4byte	.LASF12
 2018 0096 02       		.uleb128 0x2
 2019 0097 08       		.byte	0x8
 2020 0098 04       		.byte	0x4
 2021 0099 6C010000 		.4byte	.LASF13
 2022 009d 02       		.uleb128 0x2
 2023 009e 01       		.byte	0x1
 2024 009f 08       		.byte	0x8
 2025 00a0 74050000 		.4byte	.LASF14
 2026 00a4 04       		.uleb128 0x4
 2027 00a5 0D010000 		.4byte	.LASF15
 2028 00a9 02       		.byte	0x2
 2029 00aa 8E02     		.2byte	0x28e
 2030 00ac B0000000 		.4byte	0xb0
 2031 00b0 05       		.uleb128 0x5
 2032 00b1 6B000000 		.4byte	0x6b
 2033 00b5 04       		.uleb128 0x4
 2034 00b6 76030000 		.4byte	.LASF16
 2035 00ba 02       		.byte	0x2
 2036 00bb 9002     		.2byte	0x290
 2037 00bd C1000000 		.4byte	0xc1
 2038 00c1 05       		.uleb128 0x5
 2039 00c2 83000000 		.4byte	0x83
 2040 00c6 04       		.uleb128 0x4
 2041 00c7 79050000 		.4byte	.LASF17
 2042 00cb 02       		.byte	0x2
 2043 00cc A002     		.2byte	0x2a0
 2044 00ce D2000000 		.4byte	0xd2
 2045 00d2 06       		.uleb128 0x6
 2046 00d3 04       		.byte	0x4
 2047 00d4 D8000000 		.4byte	0xd8
 2048 00d8 07       		.uleb128 0x7
 2049 00d9 02       		.uleb128 0x2
 2050 00da 08       		.byte	0x8
 2051 00db 04       		.byte	0x4
 2052 00dc B3030000 		.4byte	.LASF18
 2053 00e0 02       		.uleb128 0x2
 2054 00e1 04       		.byte	0x4
 2055 00e2 07       		.byte	0x7
 2056 00e3 98030000 		.4byte	.LASF19
 2057 00e7 08       		.uleb128 0x8
 2058 00e8 2A040000 		.4byte	.LASF20
 2059 00ec 03       		.byte	0x3
 2060 00ed F5       		.byte	0xf5
 2061 00ee D2000000 		.4byte	0xd2
 2062 00f2 09       		.uleb128 0x9
 2063 00f3 61060000 		.4byte	.LASF21
ARM GAS  e:\temp\cc2tFLyS.s 			page 94


 2064 00f7 01       		.byte	0x1
 2065 00f8 6C       		.byte	0x6c
 2066 00f9 00000000 		.4byte	.LFB0
 2067 00fd 14000000 		.4byte	.LFE0-.LFB0
 2068 0101 01       		.uleb128 0x1
 2069 0102 9C       		.byte	0x9c
 2070 0103 09       		.uleb128 0x9
 2071 0104 A5020000 		.4byte	.LASF22
 2072 0108 01       		.byte	0x1
 2073 0109 8C       		.byte	0x8c
 2074 010a 00000000 		.4byte	.LFB1
 2075 010e 10000000 		.4byte	.LFE1-.LFB1
 2076 0112 01       		.uleb128 0x1
 2077 0113 9C       		.byte	0x9c
 2078 0114 0A       		.uleb128 0xa
 2079 0115 1F000000 		.4byte	.LASF25
 2080 0119 01       		.byte	0x1
 2081 011a 0102     		.2byte	0x201
 2082 011c 00000000 		.4byte	.LFB2
 2083 0120 20000000 		.4byte	.LFE2-.LFB2
 2084 0124 01       		.uleb128 0x1
 2085 0125 9C       		.byte	0x9c
 2086 0126 6D010000 		.4byte	0x16d
 2087 012a 0B       		.uleb128 0xb
 2088 012b 59050000 		.4byte	.LASF27
 2089 012f 01       		.byte	0x1
 2090 0130 0102     		.2byte	0x201
 2091 0132 83000000 		.4byte	0x83
 2092 0136 00000000 		.4byte	.LLST0
 2093 013a 0C       		.uleb128 0xc
 2094 013b FE000000 		.4byte	.LASF23
 2095 013f 01       		.byte	0x1
 2096 0140 0302     		.2byte	0x203
 2097 0142 6B000000 		.4byte	0x6b
 2098 0146 2C000000 		.4byte	.LLST1
 2099 014a 0C       		.uleb128 0xc
 2100 014b 9E060000 		.4byte	.LASF24
 2101 014f 01       		.byte	0x1
 2102 0150 0402     		.2byte	0x204
 2103 0152 83000000 		.4byte	0x83
 2104 0156 3F000000 		.4byte	.LLST2
 2105 015a 0D       		.uleb128 0xd
 2106 015b 08000000 		.4byte	.LVL1
 2107 015f 610A0000 		.4byte	0xa61
 2108 0163 0D       		.uleb128 0xd
 2109 0164 1A000000 		.4byte	.LVL5
 2110 0168 6C0A0000 		.4byte	0xa6c
 2111 016c 00       		.byte	0
 2112 016d 0A       		.uleb128 0xa
 2113 016e 61030000 		.4byte	.LASF26
 2114 0172 01       		.byte	0x1
 2115 0173 4902     		.2byte	0x249
 2116 0175 00000000 		.4byte	.LFB3
 2117 0179 34000000 		.4byte	.LFE3-.LFB3
 2118 017d 01       		.uleb128 0x1
 2119 017e 9C       		.byte	0x9c
 2120 017f 92010000 		.4byte	0x192
ARM GAS  e:\temp\cc2tFLyS.s 			page 95


 2121 0183 0E       		.uleb128 0xe
 2122 0184 65010000 		.4byte	.LASF28
 2123 0188 01       		.byte	0x1
 2124 0189 4902     		.2byte	0x249
 2125 018b 83000000 		.4byte	0x83
 2126 018f 01       		.uleb128 0x1
 2127 0190 50       		.byte	0x50
 2128 0191 00       		.byte	0
 2129 0192 0F       		.uleb128 0xf
 2130 0193 85010000 		.4byte	.LASF33
 2131 0197 01       		.byte	0x1
 2132 0198 6E02     		.2byte	0x26e
 2133 019a 83000000 		.4byte	0x83
 2134 019e 00000000 		.4byte	.LFB4
 2135 01a2 1C000000 		.4byte	.LFE4-.LFB4
 2136 01a6 01       		.uleb128 0x1
 2137 01a7 9C       		.byte	0x9c
 2138 01a8 DF010000 		.4byte	0x1df
 2139 01ac 0C       		.uleb128 0xc
 2140 01ad FE000000 		.4byte	.LASF23
 2141 01b1 01       		.byte	0x1
 2142 01b2 7002     		.2byte	0x270
 2143 01b4 6B000000 		.4byte	0x6b
 2144 01b8 5D000000 		.4byte	.LLST3
 2145 01bc 0C       		.uleb128 0xc
 2146 01bd C7030000 		.4byte	.LASF29
 2147 01c1 01       		.byte	0x1
 2148 01c2 7102     		.2byte	0x271
 2149 01c4 83000000 		.4byte	0x83
 2150 01c8 70000000 		.4byte	.LLST4
 2151 01cc 0D       		.uleb128 0xd
 2152 01cd 06000000 		.4byte	.LVL8
 2153 01d1 610A0000 		.4byte	0xa61
 2154 01d5 0D       		.uleb128 0xd
 2155 01d6 12000000 		.4byte	.LVL10
 2156 01da 6C0A0000 		.4byte	0xa6c
 2157 01de 00       		.byte	0
 2158 01df 0A       		.uleb128 0xa
 2159 01e0 AC050000 		.4byte	.LASF30
 2160 01e4 01       		.byte	0x1
 2161 01e5 AB02     		.2byte	0x2ab
 2162 01e7 00000000 		.4byte	.LFB5
 2163 01eb 24000000 		.4byte	.LFE5-.LFB5
 2164 01ef 01       		.uleb128 0x1
 2165 01f0 9C       		.byte	0x9c
 2166 01f1 28020000 		.4byte	0x228
 2167 01f5 0B       		.uleb128 0xb
 2168 01f6 59060000 		.4byte	.LASF31
 2169 01fa 01       		.byte	0x1
 2170 01fb AB02     		.2byte	0x2ab
 2171 01fd 83000000 		.4byte	0x83
 2172 0201 8E000000 		.4byte	.LLST5
 2173 0205 0C       		.uleb128 0xc
 2174 0206 FE000000 		.4byte	.LASF23
 2175 020a 01       		.byte	0x1
 2176 020b AD02     		.2byte	0x2ad
 2177 020d 6B000000 		.4byte	0x6b
ARM GAS  e:\temp\cc2tFLyS.s 			page 96


 2178 0211 BA000000 		.4byte	.LLST6
 2179 0215 0D       		.uleb128 0xd
 2180 0216 08000000 		.4byte	.LVL13
 2181 021a 610A0000 		.4byte	0xa61
 2182 021e 0D       		.uleb128 0xd
 2183 021f 1E000000 		.4byte	.LVL15
 2184 0223 6C0A0000 		.4byte	0xa6c
 2185 0227 00       		.byte	0
 2186 0228 0A       		.uleb128 0xa
 2187 0229 96050000 		.4byte	.LASF32
 2188 022d 01       		.byte	0x1
 2189 022e 3704     		.2byte	0x437
 2190 0230 00000000 		.4byte	.LFB7
 2191 0234 24000000 		.4byte	.LFE7-.LFB7
 2192 0238 01       		.uleb128 0x1
 2193 0239 9C       		.byte	0x9c
 2194 023a 71020000 		.4byte	0x271
 2195 023e 0B       		.uleb128 0xb
 2196 023f 59060000 		.4byte	.LASF31
 2197 0243 01       		.byte	0x1
 2198 0244 3704     		.2byte	0x437
 2199 0246 83000000 		.4byte	0x83
 2200 024a CD000000 		.4byte	.LLST7
 2201 024e 0C       		.uleb128 0xc
 2202 024f FE000000 		.4byte	.LASF23
 2203 0253 01       		.byte	0x1
 2204 0254 3904     		.2byte	0x439
 2205 0256 6B000000 		.4byte	0x6b
 2206 025a F9000000 		.4byte	.LLST8
 2207 025e 0D       		.uleb128 0xd
 2208 025f 08000000 		.4byte	.LVL17
 2209 0263 610A0000 		.4byte	0xa61
 2210 0267 0D       		.uleb128 0xd
 2211 0268 1E000000 		.4byte	.LVL19
 2212 026c 6C0A0000 		.4byte	0xa6c
 2213 0270 00       		.byte	0
 2214 0271 0F       		.uleb128 0xf
 2215 0272 DC020000 		.4byte	.LASF34
 2216 0276 01       		.byte	0x1
 2217 0277 1A09     		.2byte	0x91a
 2218 0279 83000000 		.4byte	0x83
 2219 027d 00000000 		.4byte	.LFB8
 2220 0281 14000000 		.4byte	.LFE8-.LFB8
 2221 0285 01       		.uleb128 0x1
 2222 0286 9C       		.byte	0x9c
 2223 0287 AA020000 		.4byte	0x2aa
 2224 028b 0B       		.uleb128 0xb
 2225 028c 6D050000 		.4byte	.LASF35
 2226 0290 01       		.byte	0x1
 2227 0291 1A09     		.2byte	0x91a
 2228 0293 83000000 		.4byte	0x83
 2229 0297 0C010000 		.4byte	.LLST9
 2230 029b 10       		.uleb128 0x10
 2231 029c 8B030000 		.4byte	.LASF36
 2232 02a0 01       		.byte	0x1
 2233 02a1 1C09     		.2byte	0x91c
 2234 02a3 83000000 		.4byte	0x83
ARM GAS  e:\temp\cc2tFLyS.s 			page 97


 2235 02a7 01       		.uleb128 0x1
 2236 02a8 50       		.byte	0x50
 2237 02a9 00       		.byte	0
 2238 02aa 0F       		.uleb128 0xf
 2239 02ab 59000000 		.4byte	.LASF37
 2240 02af 01       		.byte	0x1
 2241 02b0 3109     		.2byte	0x931
 2242 02b2 83000000 		.4byte	0x83
 2243 02b6 00000000 		.4byte	.LFB9
 2244 02ba 10000000 		.4byte	.LFE9-.LFB9
 2245 02be 01       		.uleb128 0x1
 2246 02bf 9C       		.byte	0x9c
 2247 02c0 D3020000 		.4byte	0x2d3
 2248 02c4 10       		.uleb128 0x10
 2249 02c5 16000000 		.4byte	.LASF38
 2250 02c9 01       		.byte	0x1
 2251 02ca 3309     		.2byte	0x933
 2252 02cc 83000000 		.4byte	0x83
 2253 02d0 01       		.uleb128 0x1
 2254 02d1 50       		.byte	0x50
 2255 02d2 00       		.byte	0
 2256 02d3 0A       		.uleb128 0xa
 2257 02d4 8F000000 		.4byte	.LASF39
 2258 02d8 01       		.byte	0x1
 2259 02d9 4809     		.2byte	0x948
 2260 02db 00000000 		.4byte	.LFB10
 2261 02df 0C000000 		.4byte	.LFE10-.LFB10
 2262 02e3 01       		.uleb128 0x1
 2263 02e4 9C       		.byte	0x9c
 2264 02e5 F8020000 		.4byte	0x2f8
 2265 02e9 0E       		.uleb128 0xe
 2266 02ea 80010000 		.4byte	.LASF40
 2267 02ee 01       		.byte	0x1
 2268 02ef 4809     		.2byte	0x948
 2269 02f1 83000000 		.4byte	0x83
 2270 02f5 01       		.uleb128 0x1
 2271 02f6 50       		.byte	0x50
 2272 02f7 00       		.byte	0
 2273 02f8 0A       		.uleb128 0xa
 2274 02f9 3B050000 		.4byte	.LASF41
 2275 02fd 01       		.byte	0x1
 2276 02fe FF09     		.2byte	0x9ff
 2277 0300 00000000 		.4byte	.LFB17
 2278 0304 14000000 		.4byte	.LFE17-.LFB17
 2279 0308 01       		.uleb128 0x1
 2280 0309 9C       		.byte	0x9c
 2281 030a 1F030000 		.4byte	0x31f
 2282 030e 0B       		.uleb128 0xb
 2283 030f 2A030000 		.4byte	.LASF42
 2284 0313 01       		.byte	0x1
 2285 0314 FF09     		.2byte	0x9ff
 2286 0316 6B000000 		.4byte	0x6b
 2287 031a 2A010000 		.4byte	.LLST10
 2288 031e 00       		.byte	0
 2289 031f 0F       		.uleb128 0xf
 2290 0320 C5000000 		.4byte	.LASF43
 2291 0324 01       		.byte	0x1
ARM GAS  e:\temp\cc2tFLyS.s 			page 98


 2292 0325 110A     		.2byte	0xa11
 2293 0327 6B000000 		.4byte	0x6b
 2294 032b 00000000 		.4byte	.LFB18
 2295 032f 18000000 		.4byte	.LFE18-.LFB18
 2296 0333 01       		.uleb128 0x1
 2297 0334 9C       		.byte	0x9c
 2298 0335 4A030000 		.4byte	0x34a
 2299 0339 0B       		.uleb128 0xb
 2300 033a 2A030000 		.4byte	.LASF42
 2301 033e 01       		.byte	0x1
 2302 033f 110A     		.2byte	0xa11
 2303 0341 6B000000 		.4byte	0x6b
 2304 0345 4B010000 		.4byte	.LLST11
 2305 0349 00       		.byte	0
 2306 034a 0A       		.uleb128 0xa
 2307 034b 2E010000 		.4byte	.LASF44
 2308 034f 01       		.byte	0x1
 2309 0350 210A     		.2byte	0xa21
 2310 0352 00000000 		.4byte	.LFB19
 2311 0356 14000000 		.4byte	.LFE19-.LFB19
 2312 035a 01       		.uleb128 0x1
 2313 035b 9C       		.byte	0x9c
 2314 035c 71030000 		.4byte	0x371
 2315 0360 0B       		.uleb128 0xb
 2316 0361 2A030000 		.4byte	.LASF42
 2317 0365 01       		.byte	0x1
 2318 0366 210A     		.2byte	0xa21
 2319 0368 6B000000 		.4byte	0x6b
 2320 036c 6C010000 		.4byte	.LLST12
 2321 0370 00       		.byte	0
 2322 0371 0A       		.uleb128 0xa
 2323 0372 CC020000 		.4byte	.LASF45
 2324 0376 01       		.byte	0x1
 2325 0377 2F0A     		.2byte	0xa2f
 2326 0379 00000000 		.4byte	.LFB20
 2327 037d 14000000 		.4byte	.LFE20-.LFB20
 2328 0381 01       		.uleb128 0x1
 2329 0382 9C       		.byte	0x9c
 2330 0383 98030000 		.4byte	0x398
 2331 0387 0B       		.uleb128 0xb
 2332 0388 2A030000 		.4byte	.LASF42
 2333 038c 01       		.byte	0x1
 2334 038d 2F0A     		.2byte	0xa2f
 2335 038f 6B000000 		.4byte	0x6b
 2336 0393 8D010000 		.4byte	.LLST13
 2337 0397 00       		.byte	0
 2338 0398 0A       		.uleb128 0xa
 2339 0399 A1030000 		.4byte	.LASF46
 2340 039d 01       		.byte	0x1
 2341 039e 3E0A     		.2byte	0xa3e
 2342 03a0 00000000 		.4byte	.LFB21
 2343 03a4 14000000 		.4byte	.LFE21-.LFB21
 2344 03a8 01       		.uleb128 0x1
 2345 03a9 9C       		.byte	0x9c
 2346 03aa BF030000 		.4byte	0x3bf
 2347 03ae 0B       		.uleb128 0xb
 2348 03af 2A030000 		.4byte	.LASF42
ARM GAS  e:\temp\cc2tFLyS.s 			page 99


 2349 03b3 01       		.byte	0x1
 2350 03b4 3E0A     		.2byte	0xa3e
 2351 03b6 6B000000 		.4byte	0x6b
 2352 03ba AE010000 		.4byte	.LLST14
 2353 03be 00       		.byte	0
 2354 03bf 0A       		.uleb128 0xa
 2355 03c0 1C050000 		.4byte	.LASF47
 2356 03c4 01       		.byte	0x1
 2357 03c5 4D0A     		.2byte	0xa4d
 2358 03c7 00000000 		.4byte	.LFB22
 2359 03cb 04000000 		.4byte	.LFE22-.LFB22
 2360 03cf 01       		.uleb128 0x1
 2361 03d0 9C       		.byte	0x9c
 2362 03d1 E4030000 		.4byte	0x3e4
 2363 03d5 0E       		.uleb128 0xe
 2364 03d6 6D050000 		.4byte	.LASF35
 2365 03da 01       		.byte	0x1
 2366 03db 4D0A     		.2byte	0xa4d
 2367 03dd 6B000000 		.4byte	0x6b
 2368 03e1 01       		.uleb128 0x1
 2369 03e2 50       		.byte	0x50
 2370 03e3 00       		.byte	0
 2371 03e4 0A       		.uleb128 0xa
 2372 03e5 3A030000 		.4byte	.LASF48
 2373 03e9 01       		.byte	0x1
 2374 03ea 9E03     		.2byte	0x39e
 2375 03ec 00000000 		.4byte	.LFB6
 2376 03f0 BC000000 		.4byte	.LFE6-.LFB6
 2377 03f4 01       		.uleb128 0x1
 2378 03f5 9C       		.byte	0x9c
 2379 03f6 7F040000 		.4byte	0x47f
 2380 03fa 0B       		.uleb128 0xb
 2381 03fb ED000000 		.4byte	.LASF49
 2382 03ff 01       		.byte	0x1
 2383 0400 9E03     		.2byte	0x39e
 2384 0402 83000000 		.4byte	0x83
 2385 0406 CF010000 		.4byte	.LLST15
 2386 040a 0C       		.uleb128 0xc
 2387 040b FE000000 		.4byte	.LASF23
 2388 040f 01       		.byte	0x1
 2389 0410 A003     		.2byte	0x3a0
 2390 0412 6B000000 		.4byte	0x6b
 2391 0416 1F020000 		.4byte	.LLST16
 2392 041a 0C       		.uleb128 0xc
 2393 041b EB050000 		.4byte	.LASF50
 2394 041f 01       		.byte	0x1
 2395 0420 A103     		.2byte	0x3a1
 2396 0422 6B000000 		.4byte	0x6b
 2397 0426 32020000 		.4byte	.LLST17
 2398 042a 0D       		.uleb128 0xd
 2399 042b 24000000 		.4byte	.LVL38
 2400 042f 610A0000 		.4byte	0xa61
 2401 0433 11       		.uleb128 0x11
 2402 0434 60000000 		.4byte	.LVL43
 2403 0438 770A0000 		.4byte	0xa77
 2404 043c 47040000 		.4byte	0x447
 2405 0440 12       		.uleb128 0x12
ARM GAS  e:\temp\cc2tFLyS.s 			page 100


 2406 0441 01       		.uleb128 0x1
 2407 0442 50       		.byte	0x50
 2408 0443 02       		.uleb128 0x2
 2409 0444 08       		.byte	0x8
 2410 0445 32       		.byte	0x32
 2411 0446 00       		.byte	0
 2412 0447 11       		.uleb128 0x11
 2413 0448 80000000 		.4byte	.LVL44
 2414 044c 770A0000 		.4byte	0xa77
 2415 0450 5B040000 		.4byte	0x45b
 2416 0454 12       		.uleb128 0x12
 2417 0455 01       		.uleb128 0x1
 2418 0456 50       		.byte	0x50
 2419 0457 02       		.uleb128 0x2
 2420 0458 08       		.byte	0x8
 2421 0459 32       		.byte	0x32
 2422 045a 00       		.byte	0
 2423 045b 11       		.uleb128 0x11
 2424 045c 98000000 		.4byte	.LVL46
 2425 0460 6C0A0000 		.4byte	0xa6c
 2426 0464 6F040000 		.4byte	0x46f
 2427 0468 12       		.uleb128 0x12
 2428 0469 01       		.uleb128 0x1
 2429 046a 50       		.byte	0x50
 2430 046b 02       		.uleb128 0x2
 2431 046c 75       		.byte	0x75
 2432 046d 00       		.sleb128 0
 2433 046e 00       		.byte	0
 2434 046f 13       		.uleb128 0x13
 2435 0470 A0000000 		.4byte	.LVL49
 2436 0474 BF030000 		.4byte	0x3bf
 2437 0478 12       		.uleb128 0x12
 2438 0479 01       		.uleb128 0x1
 2439 047a 50       		.byte	0x50
 2440 047b 01       		.uleb128 0x1
 2441 047c 30       		.byte	0x30
 2442 047d 00       		.byte	0
 2443 047e 00       		.byte	0
 2444 047f 0F       		.uleb128 0xf
 2445 0480 4F030000 		.4byte	.LASF51
 2446 0484 01       		.byte	0x1
 2447 0485 6109     		.2byte	0x961
 2448 0487 C6000000 		.4byte	0xc6
 2449 048b 00000000 		.4byte	.LFB11
 2450 048f 20000000 		.4byte	.LFE11-.LFB11
 2451 0493 01       		.uleb128 0x1
 2452 0494 9C       		.byte	0x9c
 2453 0495 E7040000 		.4byte	0x4e7
 2454 0499 0B       		.uleb128 0xb
 2455 049a 2A030000 		.4byte	.LASF42
 2456 049e 01       		.byte	0x1
 2457 049f 6109     		.2byte	0x961
 2458 04a1 6B000000 		.4byte	0x6b
 2459 04a5 56020000 		.4byte	.LLST18
 2460 04a9 0B       		.uleb128 0xb
 2461 04aa BF030000 		.4byte	.LASF52
 2462 04ae 01       		.byte	0x1
ARM GAS  e:\temp\cc2tFLyS.s 			page 101


 2463 04af 6109     		.2byte	0x961
 2464 04b1 C6000000 		.4byte	0xc6
 2465 04b5 77020000 		.4byte	.LLST19
 2466 04b9 10       		.uleb128 0x10
 2467 04ba 4B000000 		.4byte	.LASF53
 2468 04be 01       		.byte	0x1
 2469 04bf 6309     		.2byte	0x963
 2470 04c1 C6000000 		.4byte	0xc6
 2471 04c5 01       		.uleb128 0x1
 2472 04c6 50       		.byte	0x50
 2473 04c7 14       		.uleb128 0x14
 2474 04c8 00000000 		.4byte	.LASF54
 2475 04cc 01       		.byte	0x1
 2476 04cd 6409     		.2byte	0x964
 2477 04cf E7040000 		.4byte	0x4e7
 2478 04d3 00000020 		.4byte	0x20000000
 2479 04d7 13       		.uleb128 0x13
 2480 04d8 10000000 		.4byte	.LVL53
 2481 04dc BF030000 		.4byte	0x3bf
 2482 04e0 12       		.uleb128 0x12
 2483 04e1 01       		.uleb128 0x1
 2484 04e2 50       		.byte	0x50
 2485 04e3 01       		.uleb128 0x1
 2486 04e4 30       		.byte	0x30
 2487 04e5 00       		.byte	0
 2488 04e6 00       		.byte	0
 2489 04e7 06       		.uleb128 0x6
 2490 04e8 04       		.byte	0x4
 2491 04e9 C6000000 		.4byte	0xc6
 2492 04ed 0F       		.uleb128 0xf
 2493 04ee 47050000 		.4byte	.LASF55
 2494 04f2 01       		.byte	0x1
 2495 04f3 8309     		.2byte	0x983
 2496 04f5 C6000000 		.4byte	0xc6
 2497 04f9 00000000 		.4byte	.LFB12
 2498 04fd 1C000000 		.4byte	.LFE12-.LFB12
 2499 0501 01       		.uleb128 0x1
 2500 0502 9C       		.byte	0x9c
 2501 0503 37050000 		.4byte	0x537
 2502 0507 0B       		.uleb128 0xb
 2503 0508 2A030000 		.4byte	.LASF42
 2504 050c 01       		.byte	0x1
 2505 050d 8309     		.2byte	0x983
 2506 050f 6B000000 		.4byte	0x6b
 2507 0513 A3020000 		.4byte	.LLST20
 2508 0517 14       		.uleb128 0x14
 2509 0518 00000000 		.4byte	.LASF54
 2510 051c 01       		.byte	0x1
 2511 051d 8509     		.2byte	0x985
 2512 051f E7040000 		.4byte	0x4e7
 2513 0523 00000020 		.4byte	0x20000000
 2514 0527 13       		.uleb128 0x13
 2515 0528 0E000000 		.4byte	.LVL59
 2516 052c BF030000 		.4byte	0x3bf
 2517 0530 12       		.uleb128 0x12
 2518 0531 01       		.uleb128 0x1
 2519 0532 50       		.byte	0x50
ARM GAS  e:\temp\cc2tFLyS.s 			page 102


 2520 0533 01       		.uleb128 0x1
 2521 0534 30       		.byte	0x30
 2522 0535 00       		.byte	0
 2523 0536 00       		.byte	0
 2524 0537 0F       		.uleb128 0xf
 2525 0538 1B030000 		.4byte	.LASF56
 2526 053c 01       		.byte	0x1
 2527 053d 9909     		.2byte	0x999
 2528 053f C6000000 		.4byte	0xc6
 2529 0543 00000000 		.4byte	.LFB13
 2530 0547 22000000 		.4byte	.LFE13-.LFB13
 2531 054b 01       		.uleb128 0x1
 2532 054c 9C       		.byte	0x9c
 2533 054d 9F050000 		.4byte	0x59f
 2534 0551 0B       		.uleb128 0xb
 2535 0552 2A030000 		.4byte	.LASF42
 2536 0556 01       		.byte	0x1
 2537 0557 9909     		.2byte	0x999
 2538 0559 6B000000 		.4byte	0x6b
 2539 055d C4020000 		.4byte	.LLST21
 2540 0561 0B       		.uleb128 0xb
 2541 0562 BF030000 		.4byte	.LASF52
 2542 0566 01       		.byte	0x1
 2543 0567 9909     		.2byte	0x999
 2544 0569 C6000000 		.4byte	0xc6
 2545 056d E5020000 		.4byte	.LLST22
 2546 0571 10       		.uleb128 0x10
 2547 0572 4B000000 		.4byte	.LASF53
 2548 0576 01       		.byte	0x1
 2549 0577 9B09     		.2byte	0x99b
 2550 0579 C6000000 		.4byte	0xc6
 2551 057d 01       		.uleb128 0x1
 2552 057e 50       		.byte	0x50
 2553 057f 14       		.uleb128 0x14
 2554 0580 00000000 		.4byte	.LASF54
 2555 0584 01       		.byte	0x1
 2556 0585 9C09     		.2byte	0x99c
 2557 0587 E7040000 		.4byte	0x4e7
 2558 058b 00000020 		.4byte	0x20000000
 2559 058f 13       		.uleb128 0x13
 2560 0590 10000000 		.4byte	.LVL63
 2561 0594 BF030000 		.4byte	0x3bf
 2562 0598 12       		.uleb128 0x12
 2563 0599 01       		.uleb128 0x1
 2564 059a 50       		.byte	0x50
 2565 059b 01       		.uleb128 0x1
 2566 059c 30       		.byte	0x30
 2567 059d 00       		.byte	0
 2568 059e 00       		.byte	0
 2569 059f 0F       		.uleb128 0xf
 2570 05a0 3C040000 		.4byte	.LASF57
 2571 05a4 01       		.byte	0x1
 2572 05a5 B509     		.2byte	0x9b5
 2573 05a7 C6000000 		.4byte	0xc6
 2574 05ab 00000000 		.4byte	.LFB14
 2575 05af 1E000000 		.4byte	.LFE14-.LFB14
 2576 05b3 01       		.uleb128 0x1
ARM GAS  e:\temp\cc2tFLyS.s 			page 103


 2577 05b4 9C       		.byte	0x9c
 2578 05b5 E9050000 		.4byte	0x5e9
 2579 05b9 0B       		.uleb128 0xb
 2580 05ba 2A030000 		.4byte	.LASF42
 2581 05be 01       		.byte	0x1
 2582 05bf B509     		.2byte	0x9b5
 2583 05c1 6B000000 		.4byte	0x6b
 2584 05c5 11030000 		.4byte	.LLST23
 2585 05c9 14       		.uleb128 0x14
 2586 05ca 00000000 		.4byte	.LASF54
 2587 05ce 01       		.byte	0x1
 2588 05cf B709     		.2byte	0x9b7
 2589 05d1 E7040000 		.4byte	0x4e7
 2590 05d5 00000020 		.4byte	0x20000000
 2591 05d9 13       		.uleb128 0x13
 2592 05da 0E000000 		.4byte	.LVL69
 2593 05de BF030000 		.4byte	0x3bf
 2594 05e2 12       		.uleb128 0x12
 2595 05e3 01       		.uleb128 0x1
 2596 05e4 50       		.byte	0x50
 2597 05e5 01       		.uleb128 0x1
 2598 05e6 30       		.byte	0x30
 2599 05e7 00       		.byte	0
 2600 05e8 00       		.byte	0
 2601 05e9 0A       		.uleb128 0xa
 2602 05ea FD030000 		.4byte	.LASF58
 2603 05ee 01       		.byte	0x1
 2604 05ef C809     		.2byte	0x9c8
 2605 05f1 00000000 		.4byte	.LFB15
 2606 05f5 4C000000 		.4byte	.LFE15-.LFB15
 2607 05f9 01       		.uleb128 0x1
 2608 05fa 9C       		.byte	0x9c
 2609 05fb 88060000 		.4byte	0x688
 2610 05ff 0B       		.uleb128 0xb
 2611 0600 2A030000 		.4byte	.LASF42
 2612 0604 01       		.byte	0x1
 2613 0605 C809     		.2byte	0x9c8
 2614 0607 6B000000 		.4byte	0x6b
 2615 060b 32030000 		.4byte	.LLST24
 2616 060f 0B       		.uleb128 0xb
 2617 0610 31030000 		.4byte	.LASF59
 2618 0614 01       		.byte	0x1
 2619 0615 C809     		.2byte	0x9c8
 2620 0617 6B000000 		.4byte	0x6b
 2621 061b 53030000 		.4byte	.LLST25
 2622 061f 0C       		.uleb128 0xc
 2623 0620 FE000000 		.4byte	.LASF23
 2624 0624 01       		.byte	0x1
 2625 0625 CA09     		.2byte	0x9ca
 2626 0627 6B000000 		.4byte	0x6b
 2627 062b 74030000 		.4byte	.LLST26
 2628 062f 0C       		.uleb128 0xc
 2629 0630 73010000 		.4byte	.LASF60
 2630 0634 01       		.byte	0x1
 2631 0635 CB09     		.2byte	0x9cb
 2632 0637 83000000 		.4byte	0x83
 2633 063b 87030000 		.4byte	.LLST27
ARM GAS  e:\temp\cc2tFLyS.s 			page 104


 2634 063f 0C       		.uleb128 0xc
 2635 0640 41020000 		.4byte	.LASF61
 2636 0644 01       		.byte	0x1
 2637 0645 CC09     		.2byte	0x9cc
 2638 0647 83000000 		.4byte	0x83
 2639 064b 9A030000 		.4byte	.LLST28
 2640 064f 11       		.uleb128 0x11
 2641 0650 10000000 		.4byte	.LVL72
 2642 0654 BF030000 		.4byte	0x3bf
 2643 0658 62060000 		.4byte	0x662
 2644 065c 12       		.uleb128 0x12
 2645 065d 01       		.uleb128 0x1
 2646 065e 50       		.byte	0x50
 2647 065f 01       		.uleb128 0x1
 2648 0660 30       		.byte	0x30
 2649 0661 00       		.byte	0
 2650 0662 11       		.uleb128 0x11
 2651 0663 1A000000 		.4byte	.LVL73
 2652 0667 BF030000 		.4byte	0x3bf
 2653 066b 75060000 		.4byte	0x675
 2654 066f 12       		.uleb128 0x12
 2655 0670 01       		.uleb128 0x1
 2656 0671 50       		.byte	0x50
 2657 0672 01       		.uleb128 0x1
 2658 0673 30       		.byte	0x30
 2659 0674 00       		.byte	0
 2660 0675 0D       		.uleb128 0xd
 2661 0676 26000000 		.4byte	.LVL75
 2662 067a 610A0000 		.4byte	0xa61
 2663 067e 0D       		.uleb128 0xd
 2664 067f 46000000 		.4byte	.LVL81
 2665 0683 6C0A0000 		.4byte	0xa6c
 2666 0687 00       		.byte	0
 2667 0688 0F       		.uleb128 0xf
 2668 0689 9D010000 		.4byte	.LASF62
 2669 068d 01       		.byte	0x1
 2670 068e EA09     		.2byte	0x9ea
 2671 0690 6B000000 		.4byte	0x6b
 2672 0694 00000000 		.4byte	.LFB16
 2673 0698 2C000000 		.4byte	.LFE16-.LFB16
 2674 069c 01       		.uleb128 0x1
 2675 069d 9C       		.byte	0x9c
 2676 069e D2060000 		.4byte	0x6d2
 2677 06a2 0B       		.uleb128 0xb
 2678 06a3 2A030000 		.4byte	.LASF42
 2679 06a7 01       		.byte	0x1
 2680 06a8 EA09     		.2byte	0x9ea
 2681 06aa 6B000000 		.4byte	0x6b
 2682 06ae CE030000 		.4byte	.LLST29
 2683 06b2 0C       		.uleb128 0xc
 2684 06b3 31030000 		.4byte	.LASF59
 2685 06b7 01       		.byte	0x1
 2686 06b8 EC09     		.2byte	0x9ec
 2687 06ba 6B000000 		.4byte	0x6b
 2688 06be EF030000 		.4byte	.LLST30
 2689 06c2 13       		.uleb128 0x13
 2690 06c3 0E000000 		.4byte	.LVL85
ARM GAS  e:\temp\cc2tFLyS.s 			page 105


 2691 06c7 BF030000 		.4byte	0x3bf
 2692 06cb 12       		.uleb128 0x12
 2693 06cc 01       		.uleb128 0x1
 2694 06cd 50       		.byte	0x50
 2695 06ce 01       		.uleb128 0x1
 2696 06cf 30       		.byte	0x30
 2697 06d0 00       		.byte	0
 2698 06d1 00       		.byte	0
 2699 06d2 15       		.uleb128 0x15
 2700 06d3 9C000000 		.4byte	.LASF63
 2701 06d7 01       		.byte	0x1
 2702 06d8 650A     		.2byte	0xa65
 2703 06da 00000000 		.4byte	.LFB23
 2704 06de 18000000 		.4byte	.LFE23-.LFB23
 2705 06e2 01       		.uleb128 0x1
 2706 06e3 9C       		.byte	0x9c
 2707 06e4 0A       		.uleb128 0xa
 2708 06e5 02060000 		.4byte	.LASF64
 2709 06e9 01       		.byte	0x1
 2710 06ea 790A     		.2byte	0xa79
 2711 06ec 00000000 		.4byte	.LFB24
 2712 06f0 30000000 		.4byte	.LFE24-.LFB24
 2713 06f4 01       		.uleb128 0x1
 2714 06f5 9C       		.byte	0x9c
 2715 06f6 1D070000 		.4byte	0x71d
 2716 06fa 0B       		.uleb128 0xb
 2717 06fb 4B040000 		.4byte	.LASF65
 2718 06ff 01       		.byte	0x1
 2719 0700 790A     		.2byte	0xa79
 2720 0702 83000000 		.4byte	0x83
 2721 0706 02040000 		.4byte	.LLST31
 2722 070a 0D       		.uleb128 0xd
 2723 070b 0E000000 		.4byte	.LVL90
 2724 070f 770A0000 		.4byte	0xa77
 2725 0713 0D       		.uleb128 0xd
 2726 0714 26000000 		.4byte	.LVL92
 2727 0718 770A0000 		.4byte	0xa77
 2728 071c 00       		.byte	0
 2729 071d 0A       		.uleb128 0xa
 2730 071e 63050000 		.4byte	.LASF66
 2731 0722 01       		.byte	0x1
 2732 0723 900A     		.2byte	0xa90
 2733 0725 00000000 		.4byte	.LFB25
 2734 0729 14000000 		.4byte	.LFE25-.LFB25
 2735 072d 01       		.uleb128 0x1
 2736 072e 9C       		.byte	0x9c
 2737 072f 4D070000 		.4byte	0x74d
 2738 0733 0B       		.uleb128 0xb
 2739 0734 91060000 		.4byte	.LASF67
 2740 0738 01       		.byte	0x1
 2741 0739 900A     		.2byte	0xa90
 2742 073b 77000000 		.4byte	0x77
 2743 073f 20040000 		.4byte	.LLST32
 2744 0743 0D       		.uleb128 0xd
 2745 0744 0C000000 		.4byte	.LVL96
 2746 0748 770A0000 		.4byte	0xa77
 2747 074c 00       		.byte	0
ARM GAS  e:\temp\cc2tFLyS.s 			page 106


 2748 074d 16       		.uleb128 0x16
 2749 074e F2000000 		.4byte	.LASF68
 2750 0752 01       		.byte	0x1
 2751 0753 9E0A     		.2byte	0xa9e
 2752 0755 00000000 		.4byte	.LFB26
 2753 0759 4C000000 		.4byte	.LFE26-.LFB26
 2754 075d 01       		.uleb128 0x1
 2755 075e 9C       		.byte	0x9c
 2756 075f 74070000 		.4byte	0x774
 2757 0763 0B       		.uleb128 0xb
 2758 0764 ED000000 		.4byte	.LASF49
 2759 0768 01       		.byte	0x1
 2760 0769 9E0A     		.2byte	0xa9e
 2761 076b 83000000 		.4byte	0x83
 2762 076f 41040000 		.4byte	.LLST33
 2763 0773 00       		.byte	0
 2764 0774 15       		.uleb128 0x15
 2765 0775 4B060000 		.4byte	.LASF69
 2766 0779 01       		.byte	0x1
 2767 077a 0A0B     		.2byte	0xb0a
 2768 077c 00000000 		.4byte	.LFB30
 2769 0780 10000000 		.4byte	.LFE30-.LFB30
 2770 0784 01       		.uleb128 0x1
 2771 0785 9C       		.byte	0x9c
 2772 0786 15       		.uleb128 0x15
 2773 0787 AC000000 		.4byte	.LASF70
 2774 078b 01       		.byte	0x1
 2775 078c 1A0B     		.2byte	0xb1a
 2776 078e 00000000 		.4byte	.LFB31
 2777 0792 10000000 		.4byte	.LFE31-.LFB31
 2778 0796 01       		.uleb128 0x1
 2779 0797 9C       		.byte	0x9c
 2780 0798 0A       		.uleb128 0xa
 2781 0799 86050000 		.4byte	.LASF71
 2782 079d 01       		.byte	0x1
 2783 079e F90A     		.2byte	0xaf9
 2784 07a0 00000000 		.4byte	.LFB29
 2785 07a4 18000000 		.4byte	.LFE29-.LFB29
 2786 07a8 01       		.uleb128 0x1
 2787 07a9 9C       		.byte	0x9c
 2788 07aa B8070000 		.4byte	0x7b8
 2789 07ae 0D       		.uleb128 0xd
 2790 07af 06000000 		.4byte	.LVL101
 2791 07b3 86070000 		.4byte	0x786
 2792 07b7 00       		.byte	0
 2793 07b8 15       		.uleb128 0x15
 2794 07b9 22060000 		.4byte	.LASF72
 2795 07bd 01       		.byte	0x1
 2796 07be 2A0B     		.2byte	0xb2a
 2797 07c0 00000000 		.4byte	.LFB32
 2798 07c4 10000000 		.4byte	.LFE32-.LFB32
 2799 07c8 01       		.uleb128 0x1
 2800 07c9 9C       		.byte	0x9c
 2801 07ca 0A       		.uleb128 0xa
 2802 07cb A5060000 		.4byte	.LASF73
 2803 07cf 01       		.byte	0x1
 2804 07d0 3B0B     		.2byte	0xb3b
ARM GAS  e:\temp\cc2tFLyS.s 			page 107


 2805 07d2 00000000 		.4byte	.LFB33
 2806 07d6 10000000 		.4byte	.LFE33-.LFB33
 2807 07da 01       		.uleb128 0x1
 2808 07db 9C       		.byte	0x9c
 2809 07dc F1070000 		.4byte	0x7f1
 2810 07e0 0B       		.uleb128 0xb
 2811 07e1 41020000 		.4byte	.LASF61
 2812 07e5 01       		.byte	0x1
 2813 07e6 3B0B     		.2byte	0xb3b
 2814 07e8 83000000 		.4byte	0x83
 2815 07ec 62040000 		.4byte	.LLST34
 2816 07f0 00       		.byte	0
 2817 07f1 17       		.uleb128 0x17
 2818 07f2 12010000 		.4byte	.LASF74
 2819 07f6 01       		.byte	0x1
 2820 07f7 4B0B     		.2byte	0xb4b
 2821 07f9 83000000 		.4byte	0x83
 2822 07fd 00000000 		.4byte	.LFB34
 2823 0801 10000000 		.4byte	.LFE34-.LFB34
 2824 0805 01       		.uleb128 0x1
 2825 0806 9C       		.byte	0x9c
 2826 0807 17       		.uleb128 0x17
 2827 0808 DD030000 		.4byte	.LASF75
 2828 080c 01       		.byte	0x1
 2829 080d 5B0B     		.2byte	0xb5b
 2830 080f 83000000 		.4byte	0x83
 2831 0813 00000000 		.4byte	.LFB35
 2832 0817 10000000 		.4byte	.LFE35-.LFB35
 2833 081b 01       		.uleb128 0x1
 2834 081c 9C       		.byte	0x9c
 2835 081d 0A       		.uleb128 0xa
 2836 081e 03030000 		.4byte	.LASF76
 2837 0822 01       		.byte	0x1
 2838 0823 7B0B     		.2byte	0xb7b
 2839 0825 00000000 		.4byte	.LFB36
 2840 0829 20000000 		.4byte	.LFE36-.LFB36
 2841 082d 01       		.uleb128 0x1
 2842 082e 9C       		.byte	0x9c
 2843 082f 42080000 		.4byte	0x842
 2844 0833 0E       		.uleb128 0xe
 2845 0834 47020000 		.4byte	.LASF77
 2846 0838 01       		.byte	0x1
 2847 0839 7B0B     		.2byte	0xb7b
 2848 083b 83000000 		.4byte	0x83
 2849 083f 01       		.uleb128 0x1
 2850 0840 50       		.byte	0x50
 2851 0841 00       		.byte	0
 2852 0842 17       		.uleb128 0x17
 2853 0843 0A060000 		.4byte	.LASF78
 2854 0847 01       		.byte	0x1
 2855 0848 940B     		.2byte	0xb94
 2856 084a 83000000 		.4byte	0x83
 2857 084e 00000000 		.4byte	.LFB37
 2858 0852 10000000 		.4byte	.LFE37-.LFB37
 2859 0856 01       		.uleb128 0x1
 2860 0857 9C       		.byte	0x9c
 2861 0858 17       		.uleb128 0x17
ARM GAS  e:\temp\cc2tFLyS.s 			page 108


 2862 0859 61020000 		.4byte	.LASF79
 2863 085d 01       		.byte	0x1
 2864 085e AB0B     		.2byte	0xbab
 2865 0860 83000000 		.4byte	0x83
 2866 0864 00000000 		.4byte	.LFB38
 2867 0868 10000000 		.4byte	.LFE38-.LFB38
 2868 086c 01       		.uleb128 0x1
 2869 086d 9C       		.byte	0x9c
 2870 086e 18       		.uleb128 0x18
 2871 086f B8060000 		.4byte	.LASF102
 2872 0873 01       		.byte	0x1
 2873 0874 000C     		.2byte	0xc00
 2874 0876 00000000 		.4byte	.LFB42
 2875 087a 28000000 		.4byte	.LFE42-.LFB42
 2876 087e 01       		.uleb128 0x1
 2877 087f 9C       		.byte	0x9c
 2878 0880 9C080000 		.4byte	0x89c
 2879 0884 19       		.uleb128 0x19
 2880 0885 6900     		.ascii	"i\000"
 2881 0887 01       		.byte	0x1
 2882 0888 020C     		.2byte	0xc02
 2883 088a 83000000 		.4byte	0x83
 2884 088e 83040000 		.4byte	.LLST35
 2885 0892 0D       		.uleb128 0xd
 2886 0893 06000000 		.4byte	.LVL105
 2887 0897 58080000 		.4byte	0x858
 2888 089b 00       		.byte	0
 2889 089c 15       		.uleb128 0x15
 2890 089d 84020000 		.4byte	.LASF80
 2891 08a1 01       		.byte	0x1
 2892 08a2 B80B     		.2byte	0xbb8
 2893 08a4 00000000 		.4byte	.LFB39
 2894 08a8 0C000000 		.4byte	.LFE39-.LFB39
 2895 08ac 01       		.uleb128 0x1
 2896 08ad 9C       		.byte	0x9c
 2897 08ae 16       		.uleb128 0x16
 2898 08af 33020000 		.4byte	.LASF81
 2899 08b3 01       		.byte	0x1
 2900 08b4 DB0A     		.2byte	0xadb
 2901 08b6 00000000 		.4byte	.LFB28
 2902 08ba 44000000 		.4byte	.LFE28-.LFB28
 2903 08be 01       		.uleb128 0x1
 2904 08bf 9C       		.byte	0x9c
 2905 08c0 14090000 		.4byte	0x914
 2906 08c4 19       		.uleb128 0x19
 2907 08c5 6900     		.ascii	"i\000"
 2908 08c7 01       		.byte	0x1
 2909 08c8 DD0A     		.2byte	0xadd
 2910 08ca 83000000 		.4byte	0x83
 2911 08ce A1040000 		.4byte	.LLST36
 2912 08d2 11       		.uleb128 0x11
 2913 08d3 1C000000 		.4byte	.LVL115
 2914 08d7 7F040000 		.4byte	0x47f
 2915 08db EE080000 		.4byte	0x8ee
 2916 08df 12       		.uleb128 0x12
 2917 08e0 01       		.uleb128 0x1
 2918 08e1 50       		.byte	0x50
ARM GAS  e:\temp\cc2tFLyS.s 			page 109


 2919 08e2 01       		.uleb128 0x1
 2920 08e3 3F       		.byte	0x3f
 2921 08e4 12       		.uleb128 0x12
 2922 08e5 01       		.uleb128 0x1
 2923 08e6 51       		.byte	0x51
 2924 08e7 05       		.uleb128 0x5
 2925 08e8 03       		.byte	0x3
 2926 08e9 00000000 		.4byte	CySysTickServiceCallbacks
 2927 08ed 00       		.byte	0
 2928 08ee 11       		.uleb128 0x11
 2929 08ef 22000000 		.4byte	.LVL116
 2930 08f3 1D080000 		.4byte	0x81d
 2931 08f7 01090000 		.4byte	0x901
 2932 08fb 12       		.uleb128 0x12
 2933 08fc 01       		.uleb128 0x1
 2934 08fd 50       		.byte	0x50
 2935 08fe 01       		.uleb128 0x1
 2936 08ff 31       		.byte	0x31
 2937 0900 00       		.byte	0
 2938 0901 0D       		.uleb128 0xd
 2939 0902 32000000 		.4byte	.LVL118
 2940 0906 CA070000 		.4byte	0x7ca
 2941 090a 0D       		.uleb128 0xd
 2942 090b 36000000 		.4byte	.LVL119
 2943 090f 9C080000 		.4byte	0x89c
 2944 0913 00       		.byte	0
 2945 0914 0A       		.uleb128 0xa
 2946 0915 7C030000 		.4byte	.LASF82
 2947 0919 01       		.byte	0x1
 2948 091a BE0A     		.2byte	0xabe
 2949 091c 00000000 		.4byte	.LFB27
 2950 0920 20000000 		.4byte	.LFE27-.LFB27
 2951 0924 01       		.uleb128 0x1
 2952 0925 9C       		.byte	0x9c
 2953 0926 3D090000 		.4byte	0x93d
 2954 092a 0D       		.uleb128 0xd
 2955 092b 0E000000 		.4byte	.LVL120
 2956 092f AE080000 		.4byte	0x8ae
 2957 0933 0D       		.uleb128 0xd
 2958 0934 18000000 		.4byte	.LVL121
 2959 0938 98070000 		.4byte	0x798
 2960 093c 00       		.byte	0
 2961 093d 0F       		.uleb128 0xf
 2962 093e C3050000 		.4byte	.LASF83
 2963 0942 01       		.byte	0x1
 2964 0943 DB0B     		.2byte	0xbdb
 2965 0945 E7000000 		.4byte	0xe7
 2966 0949 00000000 		.4byte	.LFB40
 2967 094d 10000000 		.4byte	.LFE40-.LFB40
 2968 0951 01       		.uleb128 0x1
 2969 0952 9C       		.byte	0x9c
 2970 0953 84090000 		.4byte	0x984
 2971 0957 0B       		.uleb128 0xb
 2972 0958 2A030000 		.4byte	.LASF42
 2973 095c 01       		.byte	0x1
 2974 095d DB0B     		.2byte	0xbdb
 2975 095f 83000000 		.4byte	0x83
ARM GAS  e:\temp\cc2tFLyS.s 			page 110


 2976 0963 C0040000 		.4byte	.LLST37
 2977 0967 0E       		.uleb128 0xe
 2978 0968 D4030000 		.4byte	.LASF84
 2979 096c 01       		.byte	0x1
 2980 096d DB0B     		.2byte	0xbdb
 2981 096f E7000000 		.4byte	0xe7
 2982 0973 01       		.uleb128 0x1
 2983 0974 51       		.byte	0x51
 2984 0975 10       		.uleb128 0x10
 2985 0976 52000000 		.4byte	.LASF85
 2986 097a 01       		.byte	0x1
 2987 097b DD0B     		.2byte	0xbdd
 2988 097d E7000000 		.4byte	0xe7
 2989 0981 01       		.uleb128 0x1
 2990 0982 50       		.byte	0x50
 2991 0983 00       		.byte	0
 2992 0984 0F       		.uleb128 0xf
 2993 0985 3B010000 		.4byte	.LASF86
 2994 0989 01       		.byte	0x1
 2995 098a F30B     		.2byte	0xbf3
 2996 098c E7000000 		.4byte	0xe7
 2997 0990 00000000 		.4byte	.LFB41
 2998 0994 0C000000 		.4byte	.LFE41-.LFB41
 2999 0998 01       		.uleb128 0x1
 3000 0999 9C       		.byte	0x9c
 3001 099a AF090000 		.4byte	0x9af
 3002 099e 0B       		.uleb128 0xb
 3003 099f 2A030000 		.4byte	.LASF42
 3004 09a3 01       		.byte	0x1
 3005 09a4 F30B     		.2byte	0xbf3
 3006 09a6 83000000 		.4byte	0x83
 3007 09aa E1040000 		.4byte	.LLST38
 3008 09ae 00       		.byte	0
 3009 09af 0A       		.uleb128 0xa
 3010 09b0 53020000 		.4byte	.LASF87
 3011 09b4 01       		.byte	0x1
 3012 09b5 200C     		.2byte	0xc20
 3013 09b7 00000000 		.4byte	.LFB43
 3014 09bb 70000000 		.4byte	.LFE43-.LFB43
 3015 09bf 01       		.uleb128 0x1
 3016 09c0 9C       		.byte	0x9c
 3017 09c1 D4090000 		.4byte	0x9d4
 3018 09c5 0E       		.uleb128 0xe
 3019 09c6 F9050000 		.4byte	.LASF88
 3020 09ca 01       		.byte	0x1
 3021 09cb 200C     		.2byte	0xc20
 3022 09cd D4090000 		.4byte	0x9d4
 3023 09d1 01       		.uleb128 0x1
 3024 09d2 50       		.byte	0x50
 3025 09d3 00       		.byte	0
 3026 09d4 06       		.uleb128 0x6
 3027 09d5 04       		.byte	0x4
 3028 09d6 83000000 		.4byte	0x83
 3029 09da 1A       		.uleb128 0x1a
 3030 09db E7000000 		.4byte	0xe7
 3031 09df EA090000 		.4byte	0x9ea
 3032 09e3 1B       		.uleb128 0x1b
ARM GAS  e:\temp\cc2tFLyS.s 			page 111


 3033 09e4 E0000000 		.4byte	0xe0
 3034 09e8 04       		.byte	0x4
 3035 09e9 00       		.byte	0
 3036 09ea 1C       		.uleb128 0x1c
 3037 09eb D8050000 		.4byte	.LASF89
 3038 09ef 01       		.byte	0x1
 3039 09f0 22       		.byte	0x22
 3040 09f1 DA090000 		.4byte	0x9da
 3041 09f5 05       		.uleb128 0x5
 3042 09f6 03       		.byte	0x3
 3043 09f7 00000000 		.4byte	CySysTickCallbacks
 3044 09fb 1D       		.uleb128 0x1d
 3045 09fc EF030000 		.4byte	.LASF90
 3046 0a00 01       		.byte	0x1
 3047 0a01 1B       		.byte	0x1b
 3048 0a02 83000000 		.4byte	0x83
 3049 0a06 05       		.uleb128 0x5
 3050 0a07 03       		.byte	0x3
 3051 0a08 00000000 		.4byte	cydelayFreqHz
 3052 0a0c 1D       		.uleb128 0x1d
 3053 0a0d 56010000 		.4byte	.LASF91
 3054 0a11 01       		.byte	0x1
 3055 0a12 1C       		.byte	0x1c
 3056 0a13 83000000 		.4byte	0x83
 3057 0a17 05       		.uleb128 0x5
 3058 0a18 03       		.byte	0x3
 3059 0a19 00000000 		.4byte	cydelayFreqKhz
 3060 0a1d 1D       		.uleb128 0x1d
 3061 0a1e 3C060000 		.4byte	.LASF92
 3062 0a22 01       		.byte	0x1
 3063 0a23 1D       		.byte	0x1d
 3064 0a24 6B000000 		.4byte	0x6b
 3065 0a28 05       		.uleb128 0x5
 3066 0a29 03       		.byte	0x3
 3067 0a2a 00000000 		.4byte	cydelayFreqMhz
 3068 0a2e 1D       		.uleb128 0x1d
 3069 0a2f AE010000 		.4byte	.LASF93
 3070 0a33 01       		.byte	0x1
 3071 0a34 1E       		.byte	0x1e
 3072 0a35 83000000 		.4byte	0x83
 3073 0a39 05       		.uleb128 0x5
 3074 0a3a 03       		.byte	0x3
 3075 0a3b 00000000 		.4byte	cydelay32kMs
 3076 0a3f 1D       		.uleb128 0x1d
 3077 0a40 7E000000 		.4byte	.LASF94
 3078 0a44 01       		.byte	0x1
 3079 0a45 36       		.byte	0x36
 3080 0a46 83000000 		.4byte	0x83
 3081 0a4a 05       		.uleb128 0x5
 3082 0a4b 03       		.byte	0x3
 3083 0a4c 00000000 		.4byte	CySysTickInitVar
 3084 0a50 1D       		.uleb128 0x1d
 3085 0a51 38000000 		.4byte	.LASF95
 3086 0a55 01       		.byte	0x1
 3087 0a56 5C       		.byte	0x5c
 3088 0a57 83000000 		.4byte	0x83
 3089 0a5b 05       		.uleb128 0x5
ARM GAS  e:\temp\cc2tFLyS.s 			page 112


 3090 0a5c 03       		.byte	0x3
 3091 0a5d 00000000 		.4byte	CySysClkPumpConfig
 3092 0a61 1E       		.uleb128 0x1e
 3093 0a62 B5020000 		.4byte	.LASF96
 3094 0a66 B5020000 		.4byte	.LASF96
 3095 0a6a 03       		.byte	0x3
 3096 0a6b E5       		.byte	0xe5
 3097 0a6c 1E       		.uleb128 0x1e
 3098 0a6d 14040000 		.4byte	.LASF97
 3099 0a71 14040000 		.4byte	.LASF97
 3100 0a75 03       		.byte	0x3
 3101 0a76 E6       		.byte	0xe6
 3102 0a77 1E       		.uleb128 0x1e
 3103 0a78 58040000 		.4byte	.LASF98
 3104 0a7c 58040000 		.4byte	.LASF98
 3105 0a80 03       		.byte	0x3
 3106 0a81 DC       		.byte	0xdc
 3107 0a82 00       		.byte	0
 3108              		.section	.debug_abbrev,"",%progbits
 3109              	.Ldebug_abbrev0:
 3110 0000 01       		.uleb128 0x1
 3111 0001 11       		.uleb128 0x11
 3112 0002 01       		.byte	0x1
 3113 0003 25       		.uleb128 0x25
 3114 0004 0E       		.uleb128 0xe
 3115 0005 13       		.uleb128 0x13
 3116 0006 0B       		.uleb128 0xb
 3117 0007 03       		.uleb128 0x3
 3118 0008 0E       		.uleb128 0xe
 3119 0009 1B       		.uleb128 0x1b
 3120 000a 0E       		.uleb128 0xe
 3121 000b 55       		.uleb128 0x55
 3122 000c 17       		.uleb128 0x17
 3123 000d 11       		.uleb128 0x11
 3124 000e 01       		.uleb128 0x1
 3125 000f 10       		.uleb128 0x10
 3126 0010 17       		.uleb128 0x17
 3127 0011 00       		.byte	0
 3128 0012 00       		.byte	0
 3129 0013 02       		.uleb128 0x2
 3130 0014 24       		.uleb128 0x24
 3131 0015 00       		.byte	0
 3132 0016 0B       		.uleb128 0xb
 3133 0017 0B       		.uleb128 0xb
 3134 0018 3E       		.uleb128 0x3e
 3135 0019 0B       		.uleb128 0xb
 3136 001a 03       		.uleb128 0x3
 3137 001b 0E       		.uleb128 0xe
 3138 001c 00       		.byte	0
 3139 001d 00       		.byte	0
 3140 001e 03       		.uleb128 0x3
 3141 001f 24       		.uleb128 0x24
 3142 0020 00       		.byte	0
 3143 0021 0B       		.uleb128 0xb
 3144 0022 0B       		.uleb128 0xb
 3145 0023 3E       		.uleb128 0x3e
 3146 0024 0B       		.uleb128 0xb
ARM GAS  e:\temp\cc2tFLyS.s 			page 113


 3147 0025 03       		.uleb128 0x3
 3148 0026 08       		.uleb128 0x8
 3149 0027 00       		.byte	0
 3150 0028 00       		.byte	0
 3151 0029 04       		.uleb128 0x4
 3152 002a 16       		.uleb128 0x16
 3153 002b 00       		.byte	0
 3154 002c 03       		.uleb128 0x3
 3155 002d 0E       		.uleb128 0xe
 3156 002e 3A       		.uleb128 0x3a
 3157 002f 0B       		.uleb128 0xb
 3158 0030 3B       		.uleb128 0x3b
 3159 0031 05       		.uleb128 0x5
 3160 0032 49       		.uleb128 0x49
 3161 0033 13       		.uleb128 0x13
 3162 0034 00       		.byte	0
 3163 0035 00       		.byte	0
 3164 0036 05       		.uleb128 0x5
 3165 0037 35       		.uleb128 0x35
 3166 0038 00       		.byte	0
 3167 0039 49       		.uleb128 0x49
 3168 003a 13       		.uleb128 0x13
 3169 003b 00       		.byte	0
 3170 003c 00       		.byte	0
 3171 003d 06       		.uleb128 0x6
 3172 003e 0F       		.uleb128 0xf
 3173 003f 00       		.byte	0
 3174 0040 0B       		.uleb128 0xb
 3175 0041 0B       		.uleb128 0xb
 3176 0042 49       		.uleb128 0x49
 3177 0043 13       		.uleb128 0x13
 3178 0044 00       		.byte	0
 3179 0045 00       		.byte	0
 3180 0046 07       		.uleb128 0x7
 3181 0047 15       		.uleb128 0x15
 3182 0048 00       		.byte	0
 3183 0049 27       		.uleb128 0x27
 3184 004a 19       		.uleb128 0x19
 3185 004b 00       		.byte	0
 3186 004c 00       		.byte	0
 3187 004d 08       		.uleb128 0x8
 3188 004e 16       		.uleb128 0x16
 3189 004f 00       		.byte	0
 3190 0050 03       		.uleb128 0x3
 3191 0051 0E       		.uleb128 0xe
 3192 0052 3A       		.uleb128 0x3a
 3193 0053 0B       		.uleb128 0xb
 3194 0054 3B       		.uleb128 0x3b
 3195 0055 0B       		.uleb128 0xb
 3196 0056 49       		.uleb128 0x49
 3197 0057 13       		.uleb128 0x13
 3198 0058 00       		.byte	0
 3199 0059 00       		.byte	0
 3200 005a 09       		.uleb128 0x9
 3201 005b 2E       		.uleb128 0x2e
 3202 005c 00       		.byte	0
 3203 005d 3F       		.uleb128 0x3f
ARM GAS  e:\temp\cc2tFLyS.s 			page 114


 3204 005e 19       		.uleb128 0x19
 3205 005f 03       		.uleb128 0x3
 3206 0060 0E       		.uleb128 0xe
 3207 0061 3A       		.uleb128 0x3a
 3208 0062 0B       		.uleb128 0xb
 3209 0063 3B       		.uleb128 0x3b
 3210 0064 0B       		.uleb128 0xb
 3211 0065 27       		.uleb128 0x27
 3212 0066 19       		.uleb128 0x19
 3213 0067 11       		.uleb128 0x11
 3214 0068 01       		.uleb128 0x1
 3215 0069 12       		.uleb128 0x12
 3216 006a 06       		.uleb128 0x6
 3217 006b 40       		.uleb128 0x40
 3218 006c 18       		.uleb128 0x18
 3219 006d 9742     		.uleb128 0x2117
 3220 006f 19       		.uleb128 0x19
 3221 0070 00       		.byte	0
 3222 0071 00       		.byte	0
 3223 0072 0A       		.uleb128 0xa
 3224 0073 2E       		.uleb128 0x2e
 3225 0074 01       		.byte	0x1
 3226 0075 3F       		.uleb128 0x3f
 3227 0076 19       		.uleb128 0x19
 3228 0077 03       		.uleb128 0x3
 3229 0078 0E       		.uleb128 0xe
 3230 0079 3A       		.uleb128 0x3a
 3231 007a 0B       		.uleb128 0xb
 3232 007b 3B       		.uleb128 0x3b
 3233 007c 05       		.uleb128 0x5
 3234 007d 27       		.uleb128 0x27
 3235 007e 19       		.uleb128 0x19
 3236 007f 11       		.uleb128 0x11
 3237 0080 01       		.uleb128 0x1
 3238 0081 12       		.uleb128 0x12
 3239 0082 06       		.uleb128 0x6
 3240 0083 40       		.uleb128 0x40
 3241 0084 18       		.uleb128 0x18
 3242 0085 9742     		.uleb128 0x2117
 3243 0087 19       		.uleb128 0x19
 3244 0088 01       		.uleb128 0x1
 3245 0089 13       		.uleb128 0x13
 3246 008a 00       		.byte	0
 3247 008b 00       		.byte	0
 3248 008c 0B       		.uleb128 0xb
 3249 008d 05       		.uleb128 0x5
 3250 008e 00       		.byte	0
 3251 008f 03       		.uleb128 0x3
 3252 0090 0E       		.uleb128 0xe
 3253 0091 3A       		.uleb128 0x3a
 3254 0092 0B       		.uleb128 0xb
 3255 0093 3B       		.uleb128 0x3b
 3256 0094 05       		.uleb128 0x5
 3257 0095 49       		.uleb128 0x49
 3258 0096 13       		.uleb128 0x13
 3259 0097 02       		.uleb128 0x2
 3260 0098 17       		.uleb128 0x17
ARM GAS  e:\temp\cc2tFLyS.s 			page 115


 3261 0099 00       		.byte	0
 3262 009a 00       		.byte	0
 3263 009b 0C       		.uleb128 0xc
 3264 009c 34       		.uleb128 0x34
 3265 009d 00       		.byte	0
 3266 009e 03       		.uleb128 0x3
 3267 009f 0E       		.uleb128 0xe
 3268 00a0 3A       		.uleb128 0x3a
 3269 00a1 0B       		.uleb128 0xb
 3270 00a2 3B       		.uleb128 0x3b
 3271 00a3 05       		.uleb128 0x5
 3272 00a4 49       		.uleb128 0x49
 3273 00a5 13       		.uleb128 0x13
 3274 00a6 02       		.uleb128 0x2
 3275 00a7 17       		.uleb128 0x17
 3276 00a8 00       		.byte	0
 3277 00a9 00       		.byte	0
 3278 00aa 0D       		.uleb128 0xd
 3279 00ab 898201   		.uleb128 0x4109
 3280 00ae 00       		.byte	0
 3281 00af 11       		.uleb128 0x11
 3282 00b0 01       		.uleb128 0x1
 3283 00b1 31       		.uleb128 0x31
 3284 00b2 13       		.uleb128 0x13
 3285 00b3 00       		.byte	0
 3286 00b4 00       		.byte	0
 3287 00b5 0E       		.uleb128 0xe
 3288 00b6 05       		.uleb128 0x5
 3289 00b7 00       		.byte	0
 3290 00b8 03       		.uleb128 0x3
 3291 00b9 0E       		.uleb128 0xe
 3292 00ba 3A       		.uleb128 0x3a
 3293 00bb 0B       		.uleb128 0xb
 3294 00bc 3B       		.uleb128 0x3b
 3295 00bd 05       		.uleb128 0x5
 3296 00be 49       		.uleb128 0x49
 3297 00bf 13       		.uleb128 0x13
 3298 00c0 02       		.uleb128 0x2
 3299 00c1 18       		.uleb128 0x18
 3300 00c2 00       		.byte	0
 3301 00c3 00       		.byte	0
 3302 00c4 0F       		.uleb128 0xf
 3303 00c5 2E       		.uleb128 0x2e
 3304 00c6 01       		.byte	0x1
 3305 00c7 3F       		.uleb128 0x3f
 3306 00c8 19       		.uleb128 0x19
 3307 00c9 03       		.uleb128 0x3
 3308 00ca 0E       		.uleb128 0xe
 3309 00cb 3A       		.uleb128 0x3a
 3310 00cc 0B       		.uleb128 0xb
 3311 00cd 3B       		.uleb128 0x3b
 3312 00ce 05       		.uleb128 0x5
 3313 00cf 27       		.uleb128 0x27
 3314 00d0 19       		.uleb128 0x19
 3315 00d1 49       		.uleb128 0x49
 3316 00d2 13       		.uleb128 0x13
 3317 00d3 11       		.uleb128 0x11
ARM GAS  e:\temp\cc2tFLyS.s 			page 116


 3318 00d4 01       		.uleb128 0x1
 3319 00d5 12       		.uleb128 0x12
 3320 00d6 06       		.uleb128 0x6
 3321 00d7 40       		.uleb128 0x40
 3322 00d8 18       		.uleb128 0x18
 3323 00d9 9742     		.uleb128 0x2117
 3324 00db 19       		.uleb128 0x19
 3325 00dc 01       		.uleb128 0x1
 3326 00dd 13       		.uleb128 0x13
 3327 00de 00       		.byte	0
 3328 00df 00       		.byte	0
 3329 00e0 10       		.uleb128 0x10
 3330 00e1 34       		.uleb128 0x34
 3331 00e2 00       		.byte	0
 3332 00e3 03       		.uleb128 0x3
 3333 00e4 0E       		.uleb128 0xe
 3334 00e5 3A       		.uleb128 0x3a
 3335 00e6 0B       		.uleb128 0xb
 3336 00e7 3B       		.uleb128 0x3b
 3337 00e8 05       		.uleb128 0x5
 3338 00e9 49       		.uleb128 0x49
 3339 00ea 13       		.uleb128 0x13
 3340 00eb 02       		.uleb128 0x2
 3341 00ec 18       		.uleb128 0x18
 3342 00ed 00       		.byte	0
 3343 00ee 00       		.byte	0
 3344 00ef 11       		.uleb128 0x11
 3345 00f0 898201   		.uleb128 0x4109
 3346 00f3 01       		.byte	0x1
 3347 00f4 11       		.uleb128 0x11
 3348 00f5 01       		.uleb128 0x1
 3349 00f6 31       		.uleb128 0x31
 3350 00f7 13       		.uleb128 0x13
 3351 00f8 01       		.uleb128 0x1
 3352 00f9 13       		.uleb128 0x13
 3353 00fa 00       		.byte	0
 3354 00fb 00       		.byte	0
 3355 00fc 12       		.uleb128 0x12
 3356 00fd 8A8201   		.uleb128 0x410a
 3357 0100 00       		.byte	0
 3358 0101 02       		.uleb128 0x2
 3359 0102 18       		.uleb128 0x18
 3360 0103 9142     		.uleb128 0x2111
 3361 0105 18       		.uleb128 0x18
 3362 0106 00       		.byte	0
 3363 0107 00       		.byte	0
 3364 0108 13       		.uleb128 0x13
 3365 0109 898201   		.uleb128 0x4109
 3366 010c 01       		.byte	0x1
 3367 010d 11       		.uleb128 0x11
 3368 010e 01       		.uleb128 0x1
 3369 010f 31       		.uleb128 0x31
 3370 0110 13       		.uleb128 0x13
 3371 0111 00       		.byte	0
 3372 0112 00       		.byte	0
 3373 0113 14       		.uleb128 0x14
 3374 0114 34       		.uleb128 0x34
ARM GAS  e:\temp\cc2tFLyS.s 			page 117


 3375 0115 00       		.byte	0
 3376 0116 03       		.uleb128 0x3
 3377 0117 0E       		.uleb128 0xe
 3378 0118 3A       		.uleb128 0x3a
 3379 0119 0B       		.uleb128 0xb
 3380 011a 3B       		.uleb128 0x3b
 3381 011b 05       		.uleb128 0x5
 3382 011c 49       		.uleb128 0x49
 3383 011d 13       		.uleb128 0x13
 3384 011e 1C       		.uleb128 0x1c
 3385 011f 06       		.uleb128 0x6
 3386 0120 00       		.byte	0
 3387 0121 00       		.byte	0
 3388 0122 15       		.uleb128 0x15
 3389 0123 2E       		.uleb128 0x2e
 3390 0124 00       		.byte	0
 3391 0125 3F       		.uleb128 0x3f
 3392 0126 19       		.uleb128 0x19
 3393 0127 03       		.uleb128 0x3
 3394 0128 0E       		.uleb128 0xe
 3395 0129 3A       		.uleb128 0x3a
 3396 012a 0B       		.uleb128 0xb
 3397 012b 3B       		.uleb128 0x3b
 3398 012c 05       		.uleb128 0x5
 3399 012d 27       		.uleb128 0x27
 3400 012e 19       		.uleb128 0x19
 3401 012f 11       		.uleb128 0x11
 3402 0130 01       		.uleb128 0x1
 3403 0131 12       		.uleb128 0x12
 3404 0132 06       		.uleb128 0x6
 3405 0133 40       		.uleb128 0x40
 3406 0134 18       		.uleb128 0x18
 3407 0135 9742     		.uleb128 0x2117
 3408 0137 19       		.uleb128 0x19
 3409 0138 00       		.byte	0
 3410 0139 00       		.byte	0
 3411 013a 16       		.uleb128 0x16
 3412 013b 2E       		.uleb128 0x2e
 3413 013c 01       		.byte	0x1
 3414 013d 3F       		.uleb128 0x3f
 3415 013e 19       		.uleb128 0x19
 3416 013f 03       		.uleb128 0x3
 3417 0140 0E       		.uleb128 0xe
 3418 0141 3A       		.uleb128 0x3a
 3419 0142 0B       		.uleb128 0xb
 3420 0143 3B       		.uleb128 0x3b
 3421 0144 05       		.uleb128 0x5
 3422 0145 27       		.uleb128 0x27
 3423 0146 19       		.uleb128 0x19
 3424 0147 11       		.uleb128 0x11
 3425 0148 01       		.uleb128 0x1
 3426 0149 12       		.uleb128 0x12
 3427 014a 06       		.uleb128 0x6
 3428 014b 40       		.uleb128 0x40
 3429 014c 18       		.uleb128 0x18
 3430 014d 9642     		.uleb128 0x2116
 3431 014f 19       		.uleb128 0x19
ARM GAS  e:\temp\cc2tFLyS.s 			page 118


 3432 0150 01       		.uleb128 0x1
 3433 0151 13       		.uleb128 0x13
 3434 0152 00       		.byte	0
 3435 0153 00       		.byte	0
 3436 0154 17       		.uleb128 0x17
 3437 0155 2E       		.uleb128 0x2e
 3438 0156 00       		.byte	0
 3439 0157 3F       		.uleb128 0x3f
 3440 0158 19       		.uleb128 0x19
 3441 0159 03       		.uleb128 0x3
 3442 015a 0E       		.uleb128 0xe
 3443 015b 3A       		.uleb128 0x3a
 3444 015c 0B       		.uleb128 0xb
 3445 015d 3B       		.uleb128 0x3b
 3446 015e 05       		.uleb128 0x5
 3447 015f 27       		.uleb128 0x27
 3448 0160 19       		.uleb128 0x19
 3449 0161 49       		.uleb128 0x49
 3450 0162 13       		.uleb128 0x13
 3451 0163 11       		.uleb128 0x11
 3452 0164 01       		.uleb128 0x1
 3453 0165 12       		.uleb128 0x12
 3454 0166 06       		.uleb128 0x6
 3455 0167 40       		.uleb128 0x40
 3456 0168 18       		.uleb128 0x18
 3457 0169 9742     		.uleb128 0x2117
 3458 016b 19       		.uleb128 0x19
 3459 016c 00       		.byte	0
 3460 016d 00       		.byte	0
 3461 016e 18       		.uleb128 0x18
 3462 016f 2E       		.uleb128 0x2e
 3463 0170 01       		.byte	0x1
 3464 0171 03       		.uleb128 0x3
 3465 0172 0E       		.uleb128 0xe
 3466 0173 3A       		.uleb128 0x3a
 3467 0174 0B       		.uleb128 0xb
 3468 0175 3B       		.uleb128 0x3b
 3469 0176 05       		.uleb128 0x5
 3470 0177 27       		.uleb128 0x27
 3471 0178 19       		.uleb128 0x19
 3472 0179 11       		.uleb128 0x11
 3473 017a 01       		.uleb128 0x1
 3474 017b 12       		.uleb128 0x12
 3475 017c 06       		.uleb128 0x6
 3476 017d 40       		.uleb128 0x40
 3477 017e 18       		.uleb128 0x18
 3478 017f 9642     		.uleb128 0x2116
 3479 0181 19       		.uleb128 0x19
 3480 0182 01       		.uleb128 0x1
 3481 0183 13       		.uleb128 0x13
 3482 0184 00       		.byte	0
 3483 0185 00       		.byte	0
 3484 0186 19       		.uleb128 0x19
 3485 0187 34       		.uleb128 0x34
 3486 0188 00       		.byte	0
 3487 0189 03       		.uleb128 0x3
 3488 018a 08       		.uleb128 0x8
ARM GAS  e:\temp\cc2tFLyS.s 			page 119


 3489 018b 3A       		.uleb128 0x3a
 3490 018c 0B       		.uleb128 0xb
 3491 018d 3B       		.uleb128 0x3b
 3492 018e 05       		.uleb128 0x5
 3493 018f 49       		.uleb128 0x49
 3494 0190 13       		.uleb128 0x13
 3495 0191 02       		.uleb128 0x2
 3496 0192 17       		.uleb128 0x17
 3497 0193 00       		.byte	0
 3498 0194 00       		.byte	0
 3499 0195 1A       		.uleb128 0x1a
 3500 0196 01       		.uleb128 0x1
 3501 0197 01       		.byte	0x1
 3502 0198 49       		.uleb128 0x49
 3503 0199 13       		.uleb128 0x13
 3504 019a 01       		.uleb128 0x1
 3505 019b 13       		.uleb128 0x13
 3506 019c 00       		.byte	0
 3507 019d 00       		.byte	0
 3508 019e 1B       		.uleb128 0x1b
 3509 019f 21       		.uleb128 0x21
 3510 01a0 00       		.byte	0
 3511 01a1 49       		.uleb128 0x49
 3512 01a2 13       		.uleb128 0x13
 3513 01a3 2F       		.uleb128 0x2f
 3514 01a4 0B       		.uleb128 0xb
 3515 01a5 00       		.byte	0
 3516 01a6 00       		.byte	0
 3517 01a7 1C       		.uleb128 0x1c
 3518 01a8 34       		.uleb128 0x34
 3519 01a9 00       		.byte	0
 3520 01aa 03       		.uleb128 0x3
 3521 01ab 0E       		.uleb128 0xe
 3522 01ac 3A       		.uleb128 0x3a
 3523 01ad 0B       		.uleb128 0xb
 3524 01ae 3B       		.uleb128 0x3b
 3525 01af 0B       		.uleb128 0xb
 3526 01b0 49       		.uleb128 0x49
 3527 01b1 13       		.uleb128 0x13
 3528 01b2 02       		.uleb128 0x2
 3529 01b3 18       		.uleb128 0x18
 3530 01b4 00       		.byte	0
 3531 01b5 00       		.byte	0
 3532 01b6 1D       		.uleb128 0x1d
 3533 01b7 34       		.uleb128 0x34
 3534 01b8 00       		.byte	0
 3535 01b9 03       		.uleb128 0x3
 3536 01ba 0E       		.uleb128 0xe
 3537 01bb 3A       		.uleb128 0x3a
 3538 01bc 0B       		.uleb128 0xb
 3539 01bd 3B       		.uleb128 0x3b
 3540 01be 0B       		.uleb128 0xb
 3541 01bf 49       		.uleb128 0x49
 3542 01c0 13       		.uleb128 0x13
 3543 01c1 3F       		.uleb128 0x3f
 3544 01c2 19       		.uleb128 0x19
 3545 01c3 02       		.uleb128 0x2
ARM GAS  e:\temp\cc2tFLyS.s 			page 120


 3546 01c4 18       		.uleb128 0x18
 3547 01c5 00       		.byte	0
 3548 01c6 00       		.byte	0
 3549 01c7 1E       		.uleb128 0x1e
 3550 01c8 2E       		.uleb128 0x2e
 3551 01c9 00       		.byte	0
 3552 01ca 3F       		.uleb128 0x3f
 3553 01cb 19       		.uleb128 0x19
 3554 01cc 3C       		.uleb128 0x3c
 3555 01cd 19       		.uleb128 0x19
 3556 01ce 6E       		.uleb128 0x6e
 3557 01cf 0E       		.uleb128 0xe
 3558 01d0 03       		.uleb128 0x3
 3559 01d1 0E       		.uleb128 0xe
 3560 01d2 3A       		.uleb128 0x3a
 3561 01d3 0B       		.uleb128 0xb
 3562 01d4 3B       		.uleb128 0x3b
 3563 01d5 0B       		.uleb128 0xb
 3564 01d6 00       		.byte	0
 3565 01d7 00       		.byte	0
 3566 01d8 00       		.byte	0
 3567              		.section	.debug_loc,"",%progbits
 3568              	.Ldebug_loc0:
 3569              	.LLST0:
 3570 0000 00000000 		.4byte	.LVL0
 3571 0004 07000000 		.4byte	.LVL1-1
 3572 0008 0100     		.2byte	0x1
 3573 000a 50       		.byte	0x50
 3574 000b 07000000 		.4byte	.LVL1-1
 3575 000f 12000000 		.4byte	.LVL3
 3576 0013 0100     		.2byte	0x1
 3577 0015 54       		.byte	0x54
 3578 0016 12000000 		.4byte	.LVL3
 3579 001a 20000000 		.4byte	.LFE2
 3580 001e 0400     		.2byte	0x4
 3581 0020 F3       		.byte	0xf3
 3582 0021 01       		.uleb128 0x1
 3583 0022 50       		.byte	0x50
 3584 0023 9F       		.byte	0x9f
 3585 0024 00000000 		.4byte	0
 3586 0028 00000000 		.4byte	0
 3587              	.LLST1:
 3588 002c 08000000 		.4byte	.LVL1
 3589 0030 19000000 		.4byte	.LVL5-1
 3590 0034 0100     		.2byte	0x1
 3591 0036 50       		.byte	0x50
 3592 0037 00000000 		.4byte	0
 3593 003b 00000000 		.4byte	0
 3594              	.LLST2:
 3595 003f 10000000 		.4byte	.LVL2
 3596 0043 14000000 		.4byte	.LVL4
 3597 0047 0100     		.2byte	0x1
 3598 0049 53       		.byte	0x53
 3599 004a 14000000 		.4byte	.LVL4
 3600 004e 1A000000 		.4byte	.LVL6
 3601 0052 0100     		.2byte	0x1
 3602 0054 54       		.byte	0x54
ARM GAS  e:\temp\cc2tFLyS.s 			page 121


 3603 0055 00000000 		.4byte	0
 3604 0059 00000000 		.4byte	0
 3605              	.LLST3:
 3606 005d 06000000 		.4byte	.LVL8
 3607 0061 11000000 		.4byte	.LVL10-1
 3608 0065 0100     		.2byte	0x1
 3609 0067 50       		.byte	0x50
 3610 0068 00000000 		.4byte	0
 3611 006c 00000000 		.4byte	0
 3612              	.LLST4:
 3613 0070 0E000000 		.4byte	.LVL9
 3614 0074 14000000 		.4byte	.LVL11
 3615 0078 0100     		.2byte	0x1
 3616 007a 54       		.byte	0x54
 3617 007b 14000000 		.4byte	.LVL11
 3618 007f 1C000000 		.4byte	.LFE4
 3619 0083 0100     		.2byte	0x1
 3620 0085 50       		.byte	0x50
 3621 0086 00000000 		.4byte	0
 3622 008a 00000000 		.4byte	0
 3623              	.LLST5:
 3624 008e 00000000 		.4byte	.LVL12
 3625 0092 07000000 		.4byte	.LVL13-1
 3626 0096 0100     		.2byte	0x1
 3627 0098 50       		.byte	0x50
 3628 0099 07000000 		.4byte	.LVL13-1
 3629 009d 0A000000 		.4byte	.LVL14
 3630 00a1 0100     		.2byte	0x1
 3631 00a3 54       		.byte	0x54
 3632 00a4 0A000000 		.4byte	.LVL14
 3633 00a8 24000000 		.4byte	.LFE5
 3634 00ac 0400     		.2byte	0x4
 3635 00ae F3       		.byte	0xf3
 3636 00af 01       		.uleb128 0x1
 3637 00b0 50       		.byte	0x50
 3638 00b1 9F       		.byte	0x9f
 3639 00b2 00000000 		.4byte	0
 3640 00b6 00000000 		.4byte	0
 3641              	.LLST6:
 3642 00ba 08000000 		.4byte	.LVL13
 3643 00be 1D000000 		.4byte	.LVL15-1
 3644 00c2 0100     		.2byte	0x1
 3645 00c4 50       		.byte	0x50
 3646 00c5 00000000 		.4byte	0
 3647 00c9 00000000 		.4byte	0
 3648              	.LLST7:
 3649 00cd 00000000 		.4byte	.LVL16
 3650 00d1 07000000 		.4byte	.LVL17-1
 3651 00d5 0100     		.2byte	0x1
 3652 00d7 50       		.byte	0x50
 3653 00d8 07000000 		.4byte	.LVL17-1
 3654 00dc 14000000 		.4byte	.LVL18
 3655 00e0 0100     		.2byte	0x1
 3656 00e2 54       		.byte	0x54
 3657 00e3 14000000 		.4byte	.LVL18
 3658 00e7 24000000 		.4byte	.LFE7
 3659 00eb 0400     		.2byte	0x4
ARM GAS  e:\temp\cc2tFLyS.s 			page 122


 3660 00ed F3       		.byte	0xf3
 3661 00ee 01       		.uleb128 0x1
 3662 00ef 50       		.byte	0x50
 3663 00f0 9F       		.byte	0x9f
 3664 00f1 00000000 		.4byte	0
 3665 00f5 00000000 		.4byte	0
 3666              	.LLST8:
 3667 00f9 08000000 		.4byte	.LVL17
 3668 00fd 1D000000 		.4byte	.LVL19-1
 3669 0101 0100     		.2byte	0x1
 3670 0103 50       		.byte	0x50
 3671 0104 00000000 		.4byte	0
 3672 0108 00000000 		.4byte	0
 3673              	.LLST9:
 3674 010c 00000000 		.4byte	.LVL20
 3675 0110 04000000 		.4byte	.LVL21
 3676 0114 0100     		.2byte	0x1
 3677 0116 50       		.byte	0x50
 3678 0117 04000000 		.4byte	.LVL21
 3679 011b 14000000 		.4byte	.LFE8
 3680 011f 0100     		.2byte	0x1
 3681 0121 52       		.byte	0x52
 3682 0122 00000000 		.4byte	0
 3683 0126 00000000 		.4byte	0
 3684              	.LLST10:
 3685 012a 00000000 		.4byte	.LVL26
 3686 012e 04000000 		.4byte	.LVL27
 3687 0132 0100     		.2byte	0x1
 3688 0134 50       		.byte	0x50
 3689 0135 04000000 		.4byte	.LVL27
 3690 0139 14000000 		.4byte	.LFE17
 3691 013d 0400     		.2byte	0x4
 3692 013f F3       		.byte	0xf3
 3693 0140 01       		.uleb128 0x1
 3694 0141 50       		.byte	0x50
 3695 0142 9F       		.byte	0x9f
 3696 0143 00000000 		.4byte	0
 3697 0147 00000000 		.4byte	0
 3698              	.LLST11:
 3699 014b 00000000 		.4byte	.LVL28
 3700 014f 08000000 		.4byte	.LVL29
 3701 0153 0100     		.2byte	0x1
 3702 0155 50       		.byte	0x50
 3703 0156 08000000 		.4byte	.LVL29
 3704 015a 18000000 		.4byte	.LFE18
 3705 015e 0400     		.2byte	0x4
 3706 0160 F3       		.byte	0xf3
 3707 0161 01       		.uleb128 0x1
 3708 0162 50       		.byte	0x50
 3709 0163 9F       		.byte	0x9f
 3710 0164 00000000 		.4byte	0
 3711 0168 00000000 		.4byte	0
 3712              	.LLST12:
 3713 016c 00000000 		.4byte	.LVL30
 3714 0170 04000000 		.4byte	.LVL31
 3715 0174 0100     		.2byte	0x1
 3716 0176 50       		.byte	0x50
ARM GAS  e:\temp\cc2tFLyS.s 			page 123


 3717 0177 04000000 		.4byte	.LVL31
 3718 017b 14000000 		.4byte	.LFE19
 3719 017f 0400     		.2byte	0x4
 3720 0181 F3       		.byte	0xf3
 3721 0182 01       		.uleb128 0x1
 3722 0183 50       		.byte	0x50
 3723 0184 9F       		.byte	0x9f
 3724 0185 00000000 		.4byte	0
 3725 0189 00000000 		.4byte	0
 3726              	.LLST13:
 3727 018d 00000000 		.4byte	.LVL32
 3728 0191 04000000 		.4byte	.LVL33
 3729 0195 0100     		.2byte	0x1
 3730 0197 50       		.byte	0x50
 3731 0198 04000000 		.4byte	.LVL33
 3732 019c 14000000 		.4byte	.LFE20
 3733 01a0 0400     		.2byte	0x4
 3734 01a2 F3       		.byte	0xf3
 3735 01a3 01       		.uleb128 0x1
 3736 01a4 50       		.byte	0x50
 3737 01a5 9F       		.byte	0x9f
 3738 01a6 00000000 		.4byte	0
 3739 01aa 00000000 		.4byte	0
 3740              	.LLST14:
 3741 01ae 00000000 		.4byte	.LVL34
 3742 01b2 04000000 		.4byte	.LVL35
 3743 01b6 0100     		.2byte	0x1
 3744 01b8 50       		.byte	0x50
 3745 01b9 04000000 		.4byte	.LVL35
 3746 01bd 14000000 		.4byte	.LFE21
 3747 01c1 0400     		.2byte	0x4
 3748 01c3 F3       		.byte	0xf3
 3749 01c4 01       		.uleb128 0x1
 3750 01c5 50       		.byte	0x50
 3751 01c6 9F       		.byte	0x9f
 3752 01c7 00000000 		.4byte	0
 3753 01cb 00000000 		.4byte	0
 3754              	.LLST15:
 3755 01cf 00000000 		.4byte	.LVL37
 3756 01d3 23000000 		.4byte	.LVL38-1
 3757 01d7 0100     		.2byte	0x1
 3758 01d9 50       		.byte	0x50
 3759 01da 23000000 		.4byte	.LVL38-1
 3760 01de 8C000000 		.4byte	.LVL45
 3761 01e2 0100     		.2byte	0x1
 3762 01e4 54       		.byte	0x54
 3763 01e5 8C000000 		.4byte	.LVL45
 3764 01e9 9A000000 		.4byte	.LVL47
 3765 01ed 0400     		.2byte	0x4
 3766 01ef F3       		.byte	0xf3
 3767 01f0 01       		.uleb128 0x1
 3768 01f1 50       		.byte	0x50
 3769 01f2 9F       		.byte	0x9f
 3770 01f3 9A000000 		.4byte	.LVL47
 3771 01f7 9C000000 		.4byte	.LVL48
 3772 01fb 0100     		.2byte	0x1
 3773 01fd 50       		.byte	0x50
ARM GAS  e:\temp\cc2tFLyS.s 			page 124


 3774 01fe 9C000000 		.4byte	.LVL48
 3775 0202 A0000000 		.4byte	.LVL49
 3776 0206 0100     		.2byte	0x1
 3777 0208 54       		.byte	0x54
 3778 0209 A0000000 		.4byte	.LVL49
 3779 020d BC000000 		.4byte	.LFE6
 3780 0211 0400     		.2byte	0x4
 3781 0213 F3       		.byte	0xf3
 3782 0214 01       		.uleb128 0x1
 3783 0215 50       		.byte	0x50
 3784 0216 9F       		.byte	0x9f
 3785 0217 00000000 		.4byte	0
 3786 021b 00000000 		.4byte	0
 3787              	.LLST16:
 3788 021f 26000000 		.4byte	.LVL39
 3789 0223 9A000000 		.4byte	.LVL47
 3790 0227 0100     		.2byte	0x1
 3791 0229 55       		.byte	0x55
 3792 022a 00000000 		.4byte	0
 3793 022e 00000000 		.4byte	0
 3794              	.LLST17:
 3795 0232 38000000 		.4byte	.LVL40
 3796 0236 40000000 		.4byte	.LVL41
 3797 023a 0100     		.2byte	0x1
 3798 023c 53       		.byte	0x53
 3799 023d 40000000 		.4byte	.LVL41
 3800 0241 44000000 		.4byte	.LVL42
 3801 0245 0700     		.2byte	0x7
 3802 0247 0C       		.byte	0xc
 3803 0248 0C0F0340 		.4byte	0x40030f0c
 3804 024c 06       		.byte	0x6
 3805 024d 9F       		.byte	0x9f
 3806 024e 00000000 		.4byte	0
 3807 0252 00000000 		.4byte	0
 3808              	.LLST18:
 3809 0256 00000000 		.4byte	.LVL50
 3810 025a 0C000000 		.4byte	.LVL52
 3811 025e 0100     		.2byte	0x1
 3812 0260 50       		.byte	0x50
 3813 0261 0C000000 		.4byte	.LVL52
 3814 0265 20000000 		.4byte	.LFE11
 3815 0269 0400     		.2byte	0x4
 3816 026b F3       		.byte	0xf3
 3817 026c 01       		.uleb128 0x1
 3818 026d 50       		.byte	0x50
 3819 026e 9F       		.byte	0x9f
 3820 026f 00000000 		.4byte	0
 3821 0273 00000000 		.4byte	0
 3822              	.LLST19:
 3823 0277 00000000 		.4byte	.LVL50
 3824 027b 0F000000 		.4byte	.LVL53-1
 3825 027f 0100     		.2byte	0x1
 3826 0281 51       		.byte	0x51
 3827 0282 0F000000 		.4byte	.LVL53-1
 3828 0286 1E000000 		.4byte	.LVL55
 3829 028a 0100     		.2byte	0x1
 3830 028c 55       		.byte	0x55
ARM GAS  e:\temp\cc2tFLyS.s 			page 125


 3831 028d 1E000000 		.4byte	.LVL55
 3832 0291 20000000 		.4byte	.LFE11
 3833 0295 0400     		.2byte	0x4
 3834 0297 F3       		.byte	0xf3
 3835 0298 01       		.uleb128 0x1
 3836 0299 51       		.byte	0x51
 3837 029a 9F       		.byte	0x9f
 3838 029b 00000000 		.4byte	0
 3839 029f 00000000 		.4byte	0
 3840              	.LLST20:
 3841 02a3 00000000 		.4byte	.LVL56
 3842 02a7 0A000000 		.4byte	.LVL58
 3843 02ab 0100     		.2byte	0x1
 3844 02ad 50       		.byte	0x50
 3845 02ae 0A000000 		.4byte	.LVL58
 3846 02b2 1C000000 		.4byte	.LFE12
 3847 02b6 0400     		.2byte	0x4
 3848 02b8 F3       		.byte	0xf3
 3849 02b9 01       		.uleb128 0x1
 3850 02ba 50       		.byte	0x50
 3851 02bb 9F       		.byte	0x9f
 3852 02bc 00000000 		.4byte	0
 3853 02c0 00000000 		.4byte	0
 3854              	.LLST21:
 3855 02c4 00000000 		.4byte	.LVL60
 3856 02c8 0C000000 		.4byte	.LVL62
 3857 02cc 0100     		.2byte	0x1
 3858 02ce 50       		.byte	0x50
 3859 02cf 0C000000 		.4byte	.LVL62
 3860 02d3 22000000 		.4byte	.LFE13
 3861 02d7 0400     		.2byte	0x4
 3862 02d9 F3       		.byte	0xf3
 3863 02da 01       		.uleb128 0x1
 3864 02db 50       		.byte	0x50
 3865 02dc 9F       		.byte	0x9f
 3866 02dd 00000000 		.4byte	0
 3867 02e1 00000000 		.4byte	0
 3868              	.LLST22:
 3869 02e5 00000000 		.4byte	.LVL60
 3870 02e9 0F000000 		.4byte	.LVL63-1
 3871 02ed 0100     		.2byte	0x1
 3872 02ef 51       		.byte	0x51
 3873 02f0 0F000000 		.4byte	.LVL63-1
 3874 02f4 20000000 		.4byte	.LVL65
 3875 02f8 0100     		.2byte	0x1
 3876 02fa 55       		.byte	0x55
 3877 02fb 20000000 		.4byte	.LVL65
 3878 02ff 22000000 		.4byte	.LFE13
 3879 0303 0400     		.2byte	0x4
 3880 0305 F3       		.byte	0xf3
 3881 0306 01       		.uleb128 0x1
 3882 0307 51       		.byte	0x51
 3883 0308 9F       		.byte	0x9f
 3884 0309 00000000 		.4byte	0
 3885 030d 00000000 		.4byte	0
 3886              	.LLST23:
 3887 0311 00000000 		.4byte	.LVL66
ARM GAS  e:\temp\cc2tFLyS.s 			page 126


 3888 0315 0A000000 		.4byte	.LVL68
 3889 0319 0100     		.2byte	0x1
 3890 031b 50       		.byte	0x50
 3891 031c 0A000000 		.4byte	.LVL68
 3892 0320 1E000000 		.4byte	.LFE14
 3893 0324 0400     		.2byte	0x4
 3894 0326 F3       		.byte	0xf3
 3895 0327 01       		.uleb128 0x1
 3896 0328 50       		.byte	0x50
 3897 0329 9F       		.byte	0x9f
 3898 032a 00000000 		.4byte	0
 3899 032e 00000000 		.4byte	0
 3900              	.LLST24:
 3901 0332 00000000 		.4byte	.LVL70
 3902 0336 0C000000 		.4byte	.LVL71
 3903 033a 0100     		.2byte	0x1
 3904 033c 50       		.byte	0x50
 3905 033d 0C000000 		.4byte	.LVL71
 3906 0341 4C000000 		.4byte	.LFE15
 3907 0345 0400     		.2byte	0x4
 3908 0347 F3       		.byte	0xf3
 3909 0348 01       		.uleb128 0x1
 3910 0349 50       		.byte	0x50
 3911 034a 9F       		.byte	0x9f
 3912 034b 00000000 		.4byte	0
 3913 034f 00000000 		.4byte	0
 3914              	.LLST25:
 3915 0353 00000000 		.4byte	.LVL70
 3916 0357 0F000000 		.4byte	.LVL72-1
 3917 035b 0100     		.2byte	0x1
 3918 035d 51       		.byte	0x51
 3919 035e 0F000000 		.4byte	.LVL72-1
 3920 0362 4C000000 		.4byte	.LFE15
 3921 0366 0400     		.2byte	0x4
 3922 0368 F3       		.byte	0xf3
 3923 0369 01       		.uleb128 0x1
 3924 036a 51       		.byte	0x51
 3925 036b 9F       		.byte	0x9f
 3926 036c 00000000 		.4byte	0
 3927 0370 00000000 		.4byte	0
 3928              	.LLST26:
 3929 0374 26000000 		.4byte	.LVL75
 3930 0378 45000000 		.4byte	.LVL81-1
 3931 037c 0100     		.2byte	0x1
 3932 037e 50       		.byte	0x50
 3933 037f 00000000 		.4byte	0
 3934 0383 00000000 		.4byte	0
 3935              	.LLST27:
 3936 0387 22000000 		.4byte	.LVL74
 3937 038b 46000000 		.4byte	.LVL82
 3938 038f 0100     		.2byte	0x1
 3939 0391 55       		.byte	0x55
 3940 0392 00000000 		.4byte	0
 3941 0396 00000000 		.4byte	0
 3942              	.LLST28:
 3943 039a 32000000 		.4byte	.LVL76
 3944 039e 38000000 		.4byte	.LVL77
ARM GAS  e:\temp\cc2tFLyS.s 			page 127


 3945 03a2 0100     		.2byte	0x1
 3946 03a4 51       		.byte	0x51
 3947 03a5 3A000000 		.4byte	.LVL78
 3948 03a9 3C000000 		.4byte	.LVL79
 3949 03ad 0100     		.2byte	0x1
 3950 03af 51       		.byte	0x51
 3951 03b0 3C000000 		.4byte	.LVL79
 3952 03b4 40000000 		.4byte	.LVL80
 3953 03b8 0100     		.2byte	0x1
 3954 03ba 53       		.byte	0x53
 3955 03bb 40000000 		.4byte	.LVL80
 3956 03bf 45000000 		.4byte	.LVL81-1
 3957 03c3 0100     		.2byte	0x1
 3958 03c5 51       		.byte	0x51
 3959 03c6 00000000 		.4byte	0
 3960 03ca 00000000 		.4byte	0
 3961              	.LLST29:
 3962 03ce 00000000 		.4byte	.LVL83
 3963 03d2 0A000000 		.4byte	.LVL84
 3964 03d6 0100     		.2byte	0x1
 3965 03d8 50       		.byte	0x50
 3966 03d9 0A000000 		.4byte	.LVL84
 3967 03dd 2C000000 		.4byte	.LFE16
 3968 03e1 0400     		.2byte	0x4
 3969 03e3 F3       		.byte	0xf3
 3970 03e4 01       		.uleb128 0x1
 3971 03e5 50       		.byte	0x50
 3972 03e6 9F       		.byte	0x9f
 3973 03e7 00000000 		.4byte	0
 3974 03eb 00000000 		.4byte	0
 3975              	.LLST30:
 3976 03ef 24000000 		.4byte	.LVL86
 3977 03f3 26000000 		.4byte	.LVL87
 3978 03f7 0100     		.2byte	0x1
 3979 03f9 50       		.byte	0x50
 3980 03fa 00000000 		.4byte	0
 3981 03fe 00000000 		.4byte	0
 3982              	.LLST31:
 3983 0402 00000000 		.4byte	.LVL88
 3984 0406 06000000 		.4byte	.LVL89
 3985 040a 0100     		.2byte	0x1
 3986 040c 50       		.byte	0x50
 3987 040d 06000000 		.4byte	.LVL89
 3988 0411 26000000 		.4byte	.LVL93
 3989 0415 0100     		.2byte	0x1
 3990 0417 54       		.byte	0x54
 3991 0418 00000000 		.4byte	0
 3992 041c 00000000 		.4byte	0
 3993              	.LLST32:
 3994 0420 00000000 		.4byte	.LVL94
 3995 0424 08000000 		.4byte	.LVL95
 3996 0428 0100     		.2byte	0x1
 3997 042a 50       		.byte	0x50
 3998 042b 08000000 		.4byte	.LVL95
 3999 042f 14000000 		.4byte	.LFE25
 4000 0433 0400     		.2byte	0x4
 4001 0435 F3       		.byte	0xf3
ARM GAS  e:\temp\cc2tFLyS.s 			page 128


 4002 0436 01       		.uleb128 0x1
 4003 0437 50       		.byte	0x50
 4004 0438 9F       		.byte	0x9f
 4005 0439 00000000 		.4byte	0
 4006 043d 00000000 		.4byte	0
 4007              	.LLST33:
 4008 0441 00000000 		.4byte	.LVL97
 4009 0445 1A000000 		.4byte	.LVL98
 4010 0449 0100     		.2byte	0x1
 4011 044b 50       		.byte	0x50
 4012 044c 1A000000 		.4byte	.LVL98
 4013 0450 4C000000 		.4byte	.LFE26
 4014 0454 0400     		.2byte	0x4
 4015 0456 F3       		.byte	0xf3
 4016 0457 01       		.uleb128 0x1
 4017 0458 50       		.byte	0x50
 4018 0459 9F       		.byte	0x9f
 4019 045a 00000000 		.4byte	0
 4020 045e 00000000 		.4byte	0
 4021              	.LLST34:
 4022 0462 00000000 		.4byte	.LVL102
 4023 0466 02000000 		.4byte	.LVL103
 4024 046a 0100     		.2byte	0x1
 4025 046c 50       		.byte	0x50
 4026 046d 02000000 		.4byte	.LVL103
 4027 0471 10000000 		.4byte	.LFE33
 4028 0475 0400     		.2byte	0x4
 4029 0477 F3       		.byte	0xf3
 4030 0478 01       		.uleb128 0x1
 4031 0479 50       		.byte	0x50
 4032 047a 9F       		.byte	0x9f
 4033 047b 00000000 		.4byte	0
 4034 047f 00000000 		.4byte	0
 4035              	.LLST35:
 4036 0483 0C000000 		.4byte	.LVL106
 4037 0487 1C000000 		.4byte	.LVL109
 4038 048b 0100     		.2byte	0x1
 4039 048d 54       		.byte	0x54
 4040 048e 1E000000 		.4byte	.LVL110
 4041 0492 22000000 		.4byte	.LVL111
 4042 0496 0100     		.2byte	0x1
 4043 0498 54       		.byte	0x54
 4044 0499 00000000 		.4byte	0
 4045 049d 00000000 		.4byte	0
 4046              	.LLST36:
 4047 04a1 02000000 		.4byte	.LVL112
 4048 04a5 06000000 		.4byte	.LVL113
 4049 04a9 0200     		.2byte	0x2
 4050 04ab 30       		.byte	0x30
 4051 04ac 9F       		.byte	0x9f
 4052 04ad 06000000 		.4byte	.LVL113
 4053 04b1 1B000000 		.4byte	.LVL115-1
 4054 04b5 0100     		.2byte	0x1
 4055 04b7 53       		.byte	0x53
 4056 04b8 00000000 		.4byte	0
 4057 04bc 00000000 		.4byte	0
 4058              	.LLST37:
ARM GAS  e:\temp\cc2tFLyS.s 			page 129


 4059 04c0 00000000 		.4byte	.LVL122
 4060 04c4 06000000 		.4byte	.LVL123
 4061 04c8 0100     		.2byte	0x1
 4062 04ca 50       		.byte	0x50
 4063 04cb 06000000 		.4byte	.LVL123
 4064 04cf 10000000 		.4byte	.LFE40
 4065 04d3 0400     		.2byte	0x4
 4066 04d5 F3       		.byte	0xf3
 4067 04d6 01       		.uleb128 0x1
 4068 04d7 50       		.byte	0x50
 4069 04d8 9F       		.byte	0x9f
 4070 04d9 00000000 		.4byte	0
 4071 04dd 00000000 		.4byte	0
 4072              	.LLST38:
 4073 04e1 00000000 		.4byte	.LVL124
 4074 04e5 02000000 		.4byte	.LVL125
 4075 04e9 0100     		.2byte	0x1
 4076 04eb 50       		.byte	0x50
 4077 04ec 02000000 		.4byte	.LVL125
 4078 04f0 0C000000 		.4byte	.LFE41
 4079 04f4 0400     		.2byte	0x4
 4080 04f6 F3       		.byte	0xf3
 4081 04f7 01       		.uleb128 0x1
 4082 04f8 50       		.byte	0x50
 4083 04f9 9F       		.byte	0x9f
 4084 04fa 00000000 		.4byte	0
 4085 04fe 00000000 		.4byte	0
 4086              		.section	.debug_aranges,"",%progbits
 4087 0000 74010000 		.4byte	0x174
 4088 0004 0200     		.2byte	0x2
 4089 0006 00000000 		.4byte	.Ldebug_info0
 4090 000a 04       		.byte	0x4
 4091 000b 00       		.byte	0
 4092 000c 0000     		.2byte	0
 4093 000e 0000     		.2byte	0
 4094 0010 00000000 		.4byte	.LFB0
 4095 0014 14000000 		.4byte	.LFE0-.LFB0
 4096 0018 00000000 		.4byte	.LFB1
 4097 001c 10000000 		.4byte	.LFE1-.LFB1
 4098 0020 00000000 		.4byte	.LFB2
 4099 0024 20000000 		.4byte	.LFE2-.LFB2
 4100 0028 00000000 		.4byte	.LFB3
 4101 002c 34000000 		.4byte	.LFE3-.LFB3
 4102 0030 00000000 		.4byte	.LFB4
 4103 0034 1C000000 		.4byte	.LFE4-.LFB4
 4104 0038 00000000 		.4byte	.LFB5
 4105 003c 24000000 		.4byte	.LFE5-.LFB5
 4106 0040 00000000 		.4byte	.LFB7
 4107 0044 24000000 		.4byte	.LFE7-.LFB7
 4108 0048 00000000 		.4byte	.LFB8
 4109 004c 14000000 		.4byte	.LFE8-.LFB8
 4110 0050 00000000 		.4byte	.LFB9
 4111 0054 10000000 		.4byte	.LFE9-.LFB9
 4112 0058 00000000 		.4byte	.LFB10
 4113 005c 0C000000 		.4byte	.LFE10-.LFB10
 4114 0060 00000000 		.4byte	.LFB17
 4115 0064 14000000 		.4byte	.LFE17-.LFB17
ARM GAS  e:\temp\cc2tFLyS.s 			page 130


 4116 0068 00000000 		.4byte	.LFB18
 4117 006c 18000000 		.4byte	.LFE18-.LFB18
 4118 0070 00000000 		.4byte	.LFB19
 4119 0074 14000000 		.4byte	.LFE19-.LFB19
 4120 0078 00000000 		.4byte	.LFB20
 4121 007c 14000000 		.4byte	.LFE20-.LFB20
 4122 0080 00000000 		.4byte	.LFB21
 4123 0084 14000000 		.4byte	.LFE21-.LFB21
 4124 0088 00000000 		.4byte	.LFB22
 4125 008c 04000000 		.4byte	.LFE22-.LFB22
 4126 0090 00000000 		.4byte	.LFB6
 4127 0094 BC000000 		.4byte	.LFE6-.LFB6
 4128 0098 00000000 		.4byte	.LFB11
 4129 009c 20000000 		.4byte	.LFE11-.LFB11
 4130 00a0 00000000 		.4byte	.LFB12
 4131 00a4 1C000000 		.4byte	.LFE12-.LFB12
 4132 00a8 00000000 		.4byte	.LFB13
 4133 00ac 22000000 		.4byte	.LFE13-.LFB13
 4134 00b0 00000000 		.4byte	.LFB14
 4135 00b4 1E000000 		.4byte	.LFE14-.LFB14
 4136 00b8 00000000 		.4byte	.LFB15
 4137 00bc 4C000000 		.4byte	.LFE15-.LFB15
 4138 00c0 00000000 		.4byte	.LFB16
 4139 00c4 2C000000 		.4byte	.LFE16-.LFB16
 4140 00c8 00000000 		.4byte	.LFB23
 4141 00cc 18000000 		.4byte	.LFE23-.LFB23
 4142 00d0 00000000 		.4byte	.LFB24
 4143 00d4 30000000 		.4byte	.LFE24-.LFB24
 4144 00d8 00000000 		.4byte	.LFB25
 4145 00dc 14000000 		.4byte	.LFE25-.LFB25
 4146 00e0 00000000 		.4byte	.LFB26
 4147 00e4 4C000000 		.4byte	.LFE26-.LFB26
 4148 00e8 00000000 		.4byte	.LFB30
 4149 00ec 10000000 		.4byte	.LFE30-.LFB30
 4150 00f0 00000000 		.4byte	.LFB31
 4151 00f4 10000000 		.4byte	.LFE31-.LFB31
 4152 00f8 00000000 		.4byte	.LFB29
 4153 00fc 18000000 		.4byte	.LFE29-.LFB29
 4154 0100 00000000 		.4byte	.LFB32
 4155 0104 10000000 		.4byte	.LFE32-.LFB32
 4156 0108 00000000 		.4byte	.LFB33
 4157 010c 10000000 		.4byte	.LFE33-.LFB33
 4158 0110 00000000 		.4byte	.LFB34
 4159 0114 10000000 		.4byte	.LFE34-.LFB34
 4160 0118 00000000 		.4byte	.LFB35
 4161 011c 10000000 		.4byte	.LFE35-.LFB35
 4162 0120 00000000 		.4byte	.LFB36
 4163 0124 20000000 		.4byte	.LFE36-.LFB36
 4164 0128 00000000 		.4byte	.LFB37
 4165 012c 10000000 		.4byte	.LFE37-.LFB37
 4166 0130 00000000 		.4byte	.LFB38
 4167 0134 10000000 		.4byte	.LFE38-.LFB38
 4168 0138 00000000 		.4byte	.LFB42
 4169 013c 28000000 		.4byte	.LFE42-.LFB42
 4170 0140 00000000 		.4byte	.LFB39
 4171 0144 0C000000 		.4byte	.LFE39-.LFB39
 4172 0148 00000000 		.4byte	.LFB28
ARM GAS  e:\temp\cc2tFLyS.s 			page 131


 4173 014c 44000000 		.4byte	.LFE28-.LFB28
 4174 0150 00000000 		.4byte	.LFB27
 4175 0154 20000000 		.4byte	.LFE27-.LFB27
 4176 0158 00000000 		.4byte	.LFB40
 4177 015c 10000000 		.4byte	.LFE40-.LFB40
 4178 0160 00000000 		.4byte	.LFB41
 4179 0164 0C000000 		.4byte	.LFE41-.LFB41
 4180 0168 00000000 		.4byte	.LFB43
 4181 016c 70000000 		.4byte	.LFE43-.LFB43
 4182 0170 00000000 		.4byte	0
 4183 0174 00000000 		.4byte	0
 4184              		.section	.debug_ranges,"",%progbits
 4185              	.Ldebug_ranges0:
 4186 0000 00000000 		.4byte	.LFB0
 4187 0004 14000000 		.4byte	.LFE0
 4188 0008 00000000 		.4byte	.LFB1
 4189 000c 10000000 		.4byte	.LFE1
 4190 0010 00000000 		.4byte	.LFB2
 4191 0014 20000000 		.4byte	.LFE2
 4192 0018 00000000 		.4byte	.LFB3
 4193 001c 34000000 		.4byte	.LFE3
 4194 0020 00000000 		.4byte	.LFB4
 4195 0024 1C000000 		.4byte	.LFE4
 4196 0028 00000000 		.4byte	.LFB5
 4197 002c 24000000 		.4byte	.LFE5
 4198 0030 00000000 		.4byte	.LFB7
 4199 0034 24000000 		.4byte	.LFE7
 4200 0038 00000000 		.4byte	.LFB8
 4201 003c 14000000 		.4byte	.LFE8
 4202 0040 00000000 		.4byte	.LFB9
 4203 0044 10000000 		.4byte	.LFE9
 4204 0048 00000000 		.4byte	.LFB10
 4205 004c 0C000000 		.4byte	.LFE10
 4206 0050 00000000 		.4byte	.LFB17
 4207 0054 14000000 		.4byte	.LFE17
 4208 0058 00000000 		.4byte	.LFB18
 4209 005c 18000000 		.4byte	.LFE18
 4210 0060 00000000 		.4byte	.LFB19
 4211 0064 14000000 		.4byte	.LFE19
 4212 0068 00000000 		.4byte	.LFB20
 4213 006c 14000000 		.4byte	.LFE20
 4214 0070 00000000 		.4byte	.LFB21
 4215 0074 14000000 		.4byte	.LFE21
 4216 0078 00000000 		.4byte	.LFB22
 4217 007c 04000000 		.4byte	.LFE22
 4218 0080 00000000 		.4byte	.LFB6
 4219 0084 BC000000 		.4byte	.LFE6
 4220 0088 00000000 		.4byte	.LFB11
 4221 008c 20000000 		.4byte	.LFE11
 4222 0090 00000000 		.4byte	.LFB12
 4223 0094 1C000000 		.4byte	.LFE12
 4224 0098 00000000 		.4byte	.LFB13
 4225 009c 22000000 		.4byte	.LFE13
 4226 00a0 00000000 		.4byte	.LFB14
 4227 00a4 1E000000 		.4byte	.LFE14
 4228 00a8 00000000 		.4byte	.LFB15
 4229 00ac 4C000000 		.4byte	.LFE15
ARM GAS  e:\temp\cc2tFLyS.s 			page 132


 4230 00b0 00000000 		.4byte	.LFB16
 4231 00b4 2C000000 		.4byte	.LFE16
 4232 00b8 00000000 		.4byte	.LFB23
 4233 00bc 18000000 		.4byte	.LFE23
 4234 00c0 00000000 		.4byte	.LFB24
 4235 00c4 30000000 		.4byte	.LFE24
 4236 00c8 00000000 		.4byte	.LFB25
 4237 00cc 14000000 		.4byte	.LFE25
 4238 00d0 00000000 		.4byte	.LFB26
 4239 00d4 4C000000 		.4byte	.LFE26
 4240 00d8 00000000 		.4byte	.LFB30
 4241 00dc 10000000 		.4byte	.LFE30
 4242 00e0 00000000 		.4byte	.LFB31
 4243 00e4 10000000 		.4byte	.LFE31
 4244 00e8 00000000 		.4byte	.LFB29
 4245 00ec 18000000 		.4byte	.LFE29
 4246 00f0 00000000 		.4byte	.LFB32
 4247 00f4 10000000 		.4byte	.LFE32
 4248 00f8 00000000 		.4byte	.LFB33
 4249 00fc 10000000 		.4byte	.LFE33
 4250 0100 00000000 		.4byte	.LFB34
 4251 0104 10000000 		.4byte	.LFE34
 4252 0108 00000000 		.4byte	.LFB35
 4253 010c 10000000 		.4byte	.LFE35
 4254 0110 00000000 		.4byte	.LFB36
 4255 0114 20000000 		.4byte	.LFE36
 4256 0118 00000000 		.4byte	.LFB37
 4257 011c 10000000 		.4byte	.LFE37
 4258 0120 00000000 		.4byte	.LFB38
 4259 0124 10000000 		.4byte	.LFE38
 4260 0128 00000000 		.4byte	.LFB42
 4261 012c 28000000 		.4byte	.LFE42
 4262 0130 00000000 		.4byte	.LFB39
 4263 0134 0C000000 		.4byte	.LFE39
 4264 0138 00000000 		.4byte	.LFB28
 4265 013c 44000000 		.4byte	.LFE28
 4266 0140 00000000 		.4byte	.LFB27
 4267 0144 20000000 		.4byte	.LFE27
 4268 0148 00000000 		.4byte	.LFB40
 4269 014c 10000000 		.4byte	.LFE40
 4270 0150 00000000 		.4byte	.LFB41
 4271 0154 0C000000 		.4byte	.LFE41
 4272 0158 00000000 		.4byte	.LFB43
 4273 015c 70000000 		.4byte	.LFE43
 4274 0160 00000000 		.4byte	0
 4275 0164 00000000 		.4byte	0
 4276              		.section	.debug_line,"",%progbits
 4277              	.Ldebug_line0:
 4278 0000 51040000 		.section	.debug_str,"MS",%progbits,1
 4278      02004D00 
 4278      00000201 
 4278      FB0E0D00 
 4278      01010101 
 4279              	.LASF54:
 4280 0000 72616D56 		.ascii	"ramVectorTable\000"
 4280      6563746F 
 4280      72546162 
ARM GAS  e:\temp\cc2tFLyS.s 			page 133


 4280      6C6500
 4281              	.LASF10:
 4282 000f 75696E74 		.ascii	"uint16\000"
 4282      313600
 4283              	.LASF38:
 4284 0016 696E7453 		.ascii	"intState\000"
 4284      74617465 
 4284      00
 4285              	.LASF25:
 4286 001f 43795379 		.ascii	"CySysClkWriteHfclkDirect\000"
 4286      73436C6B 
 4286      57726974 
 4286      65486663 
 4286      6C6B4469 
 4287              	.LASF95:
 4288 0038 43795379 		.ascii	"CySysClkPumpConfig\000"
 4288      73436C6B 
 4288      50756D70 
 4288      436F6E66 
 4288      696700
 4289              	.LASF53:
 4290 004b 6F6C6449 		.ascii	"oldIsr\000"
 4290      737200
 4291              	.LASF85:
 4292 0052 72657456 		.ascii	"retVal\000"
 4292      616C00
 4293              	.LASF37:
 4294 0059 43794469 		.ascii	"CyDisableInts\000"
 4294      7361626C 
 4294      65496E74 
 4294      7300
 4295              	.LASF7:
 4296 0067 6C6F6E67 		.ascii	"long long unsigned int\000"
 4296      206C6F6E 
 4296      6720756E 
 4296      7369676E 
 4296      65642069 
 4297              	.LASF94:
 4298 007e 43795379 		.ascii	"CySysTickInitVar\000"
 4298      73546963 
 4298      6B496E69 
 4298      74566172 
 4298      00
 4299              	.LASF39:
 4300 008f 4379456E 		.ascii	"CyEnableInts\000"
 4300      61626C65 
 4300      496E7473 
 4300      00
 4301              	.LASF63:
 4302 009c 4379536F 		.ascii	"CySoftwareReset\000"
 4302      66747761 
 4302      72655265 
 4302      73657400 
 4303              	.LASF70:
 4304 00ac 43795379 		.ascii	"CySysTickEnableInterrupt\000"
 4304      73546963 
 4304      6B456E61 
ARM GAS  e:\temp\cc2tFLyS.s 			page 134


 4304      626C6549 
 4304      6E746572 
 4305              	.LASF43:
 4306 00c5 4379496E 		.ascii	"CyIntGetState\000"
 4306      74476574 
 4306      53746174 
 4306      6500
 4307              	.LASF6:
 4308 00d3 6C6F6E67 		.ascii	"long long int\000"
 4308      206C6F6E 
 4308      6720696E 
 4308      7400
 4309              	.LASF0:
 4310 00e1 7369676E 		.ascii	"signed char\000"
 4310      65642063 
 4310      68617200 
 4311              	.LASF49:
 4312 00ed 66726571 		.ascii	"freq\000"
 4312      00
 4313              	.LASF68:
 4314 00f2 43794465 		.ascii	"CyDelayFreq\000"
 4314      6C617946 
 4314      72657100 
 4315              	.LASF23:
 4316 00fe 696E7465 		.ascii	"interruptState\000"
 4316      72727570 
 4316      74537461 
 4316      746500
 4317              	.LASF15:
 4318 010d 72656738 		.ascii	"reg8\000"
 4318      00
 4319              	.LASF74:
 4320 0112 43795379 		.ascii	"CySysTickGetReload\000"
 4320      73546963 
 4320      6B476574 
 4320      52656C6F 
 4320      616400
 4321              	.LASF4:
 4322 0125 6C6F6E67 		.ascii	"long int\000"
 4322      20696E74 
 4322      00
 4323              	.LASF44:
 4324 012e 4379496E 		.ascii	"CyIntDisable\000"
 4324      74446973 
 4324      61626C65 
 4324      00
 4325              	.LASF86:
 4326 013b 43795379 		.ascii	"CySysTickGetCallback\000"
 4326      73546963 
 4326      6B476574 
 4326      43616C6C 
 4326      6261636B 
 4327              	.LASF9:
 4328 0150 75696E74 		.ascii	"uint8\000"
 4328      3800
 4329              	.LASF91:
 4330 0156 63796465 		.ascii	"cydelayFreqKhz\000"
ARM GAS  e:\temp\cc2tFLyS.s 			page 135


 4330      6C617946 
 4330      7265714B 
 4330      687A00
 4331              	.LASF28:
 4332 0165 656E6162 		.ascii	"enable\000"
 4332      6C6500
 4333              	.LASF13:
 4334 016c 646F7562 		.ascii	"double\000"
 4334      6C6500
 4335              	.LASF60:
 4336 0173 73686966 		.ascii	"shift\000"
 4336      7400
 4337              	.LASF11:
 4338 0179 75696E74 		.ascii	"uint32\000"
 4338      333200
 4339              	.LASF40:
 4340 0180 6D61736B 		.ascii	"mask\000"
 4340      00
 4341              	.LASF33:
 4342 0185 43795379 		.ascii	"CySysClkGetSysclkSource\000"
 4342      73436C6B 
 4342      47657453 
 4342      7973636C 
 4342      6B536F75 
 4343              	.LASF62:
 4344 019d 4379496E 		.ascii	"CyIntGetPriority\000"
 4344      74476574 
 4344      5072696F 
 4344      72697479 
 4344      00
 4345              	.LASF93:
 4346 01ae 63796465 		.ascii	"cydelay32kMs\000"
 4346      6C617933 
 4346      326B4D73 
 4346      00
 4347              	.LASF101:
 4348 01bb 433A5C55 		.ascii	"C:\\Users\\Admin\\Desktop\\_FIRMWARE\\DBARLite\\CYP"
 4348      73657273 
 4348      5C41646D 
 4348      696E5C44 
 4348      65736B74 
 4349 01e8 44353232 		.ascii	"D5225\\CYPD5225-96BZXI_notebook\\CYPD5225-96BZXI_no"
 4349      355C4359 
 4349      50443532 
 4349      32352D39 
 4349      36425A58 
 4350 0219 7465626F 		.ascii	"tebook.cydsn\\noboot.cydsn\000"
 4350      6F6B2E63 
 4350      7964736E 
 4350      5C6E6F62 
 4350      6F6F742E 
 4351              	.LASF81:
 4352 0233 43795379 		.ascii	"CySysTickInit\000"
 4352      73546963 
 4352      6B496E69 
 4352      7400
 4353              	.LASF61:
ARM GAS  e:\temp\cc2tFLyS.s 			page 136


 4354 0241 76616C75 		.ascii	"value\000"
 4354      6500
 4355              	.LASF77:
 4356 0247 636C6F63 		.ascii	"clockSource\000"
 4356      6B536F75 
 4356      72636500 
 4357              	.LASF87:
 4358 0253 43794765 		.ascii	"CyGetUniqueId\000"
 4358      74556E69 
 4358      71756549 
 4358      6400
 4359              	.LASF79:
 4360 0261 43795379 		.ascii	"CySysTickGetCountFlag\000"
 4360      73546963 
 4360      6B476574 
 4360      436F756E 
 4360      74466C61 
 4361              	.LASF8:
 4362 0277 756E7369 		.ascii	"unsigned int\000"
 4362      676E6564 
 4362      20696E74 
 4362      00
 4363              	.LASF80:
 4364 0284 43795379 		.ascii	"CySysTickClear\000"
 4364      73546963 
 4364      6B436C65 
 4364      617200
 4365              	.LASF5:
 4366 0293 6C6F6E67 		.ascii	"long unsigned int\000"
 4366      20756E73 
 4366      69676E65 
 4366      6420696E 
 4366      7400
 4367              	.LASF22:
 4368 02a5 43795379 		.ascii	"CySysClkImoStop\000"
 4368      73436C6B 
 4368      496D6F53 
 4368      746F7000 
 4369              	.LASF96:
 4370 02b5 4379456E 		.ascii	"CyEnterCriticalSection\000"
 4370      74657243 
 4370      72697469 
 4370      63616C53 
 4370      65637469 
 4371              	.LASF45:
 4372 02cc 4379496E 		.ascii	"CyIntSetPending\000"
 4372      74536574 
 4372      50656E64 
 4372      696E6700 
 4373              	.LASF34:
 4374 02dc 43795379 		.ascii	"CySysGetResetReason\000"
 4374      73476574 
 4374      52657365 
 4374      74526561 
 4374      736F6E00 
 4375              	.LASF3:
 4376 02f0 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  e:\temp\cc2tFLyS.s 			page 137


 4376      7420756E 
 4376      7369676E 
 4376      65642069 
 4376      6E7400
 4377              	.LASF76:
 4378 0303 43795379 		.ascii	"CySysTickSetClockSource\000"
 4378      73546963 
 4378      6B536574 
 4378      436C6F63 
 4378      6B536F75 
 4379              	.LASF56:
 4380 031b 4379496E 		.ascii	"CyIntSetVector\000"
 4380      74536574 
 4380      56656374 
 4380      6F7200
 4381              	.LASF42:
 4382 032a 6E756D62 		.ascii	"number\000"
 4382      657200
 4383              	.LASF59:
 4384 0331 7072696F 		.ascii	"priority\000"
 4384      72697479 
 4384      00
 4385              	.LASF48:
 4386 033a 43795379 		.ascii	"CySysClkWriteImoFreq\000"
 4386      73436C6B 
 4386      57726974 
 4386      65496D6F 
 4386      46726571 
 4387              	.LASF51:
 4388 034f 4379496E 		.ascii	"CyIntSetSysVector\000"
 4388      74536574 
 4388      53797356 
 4388      6563746F 
 4388      7200
 4389              	.LASF26:
 4390 0361 43795379 		.ascii	"CySysEnablePumpClock\000"
 4390      73456E61 
 4390      626C6550 
 4390      756D7043 
 4390      6C6F636B 
 4391              	.LASF16:
 4392 0376 72656733 		.ascii	"reg32\000"
 4392      3200
 4393              	.LASF82:
 4394 037c 43795379 		.ascii	"CySysTickStart\000"
 4394      73546963 
 4394      6B537461 
 4394      727400
 4395              	.LASF36:
 4396 038b 72657475 		.ascii	"returnStatus\000"
 4396      726E5374 
 4396      61747573 
 4396      00
 4397              	.LASF19:
 4398 0398 73697A65 		.ascii	"sizetype\000"
 4398      74797065 
 4398      00
ARM GAS  e:\temp\cc2tFLyS.s 			page 138


 4399              	.LASF46:
 4400 03a1 4379496E 		.ascii	"CyIntClearPending\000"
 4400      74436C65 
 4400      61725065 
 4400      6E64696E 
 4400      6700
 4401              	.LASF18:
 4402 03b3 6C6F6E67 		.ascii	"long double\000"
 4402      20646F75 
 4402      626C6500 
 4403              	.LASF52:
 4404 03bf 61646472 		.ascii	"address\000"
 4404      65737300 
 4405              	.LASF29:
 4406 03c7 73797363 		.ascii	"sysclkSource\000"
 4406      6C6B536F 
 4406      75726365 
 4406      00
 4407              	.LASF84:
 4408 03d4 66756E63 		.ascii	"function\000"
 4408      74696F6E 
 4408      00
 4409              	.LASF75:
 4410 03dd 43795379 		.ascii	"CySysTickGetValue\000"
 4410      73546963 
 4410      6B476574 
 4410      56616C75 
 4410      6500
 4411              	.LASF90:
 4412 03ef 63796465 		.ascii	"cydelayFreqHz\000"
 4412      6C617946 
 4412      72657148 
 4412      7A00
 4413              	.LASF58:
 4414 03fd 4379496E 		.ascii	"CyIntSetPriority\000"
 4414      74536574 
 4414      5072696F 
 4414      72697479 
 4414      00
 4415              	.LASF12:
 4416 040e 666C6F61 		.ascii	"float\000"
 4416      7400
 4417              	.LASF97:
 4418 0414 43794578 		.ascii	"CyExitCriticalSection\000"
 4418      69744372 
 4418      69746963 
 4418      616C5365 
 4418      6374696F 
 4419              	.LASF20:
 4420 042a 63795379 		.ascii	"cySysTickCallback\000"
 4420      73546963 
 4420      6B43616C 
 4420      6C626163 
 4420      6B00
 4421              	.LASF57:
 4422 043c 4379496E 		.ascii	"CyIntGetVector\000"
 4422      74476574 
ARM GAS  e:\temp\cc2tFLyS.s 			page 139


 4422      56656374 
 4422      6F7200
 4423              	.LASF65:
 4424 044b 6D696C6C 		.ascii	"milliseconds\000"
 4424      69736563 
 4424      6F6E6473 
 4424      00
 4425              	.LASF98:
 4426 0458 43794465 		.ascii	"CyDelayCycles\000"
 4426      6C617943 
 4426      79636C65 
 4426      7300
 4427              	.LASF99:
 4428 0466 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4428      43313120 
 4428      352E342E 
 4428      31203230 
 4428      31363036 
 4429 0499 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 4429      20726576 
 4429      6973696F 
 4429      6E203233 
 4429      37373135 
 4430 04cc 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects -finline-fu"
 4430      66756E63 
 4430      74696F6E 
 4430      2D736563 
 4430      74696F6E 
 4431 04ff 6E637469 		.ascii	"nctions -fno-strict-aliasing\000"
 4431      6F6E7320 
 4431      2D666E6F 
 4431      2D737472 
 4431      6963742D 
 4432              	.LASF47:
 4433 051c 43794861 		.ascii	"CyHalt\000"
 4433      6C7400
 4434              	.LASF1:
 4435 0523 756E7369 		.ascii	"unsigned char\000"
 4435      676E6564 
 4435      20636861 
 4435      7200
 4436              	.LASF2:
 4437 0531 73686F72 		.ascii	"short int\000"
 4437      7420696E 
 4437      7400
 4438              	.LASF41:
 4439 053b 4379496E 		.ascii	"CyIntEnable\000"
 4439      74456E61 
 4439      626C6500 
 4440              	.LASF55:
 4441 0547 4379496E 		.ascii	"CyIntGetSysVector\000"
 4441      74476574 
 4441      53797356 
 4441      6563746F 
 4441      7200
 4442              	.LASF27:
 4443 0559 636C6B53 		.ascii	"clkSelect\000"
ARM GAS  e:\temp\cc2tFLyS.s 			page 140


 4443      656C6563 
 4443      7400
 4444              	.LASF66:
 4445 0563 43794465 		.ascii	"CyDelayUs\000"
 4445      6C617955 
 4445      7300
 4446              	.LASF35:
 4447 056d 72656173 		.ascii	"reason\000"
 4447      6F6E00
 4448              	.LASF14:
 4449 0574 63686172 		.ascii	"char\000"
 4449      00
 4450              	.LASF17:
 4451 0579 63796973 		.ascii	"cyisraddress\000"
 4451      72616464 
 4451      72657373 
 4451      00
 4452              	.LASF71:
 4453 0586 43795379 		.ascii	"CySysTickEnable\000"
 4453      73546963 
 4453      6B456E61 
 4453      626C6500 
 4454              	.LASF32:
 4455 0596 43795379 		.ascii	"CySysClkWriteHfclkDiv\000"
 4455      73436C6B 
 4455      57726974 
 4455      65486663 
 4455      6C6B4469 
 4456              	.LASF30:
 4457 05ac 43795379 		.ascii	"CySysClkWriteSysclkDiv\000"
 4457      73436C6B 
 4457      57726974 
 4457      65537973 
 4457      636C6B44 
 4458              	.LASF83:
 4459 05c3 43795379 		.ascii	"CySysTickSetCallback\000"
 4459      73546963 
 4459      6B536574 
 4459      43616C6C 
 4459      6261636B 
 4460              	.LASF89:
 4461 05d8 43795379 		.ascii	"CySysTickCallbacks\000"
 4461      73546963 
 4461      6B43616C 
 4461      6C626163 
 4461      6B7300
 4462              	.LASF50:
 4463 05eb 696D6F54 		.ascii	"imoTrim1Value\000"
 4463      72696D31 
 4463      56616C75 
 4463      6500
 4464              	.LASF88:
 4465 05f9 756E6971 		.ascii	"uniqueId\000"
 4465      75654964 
 4465      00
 4466              	.LASF64:
 4467 0602 43794465 		.ascii	"CyDelay\000"
ARM GAS  e:\temp\cc2tFLyS.s 			page 141


 4467      6C617900 
 4468              	.LASF78:
 4469 060a 43795379 		.ascii	"CySysTickGetClockSource\000"
 4469      73546963 
 4469      6B476574 
 4469      436C6F63 
 4469      6B536F75 
 4470              	.LASF72:
 4471 0622 43795379 		.ascii	"CySysTickDisableInterrupt\000"
 4471      73546963 
 4471      6B446973 
 4471      61626C65 
 4471      496E7465 
 4472              	.LASF92:
 4473 063c 63796465 		.ascii	"cydelayFreqMhz\000"
 4473      6C617946 
 4473      7265714D 
 4473      687A00
 4474              	.LASF69:
 4475 064b 43795379 		.ascii	"CySysTickStop\000"
 4475      73546963 
 4475      6B53746F 
 4475      7000
 4476              	.LASF31:
 4477 0659 64697669 		.ascii	"divider\000"
 4477      64657200 
 4478              	.LASF21:
 4479 0661 43795379 		.ascii	"CySysClkImoStart\000"
 4479      73436C6B 
 4479      496D6F53 
 4479      74617274 
 4479      00
 4480              	.LASF100:
 4481 0672 47656E65 		.ascii	"Generated_Source\\PSoC4\\CyLib.c\000"
 4481      72617465 
 4481      645F536F 
 4481      75726365 
 4481      5C50536F 
 4482              	.LASF67:
 4483 0691 6D696372 		.ascii	"microseconds\000"
 4483      6F736563 
 4483      6F6E6473 
 4483      00
 4484              	.LASF24:
 4485 069e 746D7052 		.ascii	"tmpReg\000"
 4485      656700
 4486              	.LASF73:
 4487 06a5 43795379 		.ascii	"CySysTickSetReload\000"
 4487      73546963 
 4487      6B536574 
 4487      52656C6F 
 4487      616400
 4488              	.LASF102:
 4489 06b8 43795379 		.ascii	"CySysTickServiceCallbacks\000"
 4489      73546963 
 4489      6B536572 
 4489      76696365 
ARM GAS  e:\temp\cc2tFLyS.s 			page 142


 4489      43616C6C 
 4490              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
